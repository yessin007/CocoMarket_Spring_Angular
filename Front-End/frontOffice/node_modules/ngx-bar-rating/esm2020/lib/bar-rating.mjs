import { Component, Input, Output, EventEmitter, ContentChild, ChangeDetectionStrategy, forwardRef } from '@angular/core';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';
import { ActiveRating, FractionRating, InactiveRating } from './custom-rating';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "./bar-rating.pipe";
/** This allows support [(ngModel)] and ngControl. */
const RATING_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => BarRating),
    multi: true
};
/** This allows control required validation. */
const RATING_VALUE_VALIDATOR = {
    provide: NG_VALIDATORS,
    useExisting: forwardRef(() => BarRating),
    multi: true,
};
var BarRatingUnitState;
(function (BarRatingUnitState) {
    BarRatingUnitState["active"] = "active";
    BarRatingUnitState["inactive"] = "inactive";
    BarRatingUnitState["selected"] = "selected";
    BarRatingUnitState["fraction"] = "fraction";
})(BarRatingUnitState || (BarRatingUnitState = {}));
export class BarRating {
    constructor(changeDetectorRef) {
        this.changeDetectorRef = changeDetectorRef;
        this.unitState = BarRatingUnitState;
        this.contexts = [];
        /** Maximal rating that can be given using this widget. */
        this.max = 5;
        /** A flag indicating if rating can be updated. */
        this.readOnly = false;
        /** Set the theme */
        this.theme = 'default';
        /** Show rating title */
        this.showText = false;
        /** Replace rate value with a title */
        this.titles = [];
        /** A flag indicating if rating is required for form validation. */
        this.required = false;
        /**
         * A stream that emits when a user is hovering over a given rating.
         * Event's payload equals to the rating being hovered over.
         */
        this.hover = new EventEmitter();
        /**
         * A stream that emits when a user stops hovering over a given rating.
         * Event's payload equals to the rating of the last item being hovered over.
         */
        this.leave = new EventEmitter();
        /**
         * A stream that emits when a user selects a new rating.
         * Event's payload equals to the newly selected rating.
         */
        this.rateChange = new EventEmitter(true);
        /**
         * A stream that forwards a bar rating click since clicks are not propagated
         */
        this.barClick = new EventEmitter();
    }
    ngOnChanges(changes) {
        if (changes.rate) {
            this.update(this.rate);
        }
    }
    ngOnInit() {
        this.contexts = Array.from({ length: this.max }, (context, i) => ({
            state: BarRatingUnitState.inactive,
            click: () => this.handleClick(i + 1),
            enter: () => this.handleEnter(i + 1)
        }));
        this.updateState(this.rate);
    }
    update(newRate, internalChange = true) {
        if (!this.readOnly && !this.disabled && this.rate !== newRate) {
            this.rate = newRate;
            this.rateChange.emit(this.rate);
        }
        if (internalChange) {
            this.onChange(this.rate);
            this.onTouched();
        }
        this.updateState(this.rate);
    }
    /** Reset rate value */
    reset() {
        this.leave.emit(this.nextRate);
        this.updateState(this.rate);
    }
    updateState(nextValue) {
        /** Set rate value as text */
        this.nextRate = nextValue - 1;
        /** Set the rating */
        this.contexts = Array.from({ length: this.max }, (context, index) => ({
            state: index + 1 <= nextValue
                ? BarRatingUnitState.selected
                : (index + 1 === Math.round(nextValue) && nextValue % 1) >= 0.5
                    ? BarRatingUnitState.fraction
                    : BarRatingUnitState.inactive,
            click: () => this.handleClick(index),
            enter: () => this.handleEnter(index)
        }));
    }
    handleClick(value) {
        this.update(value + 1);
    }
    handleEnter(index) {
        if (!this.disabled && !this.readOnly) {
            /** Add selected class for rating hover */
            this.contexts.map((context, i) => {
                context.state = i <= index ? BarRatingUnitState.active : BarRatingUnitState.inactive;
            });
            this.nextRate = index;
            this.hover.emit(index);
        }
    }
    /** This is the initial value set to the component */
    writeValue(value) {
        this.update(value, false);
        this.changeDetectorRef.markForCheck();
    }
    validate(c) {
        return (this.required && !c.value) ? { required: true } : null;
    }
    onChange(_) {
    }
    onTouched() {
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
}
BarRating.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: BarRating, deps: [{ token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
BarRating.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: BarRating, selector: "bar-rating", inputs: { rate: "rate", max: "max", readOnly: "readOnly", theme: "theme", showText: "showText", titles: "titles", required: "required" }, outputs: { hover: "hover", leave: "leave", rateChange: "rateChange", barClick: "barClick" }, providers: [RATING_VALUE_ACCESSOR, RATING_VALUE_VALIDATOR], queries: [{ propertyName: "customActiveRating", first: true, predicate: ActiveRating, descendants: true }, { propertyName: "customInActiveRating", first: true, predicate: InactiveRating, descendants: true }, { propertyName: "customFractionRating", first: true, predicate: FractionRating, descendants: true }], usesOnChanges: true, ngImport: i0, template: "<div class=\"br br-{{ customInActiveRating ? '' : theme }}\"\r\n     [class.br-readonly]=\"readOnly\"\r\n     [class.br-disabled]=\"disabled\">\r\n\r\n  <div class=\"br-units\" (mouseleave)=\"reset()\">\r\n\r\n    <div *ngFor=\"let unit of contexts\"\r\n         class=\"br-unit\"\r\n         (click)=\"unit.click($event)\"\r\n         (mouseenter)=\"unit.enter()\">\r\n\r\n      <ng-container [ngSwitch]=\"unit.state\">\r\n        <ng-template *ngSwitchCase=\"unitState.fraction\" [ngTemplateOutlet]=\"customFractionRating?.template || fractionTemplate\"></ng-template>\r\n        <ng-template *ngSwitchCase=\"unitState.inactive\" [ngTemplateOutlet]=\"customInActiveRating?.template || inactiveTemplate\"></ng-template>\r\n        <ng-template *ngSwitchDefault [ngTemplateOutlet]=\"customActiveRating?.template || activeTemplate\"></ng-template>\r\n      </ng-container>\r\n    </div>\r\n  </div>\r\n\r\n  <div *ngIf=\"showText\" class=\"br-text\">{{ nextRate + 1 | rateTitle: titles }}</div>\r\n</div>\r\n\r\n<ng-template #fractionTemplate>\r\n  <div class=\"br-unit-inner br-fraction\"></div>\r\n</ng-template>\r\n\r\n<ng-template #activeTemplate>\r\n  <div class=\"br-unit-inner br-active\"></div>\r\n</ng-template>\r\n\r\n<ng-template #inactiveTemplate>\r\n  <div class=\"br-unit-inner br-inactive\"></div>\r\n</ng-template>\r\n", styles: ["*{box-sizing:border-box}:host{--br-font-size: 16px;--br-gap: 0;--br-active-color: #EDB867;--br-inactive-color: #D2D2D2}.br{position:relative}.br-units{display:flex;flex-wrap:nowrap;gap:var(--br-gap)}.br-unit{font-size:var(--br-font-size);cursor:pointer;-webkit-font-smoothing:antialiased;text-rendering:auto}.br-unit-inner{position:relative}.br-readonly .br-unit,.br-disabled .br-unit{cursor:default}\n"], directives: [{ type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i1.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i1.NgSwitchDefault, selector: "[ngSwitchDefault]" }, { type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "rateTitle": i2.BarRatingPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: BarRating, decorators: [{
            type: Component,
            args: [{ selector: 'bar-rating', providers: [RATING_VALUE_ACCESSOR, RATING_VALUE_VALIDATOR], changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"br br-{{ customInActiveRating ? '' : theme }}\"\r\n     [class.br-readonly]=\"readOnly\"\r\n     [class.br-disabled]=\"disabled\">\r\n\r\n  <div class=\"br-units\" (mouseleave)=\"reset()\">\r\n\r\n    <div *ngFor=\"let unit of contexts\"\r\n         class=\"br-unit\"\r\n         (click)=\"unit.click($event)\"\r\n         (mouseenter)=\"unit.enter()\">\r\n\r\n      <ng-container [ngSwitch]=\"unit.state\">\r\n        <ng-template *ngSwitchCase=\"unitState.fraction\" [ngTemplateOutlet]=\"customFractionRating?.template || fractionTemplate\"></ng-template>\r\n        <ng-template *ngSwitchCase=\"unitState.inactive\" [ngTemplateOutlet]=\"customInActiveRating?.template || inactiveTemplate\"></ng-template>\r\n        <ng-template *ngSwitchDefault [ngTemplateOutlet]=\"customActiveRating?.template || activeTemplate\"></ng-template>\r\n      </ng-container>\r\n    </div>\r\n  </div>\r\n\r\n  <div *ngIf=\"showText\" class=\"br-text\">{{ nextRate + 1 | rateTitle: titles }}</div>\r\n</div>\r\n\r\n<ng-template #fractionTemplate>\r\n  <div class=\"br-unit-inner br-fraction\"></div>\r\n</ng-template>\r\n\r\n<ng-template #activeTemplate>\r\n  <div class=\"br-unit-inner br-active\"></div>\r\n</ng-template>\r\n\r\n<ng-template #inactiveTemplate>\r\n  <div class=\"br-unit-inner br-inactive\"></div>\r\n</ng-template>\r\n", styles: ["*{box-sizing:border-box}:host{--br-font-size: 16px;--br-gap: 0;--br-active-color: #EDB867;--br-inactive-color: #D2D2D2}.br{position:relative}.br-units{display:flex;flex-wrap:nowrap;gap:var(--br-gap)}.br-unit{font-size:var(--br-font-size);cursor:pointer;-webkit-font-smoothing:antialiased;text-rendering:auto}.br-unit-inner{position:relative}.br-readonly .br-unit,.br-disabled .br-unit{cursor:default}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }]; }, propDecorators: { rate: [{
                type: Input
            }], max: [{
                type: Input
            }], readOnly: [{
                type: Input
            }], theme: [{
                type: Input
            }], showText: [{
                type: Input
            }], titles: [{
                type: Input
            }], required: [{
                type: Input
            }], hover: [{
                type: Output
            }], leave: [{
                type: Output
            }], rateChange: [{
                type: Output
            }], barClick: [{
                type: Output
            }], customActiveRating: [{
                type: ContentChild,
                args: [ActiveRating]
            }], customInActiveRating: [{
                type: ContentChild,
                args: [InactiveRating]
            }], customFractionRating: [{
                type: ContentChild,
                args: [FractionRating]
            }] } });
//# sourceMappingURL=data:application/json;base64,