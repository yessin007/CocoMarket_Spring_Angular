{"version":3,"file":"ngx-masonry.js","sources":["../../../projects/ngx-masonry/src/lib/ngx-masonry.component.ts","../../../projects/ngx-masonry/src/lib/ngx-masonry.directive.ts","../../../projects/ngx-masonry/src/lib/ngx-masonry.module.ts","../../../projects/ngx-masonry/src/public-api.ts","../../../projects/ngx-masonry/src/ngx-masonry.ts"],"sourcesContent":["import { isPlatformBrowser } from '@angular/common';\nimport { Component, ElementRef, EventEmitter, Inject, Input, OnChanges, OnDestroy, OnInit, Output, PLATFORM_ID, SimpleChanges } from '@angular/core';\nimport { NgxMasonryOptions } from './ngx-masonry-options';\nimport { NgxMasonryDirective } from './ngx-masonry.directive';\n\ndeclare var require: any;\nlet masonryConstructor: any;\n\n@Component({\n  selector: '[ngx-masonry], ngx-masonry',\n  template: '<ng-content></ng-content>',\n  styles: [\n    `\n\t\t:host {\n\t\t\tdisplay: block;\n\t\t}\n\t`\n  ]\n})\nexport class NgxMasonryComponent implements OnInit, OnChanges, OnDestroy {\n  constructor(@Inject(PLATFORM_ID) private platformId: any, private _element: ElementRef) {}\n\n  public masonryInstance: any;\n\n  // Inputs\n  @Input() public options: NgxMasonryOptions;\n  @Input() updateLayout = false;\n  @Input() ordered = false;\n\n  // Outputs\n  @Output() layoutComplete: EventEmitter<any[]> = new EventEmitter<any[]>();\n  @Output() removeComplete: EventEmitter<any[]> = new EventEmitter<any[]>();\n  @Output() itemsLoaded: EventEmitter<number> = new EventEmitter<number>();\n\n  private pendingItems = [];\n\n  ngOnInit() {\n\n    if (isPlatformBrowser(this.platformId) && masonryConstructor === undefined) {\n      masonryConstructor = require('masonry-layout');\n    }\n\n    // Create masonry options object\n    if (!this.options) {\n      this.options = {};\n    }\n\n    // Set default itemSelector\n    if (!this.options.itemSelector) {\n      this.options.itemSelector = '[ngxMasonryItem], ngxMasonryItem';\n    }\n\n    this.options['transitionDuration'] = '0s';\n\n    if (isPlatformBrowser(this.platformId)) {\n      // Initialize Masonry\n      this.masonryInstance = new masonryConstructor(this._element.nativeElement, this.options);\n\n      // Bind to events\n      this.masonryInstance.on('layoutComplete', (items: any) => {\n        this.layoutComplete.emit(items);\n      });\n      this.masonryInstance.on('removeComplete', (items: any) => {\n        this.removeComplete.emit(items);\n      });\n      this.masonryInstance.items=[];\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // only update layout if it's not the first change\n    if (changes.updateLayout) {\n      if (!changes.updateLayout.firstChange) {\n        this.layout();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.masonryInstance) {\n      this.masonryInstance.destroy();\n    }\n  }\n\n  public layout() {\n    setTimeout(() => {\n      this.masonryInstance.layout();\n    });\n  }\n\n  public reloadItems() {\n    setTimeout(() => {\n      this.masonryInstance.reloadItems();\n    });\n  }\n\n  public addPendingItem(item: NgxMasonryDirective) {\n    this.pendingItems.push(item);\n  }\n\n  public add(newItem: NgxMasonryDirective) {\n    if (this.ordered) {\n      for (const [index, item] of this.pendingItems.entries()) {\n        if (item) {\n          if (item.images && item.images.size === 0) {\n            this.pendingItems[index] = undefined;\n            this.itemLoaded(item);\n            if (index + 1 === this.pendingItems.length) {\n              // All items are loaded\n              this.itemsLoaded.emit(this.pendingItems.length);\n              this.pendingItems = [];\n            }\n          } else {\n            return;\n          }\n        }\n      }\n    } else {\n      this.itemLoaded(newItem);\n    }\n  }\n\n  private itemLoaded(item: NgxMasonryDirective) {\n    if(isPlatformBrowser(this.platformId)){\n      // Tell Masonry that a child element has been added\n      if (item.prepend) {\n        this.masonryInstance.prepended(item.element.nativeElement);\n      } else {\n        this.masonryInstance.appended(item.element.nativeElement);\n      }\n\n      // Check if first item\n      if (this.masonryInstance.items.length === 1) {\n          this.masonryInstance.layout();\n      }\n      item.playAnimation(true);\n    }\n  }\n\n  public remove(element: HTMLElement) {\n    if (isPlatformBrowser(this.platformId)) {\n      // Tell Masonry that a child element has been removed\n      this.masonryInstance.remove(element);\n\n      // Layout items\n      this.layout();\n    }\n  }\n}\n","import { Directive, Inject, ElementRef, forwardRef, OnDestroy, AfterViewInit, Renderer2, OnInit, Input } from '@angular/core';\nimport { style, animate, AnimationBuilder } from '@angular/animations';\n\nimport { NgxMasonryComponent } from './ngx-masonry.component';\nimport { NgxMasonryAnimations } from './ngx-masonry-options';\n\n@Directive({\n  selector: '[ngxMasonryItem], ngxMasonryItem'\n})\nexport class NgxMasonryDirective implements OnInit, OnDestroy, AfterViewInit {\n  @Input() prepend = false;\n\n  public images: Set<HTMLImageElement>;\n  private animations: NgxMasonryAnimations = {\n    show: [\n      style({opacity: 0}),\n      animate('400ms ease-in', style({opacity: 1})),\n    ],\n    hide: [\n      style({opacity: '*'}),\n      animate('400ms ease-in', style({opacity: 0})),\n    ]\n  };\n\n  constructor(\n    public element: ElementRef,\n    private builder: AnimationBuilder,\n    @Inject(forwardRef(() => NgxMasonryComponent)) private parent: NgxMasonryComponent,\n    private renderer: Renderer2,\n  ) {}\n\n  ngOnInit() {\n    if (this.parent.options.animations !== undefined) {\n      this.animations = this.parent.options.animations;\n    }\n    this.renderer.setStyle(this.element.nativeElement, 'position', 'fixed');\n    this.renderer.setStyle(this.element.nativeElement, 'right', '-150vw');\n    this.parent.addPendingItem(this);\n  }\n\n  ngAfterViewInit() {\n    const images: HTMLImageElement[] = Array.from(this.element.nativeElement.getElementsByTagName('img'));\n    this.images = new Set(images);\n    if (images.length === 0) {\n      setTimeout(() => {\n        this.parent.add(this);\n      });\n    } else {\n      for (const imageRef of images) {\n        // skip image render check if image has `masonryLazy` attribute\n        if (imageRef.hasAttribute('masonryLazy')) {\n            this.imageLoaded(imageRef);\n        } else { \n          this.renderer.listen(imageRef, 'load', _ => {\n            this.imageLoaded(imageRef);\n          });\n          this.renderer.listen(imageRef, 'error', _ => {\n            this.imageLoaded(imageRef);\n          });\n        }\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.images && this.images.size === 0 && this.element.nativeElement.parentNode) {\n      this.playAnimation(false);\n      this.parent.remove(this.element.nativeElement);\n    }\n  }\n\n  private imageLoaded(image?: HTMLImageElement) {\n    this.images.delete(image);\n    if (this.images.size === 0) {\n      this.parent.add(this);\n    }\n  }\n\n  public playAnimation(show: boolean) {\n    const metadata = show ? this.animations.show : this.animations.hide;\n    if (metadata) {\n      const player = this.builder.build(metadata).create(this.element.nativeElement);\n      player.play();\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { NgxMasonryComponent } from './ngx-masonry.component';\nimport { NgxMasonryDirective } from './ngx-masonry.directive';\n\n@NgModule({\n  imports: [],\n  declarations: [NgxMasonryComponent, NgxMasonryDirective],\n  exports: [NgxMasonryComponent, NgxMasonryDirective]\n})\nexport class NgxMasonryModule {}\n","/*\n * Public API Surface of ngx-masonry\n */\n\nexport * from './lib/ngx-masonry.component';\nexport * from './lib/ngx-masonry.directive';\nexport * from './lib/ngx-masonry-options';\nexport * from './lib/ngx-masonry.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}