{"version":3,"file":"ngx-masonry.js","sources":["../../../projects/ngx-masonry/src/lib/ngx-masonry.component.ts","../../../projects/ngx-masonry/src/lib/ngx-masonry.directive.ts","../../../projects/ngx-masonry/src/lib/ngx-masonry.module.ts","../../../projects/ngx-masonry/src/public-api.ts","../../../projects/ngx-masonry/src/ngx-masonry.ts"],"names":[],"mappings":"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","sourcesContent":["import { isPlatformBrowser } from '@angular/common';\nimport { Component, ElementRef, EventEmitter, Inject, Input, OnChanges, OnDestroy, OnInit, Output, PLATFORM_ID, SimpleChanges } from '@angular/core';\nimport { NgxMasonryOptions } from './ngx-masonry-options';\nimport { NgxMasonryDirective } from './ngx-masonry.directive';\n\ndeclare var require: any;\nlet masonryConstructor: any;\n\n@Component({\n  selector: '[ngx-masonry], ngx-masonry',\n  template: '<ng-content></ng-content>',\n  styles: [\n    `\n\t\t:host {\n\t\t\tdisplay: block;\n\t\t}\n\t`\n  ]\n})\nexport class NgxMasonryComponent implements OnInit, OnChanges, OnDestroy {\n  constructor(@Inject(PLATFORM_ID) private platformId: any, private _element: ElementRef) {}\n\n  public masonryInstance: any;\n\n  // Inputs\n  @Input() public options: NgxMasonryOptions;\n  @Input() updateLayout = false;\n  @Input() ordered = false;\n\n  // Outputs\n  @Output() layoutComplete: EventEmitter<any[]> = new EventEmitter<any[]>();\n  @Output() removeComplete: EventEmitter<any[]> = new EventEmitter<any[]>();\n  @Output() itemsLoaded: EventEmitter<number> = new EventEmitter<number>();\n\n  private pendingItems = [];\n\n  ngOnInit() {\n\n    if (isPlatformBrowser(this.platformId) && masonryConstructor === undefined) {\n      masonryConstructor = require('masonry-layout');\n    }\n\n    // Create masonry options object\n    if (!this.options) {\n      this.options = {};\n    }\n\n    // Set default itemSelector\n    if (!this.options.itemSelector) {\n      this.options.itemSelector = '[ngxMasonryItem], ngxMasonryItem';\n    }\n\n    this.options['transitionDuration'] = '0s';\n\n    if (isPlatformBrowser(this.platformId)) {\n      // Initialize Masonry\n      this.masonryInstance = new masonryConstructor(this._element.nativeElement, this.options);\n\n      // Bind to events\n      this.masonryInstance.on('layoutComplete', (items: any) => {\n        this.layoutComplete.emit(items);\n      });\n      this.masonryInstance.on('removeComplete', (items: any) => {\n        this.removeComplete.emit(items);\n      });\n      this.masonryInstance.items=[];\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // only update layout if it's not the first change\n    if (changes.updateLayout) {\n      if (!changes.updateLayout.firstChange) {\n        this.layout();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.masonryInstance) {\n      this.masonryInstance.destroy();\n    }\n  }\n\n  public layout() {\n    setTimeout(() => {\n      this.masonryInstance.layout();\n    });\n  }\n\n  public reloadItems() {\n    setTimeout(() => {\n      this.masonryInstance.reloadItems();\n    });\n  }\n\n  public addPendingItem(item: NgxMasonryDirective) {\n    this.pendingItems.push(item);\n  }\n\n  public add(newItem: NgxMasonryDirective) {\n    if (this.ordered) {\n      for (const [index, item] of this.pendingItems.entries()) {\n        if (item) {\n          if (item.images && item.images.size === 0) {\n            this.pendingItems[index] = undefined;\n            this.itemLoaded(item);\n            if (index + 1 === this.pendingItems.length) {\n              // All items are loaded\n              this.itemsLoaded.emit(this.pendingItems.length);\n              this.pendingItems = [];\n            }\n          } else {\n            return;\n          }\n        }\n      }\n    } else {\n      this.itemLoaded(newItem);\n    }\n  }\n\n  private itemLoaded(item: NgxMasonryDirective) {\n    if(isPlatformBrowser(this.platformId)){\n      // Tell Masonry that a child element has been added\n      if (item.prepend) {\n        this.masonryInstance.prepended(item.element.nativeElement);\n      } else {\n        this.masonryInstance.appended(item.element.nativeElement);\n      }\n\n      // Check if first item\n      if (this.masonryInstance.items.length === 1) {\n          this.masonryInstance.layout();\n      }\n      item.playAnimation(true);\n    }\n  }\n\n  public remove(element: HTMLElement) {\n    if (isPlatformBrowser(this.platformId)) {\n      // Tell Masonry that a child element has been removed\n      this.masonryInstance.remove(element);\n\n      // Layout items\n      this.layout();\n    }\n  }\n}\n","import { Directive, Inject, ElementRef, forwardRef, OnDestroy, AfterViewInit, Renderer2, OnInit, Input } from '@angular/core';\nimport { style, animate, AnimationBuilder } from '@angular/animations';\n\nimport { NgxMasonryComponent } from './ngx-masonry.component';\nimport { NgxMasonryAnimations } from './ngx-masonry-options';\n\n@Directive({\n  selector: '[ngxMasonryItem], ngxMasonryItem'\n})\nexport class NgxMasonryDirective implements OnInit, OnDestroy, AfterViewInit {\n  @Input() prepend = false;\n\n  public images: Set<HTMLImageElement>;\n  private animations: NgxMasonryAnimations = {\n    show: [\n      style({opacity: 0}),\n      animate('400ms ease-in', style({opacity: 1})),\n    ],\n    hide: [\n      style({opacity: '*'}),\n      animate('400ms ease-in', style({opacity: 0})),\n    ]\n  };\n\n  constructor(\n    public element: ElementRef,\n    private builder: AnimationBuilder,\n    @Inject(forwardRef(() => NgxMasonryComponent)) private parent: NgxMasonryComponent,\n    private renderer: Renderer2,\n  ) {}\n\n  ngOnInit() {\n    if (this.parent.options.animations !== undefined) {\n      this.animations = this.parent.options.animations;\n    }\n    this.renderer.setStyle(this.element.nativeElement, 'position', 'fixed');\n    this.renderer.setStyle(this.element.nativeElement, 'right', '-150vw');\n    this.parent.addPendingItem(this);\n  }\n\n  ngAfterViewInit() {\n    const images: HTMLImageElement[] = Array.from(this.element.nativeElement.getElementsByTagName('img'));\n    this.images = new Set(images);\n    if (images.length === 0) {\n      setTimeout(() => {\n        this.parent.add(this);\n      });\n    } else {\n      for (const imageRef of images) {\n        // skip image render check if image has `masonryLazy` attribute\n        if (imageRef.hasAttribute('masonryLazy')) {\n            this.imageLoaded(imageRef);\n        } else { \n          this.renderer.listen(imageRef, 'load', _ => {\n            this.imageLoaded(imageRef);\n          });\n          this.renderer.listen(imageRef, 'error', _ => {\n            this.imageLoaded(imageRef);\n          });\n        }\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.images && this.images.size === 0 && this.element.nativeElement.parentNode) {\n      this.playAnimation(false);\n      this.parent.remove(this.element.nativeElement);\n    }\n  }\n\n  private imageLoaded(image?: HTMLImageElement) {\n    this.images.delete(image);\n    if (this.images.size === 0) {\n      this.parent.add(this);\n    }\n  }\n\n  public playAnimation(show: boolean) {\n    const metadata = show ? this.animations.show : this.animations.hide;\n    if (metadata) {\n      const player = this.builder.build(metadata).create(this.element.nativeElement);\n      player.play();\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { NgxMasonryComponent } from './ngx-masonry.component';\nimport { NgxMasonryDirective } from './ngx-masonry.directive';\n\n@NgModule({\n  imports: [],\n  declarations: [NgxMasonryComponent, NgxMasonryDirective],\n  exports: [NgxMasonryComponent, NgxMasonryDirective]\n})\nexport class NgxMasonryModule {}\n","/*\n * Public API Surface of ngx-masonry\n */\n\nexport * from './lib/ngx-masonry.component';\nexport * from './lib/ngx-masonry.directive';\nexport * from './lib/ngx-masonry-options';\nexport * from './lib/ngx-masonry.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}