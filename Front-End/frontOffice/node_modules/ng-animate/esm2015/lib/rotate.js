import { animation, style, animate, keyframes } from '@angular/animations';
import { DEFAULT_TIMING } from './utils';
export function rotateInDirection(origin, degrees) {
    return animation(animate('{{ timing }}s {{ delay }}s', keyframes([
        style({
            'transform-origin': '{{ origin }}',
            opacity: 0,
            transform: 'rotate3d(0, 0, 1, {{ degrees }})',
            offset: 0
        }),
        style({
            'transform-origin': '{{ origin }}',
            opacity: 1,
            transform: 'none',
            offset: 1
        })
    ])), {
        params: { timing: DEFAULT_TIMING, delay: 0, origin, degrees }
    });
}
export const rotateIn = rotateInDirection('center', '-200deg');
export const rotateInDownLeft = rotateInDirection('left bottom', '-45deg');
export const rotateInDownRight = rotateInDirection('right bottom', '45deg');
export const rotateInUpLeft = rotateInDirection('left bottom', '45deg');
export const rotateInUpRight = rotateInDirection('right bottom', '-90deg');
export function rotateOutDirection(origin, degrees) {
    return animation(animate('{{ timing }}s {{ delay }}s', keyframes([
        style({
            'transform-origin': '{{ origin }}',
            opacity: 1,
            transform: 'none',
            offset: 0
        }),
        style({
            'transform-origin': '{{ origin }}',
            opacity: 0,
            transform: 'rotate3d(0, 0, 1, {{ degrees }})',
            offset: 1
        })
    ])), {
        params: { timing: DEFAULT_TIMING, delay: 0, origin, degrees }
    });
}
export const rotateOut = rotateOutDirection('center', '200deg');
export const rotateOutDownLeft = rotateOutDirection('left bottom', '45deg');
export const rotateOutDownRight = rotateOutDirection('right bottom', '-45deg');
export const rotateOutUpLeft = rotateOutDirection('left bottom', '-45deg');
export const rotateOutUpRight = rotateOutDirection('right bottom', '90deg');
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm90YXRlLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uL3Byb2plY3RzL25nLWFuaW1hdGUvc3JjLyIsInNvdXJjZXMiOlsibGliL3JvdGF0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBRUwsU0FBUyxFQUNULEtBQUssRUFDTCxPQUFPLEVBQ1AsU0FBUyxFQUNWLE1BQU0scUJBQXFCLENBQUM7QUFDN0IsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUV6QyxNQUFNLFVBQVUsaUJBQWlCLENBQUMsTUFBTSxFQUFFLE9BQU87SUFDL0MsT0FBTyxTQUFTLENBQ2QsT0FBTyxDQUNMLDRCQUE0QixFQUM1QixTQUFTLENBQUM7UUFDUixLQUFLLENBQUM7WUFDSixrQkFBa0IsRUFBRSxjQUFjO1lBQ2xDLE9BQU8sRUFBRSxDQUFDO1lBQ1YsU0FBUyxFQUFFLGtDQUFrQztZQUM3QyxNQUFNLEVBQUUsQ0FBQztTQUNWLENBQUM7UUFDRixLQUFLLENBQUM7WUFDSixrQkFBa0IsRUFBRSxjQUFjO1lBQ2xDLE9BQU8sRUFBRSxDQUFDO1lBQ1YsU0FBUyxFQUFFLE1BQU07WUFDakIsTUFBTSxFQUFFLENBQUM7U0FDVixDQUFDO0tBQ0gsQ0FBQyxDQUNILEVBQ0Q7UUFDRSxNQUFNLEVBQUUsRUFBRSxNQUFNLEVBQUUsY0FBYyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRTtLQUM5RCxDQUNGLENBQUM7QUFDSixDQUFDO0FBRUQsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLGlCQUFpQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUMsQ0FBQztBQUMvRCxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxpQkFBaUIsQ0FBQyxhQUFhLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFDM0UsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQUcsaUJBQWlCLENBQUMsY0FBYyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQzVFLE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyxpQkFBaUIsQ0FBQyxhQUFhLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDeEUsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLGlCQUFpQixDQUFDLGNBQWMsRUFBRSxRQUFRLENBQUMsQ0FBQztBQUUzRSxNQUFNLFVBQVUsa0JBQWtCLENBQUMsTUFBTSxFQUFFLE9BQU87SUFDaEQsT0FBTyxTQUFTLENBQ2QsT0FBTyxDQUNMLDRCQUE0QixFQUM1QixTQUFTLENBQUM7UUFDUixLQUFLLENBQUM7WUFDSixrQkFBa0IsRUFBRSxjQUFjO1lBQ2xDLE9BQU8sRUFBRSxDQUFDO1lBQ1YsU0FBUyxFQUFFLE1BQU07WUFDakIsTUFBTSxFQUFFLENBQUM7U0FDVixDQUFDO1FBQ0YsS0FBSyxDQUFDO1lBQ0osa0JBQWtCLEVBQUUsY0FBYztZQUNsQyxPQUFPLEVBQUUsQ0FBQztZQUNWLFNBQVMsRUFBRSxrQ0FBa0M7WUFDN0MsTUFBTSxFQUFFLENBQUM7U0FDVixDQUFDO0tBQ0gsQ0FBQyxDQUNILEVBQ0Q7UUFDRSxNQUFNLEVBQUUsRUFBRSxNQUFNLEVBQUUsY0FBYyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRTtLQUM5RCxDQUNGLENBQUM7QUFDSixDQUFDO0FBRUQsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLGtCQUFrQixDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FBQztBQUNoRSxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRyxrQkFBa0IsQ0FBQyxhQUFhLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDNUUsTUFBTSxDQUFDLE1BQU0sa0JBQWtCLEdBQUcsa0JBQWtCLENBQUMsY0FBYyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQy9FLE1BQU0sQ0FBQyxNQUFNLGVBQWUsR0FBRyxrQkFBa0IsQ0FBQyxhQUFhLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFDM0UsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsa0JBQWtCLENBQUMsY0FBYyxFQUFFLE9BQU8sQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQW5pbWF0aW9uUmVmZXJlbmNlTWV0YWRhdGEsXG4gIGFuaW1hdGlvbixcbiAgc3R5bGUsXG4gIGFuaW1hdGUsXG4gIGtleWZyYW1lc1xufSBmcm9tICdAYW5ndWxhci9hbmltYXRpb25zJztcbmltcG9ydCB7IERFRkFVTFRfVElNSU5HIH0gZnJvbSAnLi91dGlscyc7XG5cbmV4cG9ydCBmdW5jdGlvbiByb3RhdGVJbkRpcmVjdGlvbihvcmlnaW4sIGRlZ3JlZXMpIHtcbiAgcmV0dXJuIGFuaW1hdGlvbihcbiAgICBhbmltYXRlKFxuICAgICAgJ3t7IHRpbWluZyB9fXMge3sgZGVsYXkgfX1zJyxcbiAgICAgIGtleWZyYW1lcyhbXG4gICAgICAgIHN0eWxlKHtcbiAgICAgICAgICAndHJhbnNmb3JtLW9yaWdpbic6ICd7eyBvcmlnaW4gfX0nLFxuICAgICAgICAgIG9wYWNpdHk6IDAsXG4gICAgICAgICAgdHJhbnNmb3JtOiAncm90YXRlM2QoMCwgMCwgMSwge3sgZGVncmVlcyB9fSknLFxuICAgICAgICAgIG9mZnNldDogMFxuICAgICAgICB9KSxcbiAgICAgICAgc3R5bGUoe1xuICAgICAgICAgICd0cmFuc2Zvcm0tb3JpZ2luJzogJ3t7IG9yaWdpbiB9fScsXG4gICAgICAgICAgb3BhY2l0eTogMSxcbiAgICAgICAgICB0cmFuc2Zvcm06ICdub25lJyxcbiAgICAgICAgICBvZmZzZXQ6IDFcbiAgICAgICAgfSlcbiAgICAgIF0pXG4gICAgKSxcbiAgICB7XG4gICAgICBwYXJhbXM6IHsgdGltaW5nOiBERUZBVUxUX1RJTUlORywgZGVsYXk6IDAsIG9yaWdpbiwgZGVncmVlcyB9XG4gICAgfVxuICApO1xufVxuXG5leHBvcnQgY29uc3Qgcm90YXRlSW4gPSByb3RhdGVJbkRpcmVjdGlvbignY2VudGVyJywgJy0yMDBkZWcnKTtcbmV4cG9ydCBjb25zdCByb3RhdGVJbkRvd25MZWZ0ID0gcm90YXRlSW5EaXJlY3Rpb24oJ2xlZnQgYm90dG9tJywgJy00NWRlZycpO1xuZXhwb3J0IGNvbnN0IHJvdGF0ZUluRG93blJpZ2h0ID0gcm90YXRlSW5EaXJlY3Rpb24oJ3JpZ2h0IGJvdHRvbScsICc0NWRlZycpO1xuZXhwb3J0IGNvbnN0IHJvdGF0ZUluVXBMZWZ0ID0gcm90YXRlSW5EaXJlY3Rpb24oJ2xlZnQgYm90dG9tJywgJzQ1ZGVnJyk7XG5leHBvcnQgY29uc3Qgcm90YXRlSW5VcFJpZ2h0ID0gcm90YXRlSW5EaXJlY3Rpb24oJ3JpZ2h0IGJvdHRvbScsICctOTBkZWcnKTtcblxuZXhwb3J0IGZ1bmN0aW9uIHJvdGF0ZU91dERpcmVjdGlvbihvcmlnaW4sIGRlZ3JlZXMpIHtcbiAgcmV0dXJuIGFuaW1hdGlvbihcbiAgICBhbmltYXRlKFxuICAgICAgJ3t7IHRpbWluZyB9fXMge3sgZGVsYXkgfX1zJyxcbiAgICAgIGtleWZyYW1lcyhbXG4gICAgICAgIHN0eWxlKHtcbiAgICAgICAgICAndHJhbnNmb3JtLW9yaWdpbic6ICd7eyBvcmlnaW4gfX0nLFxuICAgICAgICAgIG9wYWNpdHk6IDEsXG4gICAgICAgICAgdHJhbnNmb3JtOiAnbm9uZScsXG4gICAgICAgICAgb2Zmc2V0OiAwXG4gICAgICAgIH0pLFxuICAgICAgICBzdHlsZSh7XG4gICAgICAgICAgJ3RyYW5zZm9ybS1vcmlnaW4nOiAne3sgb3JpZ2luIH19JyxcbiAgICAgICAgICBvcGFjaXR5OiAwLFxuICAgICAgICAgIHRyYW5zZm9ybTogJ3JvdGF0ZTNkKDAsIDAsIDEsIHt7IGRlZ3JlZXMgfX0pJyxcbiAgICAgICAgICBvZmZzZXQ6IDFcbiAgICAgICAgfSlcbiAgICAgIF0pXG4gICAgKSxcbiAgICB7XG4gICAgICBwYXJhbXM6IHsgdGltaW5nOiBERUZBVUxUX1RJTUlORywgZGVsYXk6IDAsIG9yaWdpbiwgZGVncmVlcyB9XG4gICAgfVxuICApO1xufVxuXG5leHBvcnQgY29uc3Qgcm90YXRlT3V0ID0gcm90YXRlT3V0RGlyZWN0aW9uKCdjZW50ZXInLCAnMjAwZGVnJyk7XG5leHBvcnQgY29uc3Qgcm90YXRlT3V0RG93bkxlZnQgPSByb3RhdGVPdXREaXJlY3Rpb24oJ2xlZnQgYm90dG9tJywgJzQ1ZGVnJyk7XG5leHBvcnQgY29uc3Qgcm90YXRlT3V0RG93blJpZ2h0ID0gcm90YXRlT3V0RGlyZWN0aW9uKCdyaWdodCBib3R0b20nLCAnLTQ1ZGVnJyk7XG5leHBvcnQgY29uc3Qgcm90YXRlT3V0VXBMZWZ0ID0gcm90YXRlT3V0RGlyZWN0aW9uKCdsZWZ0IGJvdHRvbScsICctNDVkZWcnKTtcbmV4cG9ydCBjb25zdCByb3RhdGVPdXRVcFJpZ2h0ID0gcm90YXRlT3V0RGlyZWN0aW9uKCdyaWdodCBib3R0b20nLCAnOTBkZWcnKTtcbiJdfQ==