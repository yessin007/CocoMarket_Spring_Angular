import { Observable, of, Subject } from 'rxjs';
import { filter } from 'rxjs/operators';
import { SharedHooks } from '../shared-hooks/hooks';
export class IntersectionObserverHooks extends SharedHooks {
    constructor() {
        super(...arguments);
        this.observers = new WeakMap();
        this.intersectionSubject = new Subject();
        this.uniqKey = {};
    }
    getObservable(attributes) {
        if (this.skipLazyLoading(attributes)) {
            return of({ isIntersecting: true });
        }
        if (attributes.customObservable) {
            return attributes.customObservable;
        }
        const scrollContainerKey = attributes.scrollContainer || this.uniqKey;
        const options = {
            root: attributes.scrollContainer || null,
        };
        if (attributes.offset) {
            options.rootMargin = `${attributes.offset}px`;
        }
        let observer = this.observers.get(scrollContainerKey);
        if (!observer) {
            observer = new IntersectionObserver((entrys) => this.loadingCallback(entrys), options);
            this.observers.set(scrollContainerKey, observer);
        }
        observer.observe(attributes.element);
        return Observable.create((obs) => {
            const subscription = this.intersectionSubject.pipe(filter((entry) => entry.target === attributes.element)).subscribe(obs);
            return () => {
                subscription.unsubscribe();
                observer.unobserve(attributes.element);
            };
        });
    }
    isVisible(event) {
        return event.isIntersecting;
    }
    loadingCallback(entrys) {
        entrys.forEach((entry) => this.intersectionSubject.next(entry));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaG9va3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvaW50ZXJzZWN0aW9uLW9ic2VydmVyLWhvb2tzL2hvb2tzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsRUFBRSxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMvQyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDeEMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBR3BELE1BQU0sT0FBTyx5QkFBMEIsU0FBUSxXQUF3QztJQUF2Rjs7UUFDbUIsY0FBUyxHQUFHLElBQUksT0FBTyxFQUFzQyxDQUFDO1FBQzlELHdCQUFtQixHQUFHLElBQUksT0FBTyxFQUE2QixDQUFDO1FBQy9ELFlBQU8sR0FBRyxFQUFFLENBQUM7SUEwQ2hDLENBQUM7SUF4Q0MsYUFBYSxDQUFDLFVBQW1EO1FBQy9ELElBQUksSUFBSSxDQUFDLGVBQWUsQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUNwQyxPQUFPLEVBQUUsQ0FBQyxFQUFFLGNBQWMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1NBQ3JDO1FBQ0QsSUFBSSxVQUFVLENBQUMsZ0JBQWdCLEVBQUU7WUFDL0IsT0FBTyxVQUFVLENBQUMsZ0JBQWdCLENBQUM7U0FDcEM7UUFDRCxNQUFNLGtCQUFrQixHQUFHLFVBQVUsQ0FBQyxlQUFlLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUN0RSxNQUFNLE9BQU8sR0FBb0I7WUFDL0IsSUFBSSxFQUFFLFVBQVUsQ0FBQyxlQUFlLElBQUksSUFBSTtTQUN6QyxDQUFDO1FBQ0YsSUFBSSxVQUFVLENBQUMsTUFBTSxFQUFFO1lBQ3JCLE9BQU8sQ0FBQyxVQUFVLEdBQUcsR0FBRyxVQUFVLENBQUMsTUFBTSxJQUFJLENBQUM7U0FDL0M7UUFFRCxJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBRXRELElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDYixRQUFRLEdBQUcsSUFBSSxvQkFBb0IsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQztZQUN2RixJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsRUFBRSxRQUFRLENBQUMsQ0FBQztTQUNsRDtRQUVELFFBQVEsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRXJDLE9BQU8sVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQXVDLEVBQUUsRUFBRTtZQUNuRSxNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLE1BQU0sS0FBSyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDMUgsT0FBTyxHQUFHLEVBQUU7Z0JBQ1YsWUFBWSxDQUFDLFdBQVcsRUFBRSxDQUFDO2dCQUMzQixRQUFTLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUMxQyxDQUFDLENBQUM7UUFDSixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxTQUFTLENBQUMsS0FBa0M7UUFDMUMsT0FBTyxLQUFLLENBQUMsY0FBYyxDQUFDO0lBQzlCLENBQUM7SUFFTyxlQUFlLENBQUMsTUFBbUM7UUFDekQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQ2xFLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGUsIG9mLCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBmaWx0ZXIgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBTaGFyZWRIb29rcyB9IGZyb20gJy4uL3NoYXJlZC1ob29rcy9ob29rcyc7XG5pbXBvcnQgeyBBdHRyaWJ1dGVzIH0gZnJvbSAnLi4vdHlwZXMnO1xuXG5leHBvcnQgY2xhc3MgSW50ZXJzZWN0aW9uT2JzZXJ2ZXJIb29rcyBleHRlbmRzIFNoYXJlZEhvb2tzPHsgaXNJbnRlcnNlY3Rpbmc6IGJvb2xlYW4gfT4ge1xuICBwcml2YXRlIHJlYWRvbmx5IG9ic2VydmVycyA9IG5ldyBXZWFrTWFwPEVsZW1lbnQgfCB7fSwgSW50ZXJzZWN0aW9uT2JzZXJ2ZXI+KCk7XG4gIHByaXZhdGUgcmVhZG9ubHkgaW50ZXJzZWN0aW9uU3ViamVjdCA9IG5ldyBTdWJqZWN0PEludGVyc2VjdGlvbk9ic2VydmVyRW50cnk+KCk7XG4gIHByaXZhdGUgcmVhZG9ubHkgdW5pcUtleSA9IHt9O1xuXG4gIGdldE9ic2VydmFibGUoYXR0cmlidXRlczogQXR0cmlidXRlczx7IGlzSW50ZXJzZWN0aW5nOiBib29sZWFuIH0+KTogT2JzZXJ2YWJsZTx7IGlzSW50ZXJzZWN0aW5nOiBib29sZWFuIH0+IHtcbiAgICBpZiAodGhpcy5za2lwTGF6eUxvYWRpbmcoYXR0cmlidXRlcykpIHtcbiAgICAgIHJldHVybiBvZih7IGlzSW50ZXJzZWN0aW5nOiB0cnVlIH0pO1xuICAgIH1cbiAgICBpZiAoYXR0cmlidXRlcy5jdXN0b21PYnNlcnZhYmxlKSB7XG4gICAgICByZXR1cm4gYXR0cmlidXRlcy5jdXN0b21PYnNlcnZhYmxlO1xuICAgIH1cbiAgICBjb25zdCBzY3JvbGxDb250YWluZXJLZXkgPSBhdHRyaWJ1dGVzLnNjcm9sbENvbnRhaW5lciB8fCB0aGlzLnVuaXFLZXk7XG4gICAgY29uc3Qgb3B0aW9uczogT2JzZXJ2ZXJPcHRpb25zID0ge1xuICAgICAgcm9vdDogYXR0cmlidXRlcy5zY3JvbGxDb250YWluZXIgfHwgbnVsbCxcbiAgICB9O1xuICAgIGlmIChhdHRyaWJ1dGVzLm9mZnNldCkge1xuICAgICAgb3B0aW9ucy5yb290TWFyZ2luID0gYCR7YXR0cmlidXRlcy5vZmZzZXR9cHhgO1xuICAgIH1cblxuICAgIGxldCBvYnNlcnZlciA9IHRoaXMub2JzZXJ2ZXJzLmdldChzY3JvbGxDb250YWluZXJLZXkpO1xuXG4gICAgaWYgKCFvYnNlcnZlcikge1xuICAgICAgb2JzZXJ2ZXIgPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoKGVudHJ5cykgPT4gdGhpcy5sb2FkaW5nQ2FsbGJhY2soZW50cnlzKSwgb3B0aW9ucyk7XG4gICAgICB0aGlzLm9ic2VydmVycy5zZXQoc2Nyb2xsQ29udGFpbmVyS2V5LCBvYnNlcnZlcik7XG4gICAgfVxuXG4gICAgb2JzZXJ2ZXIub2JzZXJ2ZShhdHRyaWJ1dGVzLmVsZW1lbnQpO1xuXG4gICAgcmV0dXJuIE9ic2VydmFibGUuY3JlYXRlKChvYnM6IFN1YmplY3Q8SW50ZXJzZWN0aW9uT2JzZXJ2ZXJFbnRyeT4pID0+IHtcbiAgICAgIGNvbnN0IHN1YnNjcmlwdGlvbiA9IHRoaXMuaW50ZXJzZWN0aW9uU3ViamVjdC5waXBlKGZpbHRlcigoZW50cnkpID0+IGVudHJ5LnRhcmdldCA9PT0gYXR0cmlidXRlcy5lbGVtZW50KSkuc3Vic2NyaWJlKG9icyk7XG4gICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgb2JzZXJ2ZXIhLnVub2JzZXJ2ZShhdHRyaWJ1dGVzLmVsZW1lbnQpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIGlzVmlzaWJsZShldmVudDogeyBpc0ludGVyc2VjdGluZzogYm9vbGVhbiB9KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGV2ZW50LmlzSW50ZXJzZWN0aW5nO1xuICB9XG5cbiAgcHJpdmF0ZSBsb2FkaW5nQ2FsbGJhY2soZW50cnlzOiBJbnRlcnNlY3Rpb25PYnNlcnZlckVudHJ5W10pIHtcbiAgICBlbnRyeXMuZm9yRWFjaCgoZW50cnkpID0+IHRoaXMuaW50ZXJzZWN0aW9uU3ViamVjdC5uZXh0KGVudHJ5KSk7XG4gIH1cbn1cblxuaW50ZXJmYWNlIE9ic2VydmVyT3B0aW9ucyB7XG4gIHJvb3Q6IEVsZW1lbnQgfCBudWxsO1xuICByb290TWFyZ2luPzogc3RyaW5nO1xufVxuIl19