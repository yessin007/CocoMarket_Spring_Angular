import { of } from 'rxjs';
import { catchError, filter, map, mergeMap, take, tap } from 'rxjs/operators';
export function lazyLoadImage(hooks, attributes) {
    return (evntObservable) => {
        return evntObservable.pipe(tap((data) => attributes.onStateChange.emit({ reason: 'observer-emit', data })), filter((event) => hooks.isVisible(event, attributes)), take(1), tap(() => attributes.onStateChange.emit({ reason: 'start-loading' })), mergeMap(() => hooks.loadImage(attributes)), tap(() => attributes.onStateChange.emit({ reason: 'mount-image' })), tap((imagePath) => hooks.setLoadedImage(imagePath, attributes)), tap(() => attributes.onStateChange.emit({ reason: 'loading-succeeded' })), map(() => true), catchError((error) => {
            attributes.onStateChange.emit({ reason: 'loading-failed', data: error });
            hooks.setErrorImage(error, attributes);
            return of(false);
        }), tap(() => {
            attributes.onStateChange.emit({ reason: 'finally' });
            hooks.finally(attributes);
        }));
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF6eWxvYWQtaW1hZ2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGF6eWxvYWQtaW1hZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFjLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN0QyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUc5RSxNQUFNLFVBQVUsYUFBYSxDQUFJLEtBQWUsRUFBRSxVQUFzQjtJQUN0RSxPQUFPLENBQUMsY0FBNkIsRUFBdUIsRUFBRTtRQUM1RCxPQUFPLGNBQWMsQ0FBQyxJQUFJLENBQ3hCLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsRUFBRSxNQUFNLEVBQUUsZUFBZSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsRUFDL0UsTUFBTSxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQyxFQUNyRCxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQ1AsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLEVBQUUsTUFBTSxFQUFFLGVBQWUsRUFBRSxDQUFDLENBQUMsRUFDckUsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUMsRUFDM0MsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLEVBQUUsTUFBTSxFQUFFLGFBQWEsRUFBRSxDQUFDLENBQUMsRUFDbkUsR0FBRyxDQUFDLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLFNBQVMsRUFBRSxVQUFVLENBQUMsQ0FBQyxFQUMvRCxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsRUFBRSxNQUFNLEVBQUUsbUJBQW1CLEVBQUUsQ0FBQyxDQUFDLEVBQ3pFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFDZixVQUFVLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRTtZQUNuQixVQUFVLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxFQUFFLE1BQU0sRUFBRSxnQkFBZ0IsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUN6RSxLQUFLLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQztZQUN2QyxPQUFPLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNuQixDQUFDLENBQUMsRUFDRixHQUFHLENBQUMsR0FBRyxFQUFFO1lBQ1AsVUFBVSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQztZQUNyRCxLQUFLLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQzVCLENBQUMsQ0FBQyxDQUNvQixDQUFDO0lBQzNCLENBQUMsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgY2F0Y2hFcnJvciwgZmlsdGVyLCBtYXAsIG1lcmdlTWFwLCB0YWtlLCB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBBdHRyaWJ1dGVzLCBIb29rcyB9IGZyb20gJy4vdHlwZXMnO1xuXG5leHBvcnQgZnVuY3Rpb24gbGF6eUxvYWRJbWFnZTxFPihob29rczogSG9va3M8RT4sIGF0dHJpYnV0ZXM6IEF0dHJpYnV0ZXMpIHtcbiAgcmV0dXJuIChldm50T2JzZXJ2YWJsZTogT2JzZXJ2YWJsZTxFPik6IE9ic2VydmFibGU8Ym9vbGVhbj4gPT4ge1xuICAgIHJldHVybiBldm50T2JzZXJ2YWJsZS5waXBlKFxuICAgICAgdGFwKChkYXRhKSA9PiBhdHRyaWJ1dGVzLm9uU3RhdGVDaGFuZ2UuZW1pdCh7IHJlYXNvbjogJ29ic2VydmVyLWVtaXQnLCBkYXRhIH0pKSxcbiAgICAgIGZpbHRlcigoZXZlbnQpID0+IGhvb2tzLmlzVmlzaWJsZShldmVudCwgYXR0cmlidXRlcykpLFxuICAgICAgdGFrZSgxKSxcbiAgICAgIHRhcCgoKSA9PiBhdHRyaWJ1dGVzLm9uU3RhdGVDaGFuZ2UuZW1pdCh7IHJlYXNvbjogJ3N0YXJ0LWxvYWRpbmcnIH0pKSxcbiAgICAgIG1lcmdlTWFwKCgpID0+IGhvb2tzLmxvYWRJbWFnZShhdHRyaWJ1dGVzKSksXG4gICAgICB0YXAoKCkgPT4gYXR0cmlidXRlcy5vblN0YXRlQ2hhbmdlLmVtaXQoeyByZWFzb246ICdtb3VudC1pbWFnZScgfSkpLFxuICAgICAgdGFwKChpbWFnZVBhdGgpID0+IGhvb2tzLnNldExvYWRlZEltYWdlKGltYWdlUGF0aCwgYXR0cmlidXRlcykpLFxuICAgICAgdGFwKCgpID0+IGF0dHJpYnV0ZXMub25TdGF0ZUNoYW5nZS5lbWl0KHsgcmVhc29uOiAnbG9hZGluZy1zdWNjZWVkZWQnIH0pKSxcbiAgICAgIG1hcCgoKSA9PiB0cnVlKSxcbiAgICAgIGNhdGNoRXJyb3IoKGVycm9yKSA9PiB7XG4gICAgICAgIGF0dHJpYnV0ZXMub25TdGF0ZUNoYW5nZS5lbWl0KHsgcmVhc29uOiAnbG9hZGluZy1mYWlsZWQnLCBkYXRhOiBlcnJvciB9KTtcbiAgICAgICAgaG9va3Muc2V0RXJyb3JJbWFnZShlcnJvciwgYXR0cmlidXRlcyk7XG4gICAgICAgIHJldHVybiBvZihmYWxzZSk7XG4gICAgICB9KSxcbiAgICAgIHRhcCgoKSA9PiB7XG4gICAgICAgIGF0dHJpYnV0ZXMub25TdGF0ZUNoYW5nZS5lbWl0KHsgcmVhc29uOiAnZmluYWxseScgfSk7XG4gICAgICAgIGhvb2tzLmZpbmFsbHkoYXR0cmlidXRlcyk7XG4gICAgICB9KVxuICAgICkgYXMgT2JzZXJ2YWJsZTxib29sZWFuPjtcbiAgfTtcbn1cbiJdfQ==