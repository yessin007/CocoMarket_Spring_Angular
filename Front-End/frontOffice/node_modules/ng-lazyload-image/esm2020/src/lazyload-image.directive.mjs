import { Directive, EventEmitter, Inject, Input, Output, PLATFORM_ID } from '@angular/core';
import { never, ReplaySubject } from 'rxjs';
import { switchMap, take, tap } from 'rxjs/operators';
import { lazyLoadImage } from './lazyload-image';
import { LAZYLOAD_IMAGE_HOOKS } from './token';
import * as i0 from "@angular/core";
import * as i1 from "./types";
export class LazyLoadImageDirective {
    constructor(el, ngZone, platformId, hooks) {
        this.onStateChange = new EventEmitter(); // Emits an event on every state change
        this.elementRef = el;
        this.ngZone = ngZone;
        this.propertyChanges$ = new ReplaySubject();
        this.hooks = hooks;
        this.hooks.setPlatformId(platformId);
        this.uid = Math.random().toString(36).substr(2, 9);
    }
    ngOnChanges() {
        if (this.debug === true && !this.debugSubscription) {
            this.debugSubscription = this.onStateChange.subscribe((e) => console.log(e));
        }
        this.propertyChanges$.next({
            element: this.elementRef.nativeElement,
            imagePath: this.lazyImage,
            defaultImagePath: this.defaultImage,
            errorImagePath: this.errorImage,
            useSrcset: this.useSrcset,
            offset: this.offset ? this.offset | 0 : 0,
            scrollContainer: this.scrollTarget,
            customObservable: this.customObservable,
            decode: this.decode,
            onStateChange: this.onStateChange,
            id: this.uid,
        });
    }
    ngAfterContentInit() {
        if (this.hooks.isDisabled()) {
            return null;
        }
        this.ngZone.runOutsideAngular(() => {
            this.loadSubscription = this.propertyChanges$
                .pipe(tap((attributes) => this.hooks.onAttributeChange(attributes)), tap((attributes) => attributes.onStateChange.emit({ reason: 'setup' })), tap((attributes) => this.hooks.setup(attributes)), switchMap((attributes) => {
                if (!attributes.imagePath) {
                    return never();
                }
                return this.hooks.getObservable(attributes).pipe(lazyLoadImage(this.hooks, attributes));
            }))
                .subscribe({
                next: () => null,
            });
        });
    }
    ngOnDestroy() {
        this.propertyChanges$
            .pipe(take(1))
            .subscribe({ next: (attributes) => this.hooks.onDestroy(attributes) })
            .unsubscribe();
        this.loadSubscription?.unsubscribe();
        this.debugSubscription?.unsubscribe();
    }
}
LazyLoadImageDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: LazyLoadImageDirective, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }, { token: PLATFORM_ID }, { token: LAZYLOAD_IMAGE_HOOKS }], target: i0.ɵɵFactoryTarget.Directive });
LazyLoadImageDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.1", type: LazyLoadImageDirective, selector: "[lazyLoad]", inputs: { lazyImage: ["lazyLoad", "lazyImage"], defaultImage: "defaultImage", errorImage: "errorImage", scrollTarget: "scrollTarget", customObservable: "customObservable", offset: "offset", useSrcset: "useSrcset", decode: "decode", debug: "debug" }, outputs: { onStateChange: "onStateChange" }, usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: LazyLoadImageDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[lazyLoad]',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }, { type: Object, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }, { type: i1.Hooks, decorators: [{
                    type: Inject,
                    args: [LAZYLOAD_IMAGE_HOOKS]
                }] }]; }, propDecorators: { lazyImage: [{
                type: Input,
                args: ['lazyLoad']
            }], defaultImage: [{
                type: Input
            }], errorImage: [{
                type: Input
            }], scrollTarget: [{
                type: Input
            }], customObservable: [{
                type: Input
            }], offset: [{
                type: Input
            }], useSrcset: [{
                type: Input
            }], decode: [{
                type: Input
            }], debug: [{
                type: Input
            }], onStateChange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,