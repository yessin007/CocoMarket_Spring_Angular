import { empty, Observable, of } from 'rxjs';
import { sampleTime, share, startWith } from 'rxjs/operators';
import { SharedHooks } from '../shared-hooks/hooks';
import { Rect } from './rect';
export class ScrollHooks extends SharedHooks {
    constructor() {
        super(...arguments);
        this.getWindow = () => window;
        this.scrollListeners = new WeakMap();
        // Only create one scroll listener per target and share the observable.
        // Typical, there will only be one observable per application
        this.getScrollListener = (scrollTarget) => {
            if (!scrollTarget || typeof scrollTarget.addEventListener !== 'function') {
                console.warn('`addEventListener` on ' + scrollTarget + ' (scrollTarget) is not a function. Skipping this target');
                return empty();
            }
            const scrollListener = this.scrollListeners.get(scrollTarget);
            if (scrollListener) {
                return scrollListener;
            }
            const srollEvent = Observable.create((observer) => {
                const eventName = 'scroll';
                const handler = (event) => observer.next(event);
                const options = { passive: true, capture: false };
                scrollTarget.addEventListener(eventName, handler, options);
                return () => scrollTarget.removeEventListener(eventName, handler, options);
            });
            const listener = this.sampleObservable(srollEvent);
            this.scrollListeners.set(scrollTarget, listener);
            return listener;
        };
    }
    getObservable(attributes) {
        if (this.skipLazyLoading(attributes)) {
            return of('load');
        }
        else if (attributes.customObservable) {
            return attributes.customObservable.pipe(startWith(''));
        }
        else if (attributes.scrollContainer) {
            return this.getScrollListener(attributes.scrollContainer);
        }
        return this.getScrollListener(this.getWindow());
    }
    isVisible(event, attributes) {
        const elementBounds = Rect.fromElement(attributes.element);
        if (elementBounds === Rect.empty) {
            return false;
        }
        const windowBounds = Rect.fromWindow(this.getWindow());
        elementBounds.inflate(attributes.offset);
        if (attributes.scrollContainer) {
            const scrollContainerBounds = Rect.fromElement(attributes.scrollContainer);
            const intersection = scrollContainerBounds.getIntersectionWith(windowBounds);
            return elementBounds.intersectsWith(intersection);
        }
        else {
            return elementBounds.intersectsWith(windowBounds);
        }
    }
    sampleObservable(obs, scheduler) {
        return obs.pipe(sampleTime(100, scheduler), share(), startWith(''));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaG9va3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvc2Nyb2xsLWhvb2tzL2hvb2tzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLEVBQUUsRUFBVyxNQUFNLE1BQU0sQ0FBQztBQUN0RCxPQUFPLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM5RCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFFcEQsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUU5QixNQUFNLE9BQU8sV0FBWSxTQUFRLFdBQTJCO0lBQTVEOztRQUNZLGNBQVMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUM7UUFDbEIsb0JBQWUsR0FBRyxJQUFJLE9BQU8sRUFBd0IsQ0FBQztRQWtDdkUsdUVBQXVFO1FBQ3ZFLDZEQUE2RDtRQUM3RCxzQkFBaUIsR0FBRyxDQUFDLFlBQW1DLEVBQTBCLEVBQUU7WUFDbEYsSUFBSSxDQUFDLFlBQVksSUFBSSxPQUFPLFlBQVksQ0FBQyxnQkFBZ0IsS0FBSyxVQUFVLEVBQUU7Z0JBQ3hFLE9BQU8sQ0FBQyxJQUFJLENBQUMsd0JBQXdCLEdBQUcsWUFBWSxHQUFHLHlEQUF5RCxDQUFDLENBQUM7Z0JBQ2xILE9BQU8sS0FBSyxFQUFFLENBQUM7YUFDaEI7WUFDRCxNQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUM5RCxJQUFJLGNBQWMsRUFBRTtnQkFDbEIsT0FBTyxjQUFjLENBQUM7YUFDdkI7WUFFRCxNQUFNLFVBQVUsR0FBc0IsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFFBQXdCLEVBQUUsRUFBRTtnQkFDbkYsTUFBTSxTQUFTLEdBQUcsUUFBUSxDQUFDO2dCQUMzQixNQUFNLE9BQU8sR0FBRyxDQUFDLEtBQVksRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDdkQsTUFBTSxPQUFPLEdBQUcsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsQ0FBQztnQkFDbEQsWUFBWSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7Z0JBQzNELE9BQU8sR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLG1CQUFtQixDQUFDLFNBQVMsRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7WUFDN0UsQ0FBQyxDQUFDLENBQUM7WUFFSCxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDbkQsSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1lBQ2pELE9BQU8sUUFBUSxDQUFDO1FBQ2xCLENBQUMsQ0FBQztJQUNKLENBQUM7SUF4REMsYUFBYSxDQUFDLFVBQXNDO1FBQ2xELElBQUksSUFBSSxDQUFDLGVBQWUsQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUNwQyxPQUFPLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUNuQjthQUFNLElBQUksVUFBVSxDQUFDLGdCQUFnQixFQUFFO1lBQ3RDLE9BQU8sVUFBVSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztTQUN4RDthQUFNLElBQUksVUFBVSxDQUFDLGVBQWUsRUFBRTtZQUNyQyxPQUFPLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxVQUFVLENBQUMsZUFBZSxDQUFDLENBQUM7U0FDM0Q7UUFDRCxPQUFPLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztJQUNsRCxDQUFDO0lBRUQsU0FBUyxDQUFDLEtBQXFCLEVBQUUsVUFBc0I7UUFDckQsTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDM0QsSUFBSSxhQUFhLEtBQUssSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNoQyxPQUFPLEtBQUssQ0FBQztTQUNkO1FBQ0QsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUN2RCxhQUFhLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV6QyxJQUFJLFVBQVUsQ0FBQyxlQUFlLEVBQUU7WUFDOUIsTUFBTSxxQkFBcUIsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxlQUFlLENBQUMsQ0FBQztZQUMzRSxNQUFNLFlBQVksR0FBRyxxQkFBcUIsQ0FBQyxtQkFBbUIsQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUM3RSxPQUFPLGFBQWEsQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDLENBQUM7U0FDbkQ7YUFBTTtZQUNMLE9BQU8sYUFBYSxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsQ0FBQztTQUNuRDtJQUNILENBQUM7SUFFRCxnQkFBZ0IsQ0FBSSxHQUFrQixFQUFFLFNBQWU7UUFDckQsT0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsU0FBUyxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUUsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUF1QixDQUFDO0lBQzVGLENBQUM7Q0EwQkYiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBlbXB0eSwgT2JzZXJ2YWJsZSwgb2YsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHNhbXBsZVRpbWUsIHNoYXJlLCBzdGFydFdpdGggfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBTaGFyZWRIb29rcyB9IGZyb20gJy4uL3NoYXJlZC1ob29rcy9ob29rcyc7XG5pbXBvcnQgeyBBdHRyaWJ1dGVzIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgUmVjdCB9IGZyb20gJy4vcmVjdCc7XG5cbmV4cG9ydCBjbGFzcyBTY3JvbGxIb29rcyBleHRlbmRzIFNoYXJlZEhvb2tzPEV2ZW50IHwgc3RyaW5nPiB7XG4gIHByb3RlY3RlZCBnZXRXaW5kb3cgPSAoKSA9PiB3aW5kb3c7XG4gIHByaXZhdGUgcmVhZG9ubHkgc2Nyb2xsTGlzdGVuZXJzID0gbmV3IFdlYWtNYXA8YW55LCBPYnNlcnZhYmxlPGFueT4+KCk7XG5cbiAgZ2V0T2JzZXJ2YWJsZShhdHRyaWJ1dGVzOiBBdHRyaWJ1dGVzPEV2ZW50IHwgc3RyaW5nPik6IE9ic2VydmFibGU8RXZlbnQgfCBzdHJpbmc+IHtcbiAgICBpZiAodGhpcy5za2lwTGF6eUxvYWRpbmcoYXR0cmlidXRlcykpIHtcbiAgICAgIHJldHVybiBvZignbG9hZCcpO1xuICAgIH0gZWxzZSBpZiAoYXR0cmlidXRlcy5jdXN0b21PYnNlcnZhYmxlKSB7XG4gICAgICByZXR1cm4gYXR0cmlidXRlcy5jdXN0b21PYnNlcnZhYmxlLnBpcGUoc3RhcnRXaXRoKCcnKSk7XG4gICAgfSBlbHNlIGlmIChhdHRyaWJ1dGVzLnNjcm9sbENvbnRhaW5lcikge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0U2Nyb2xsTGlzdGVuZXIoYXR0cmlidXRlcy5zY3JvbGxDb250YWluZXIpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5nZXRTY3JvbGxMaXN0ZW5lcih0aGlzLmdldFdpbmRvdygpKTtcbiAgfVxuXG4gIGlzVmlzaWJsZShldmVudDogRXZlbnQgfCBzdHJpbmcsIGF0dHJpYnV0ZXM6IEF0dHJpYnV0ZXMpOiBib29sZWFuIHtcbiAgICBjb25zdCBlbGVtZW50Qm91bmRzID0gUmVjdC5mcm9tRWxlbWVudChhdHRyaWJ1dGVzLmVsZW1lbnQpO1xuICAgIGlmIChlbGVtZW50Qm91bmRzID09PSBSZWN0LmVtcHR5KSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IHdpbmRvd0JvdW5kcyA9IFJlY3QuZnJvbVdpbmRvdyh0aGlzLmdldFdpbmRvdygpKTtcbiAgICBlbGVtZW50Qm91bmRzLmluZmxhdGUoYXR0cmlidXRlcy5vZmZzZXQpO1xuXG4gICAgaWYgKGF0dHJpYnV0ZXMuc2Nyb2xsQ29udGFpbmVyKSB7XG4gICAgICBjb25zdCBzY3JvbGxDb250YWluZXJCb3VuZHMgPSBSZWN0LmZyb21FbGVtZW50KGF0dHJpYnV0ZXMuc2Nyb2xsQ29udGFpbmVyKTtcbiAgICAgIGNvbnN0IGludGVyc2VjdGlvbiA9IHNjcm9sbENvbnRhaW5lckJvdW5kcy5nZXRJbnRlcnNlY3Rpb25XaXRoKHdpbmRvd0JvdW5kcyk7XG4gICAgICByZXR1cm4gZWxlbWVudEJvdW5kcy5pbnRlcnNlY3RzV2l0aChpbnRlcnNlY3Rpb24pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZWxlbWVudEJvdW5kcy5pbnRlcnNlY3RzV2l0aCh3aW5kb3dCb3VuZHMpO1xuICAgIH1cbiAgfVxuXG4gIHNhbXBsZU9ic2VydmFibGU8VD4ob2JzOiBPYnNlcnZhYmxlPFQ+LCBzY2hlZHVsZXI/OiBhbnkpOiBPYnNlcnZhYmxlPFQgfCAnJz4ge1xuICAgIHJldHVybiBvYnMucGlwZShzYW1wbGVUaW1lKDEwMCwgc2NoZWR1bGVyKSwgc2hhcmUoKSwgc3RhcnRXaXRoKCcnKSkgYXMgT2JzZXJ2YWJsZTxUIHwgJyc+O1xuICB9XG5cbiAgLy8gT25seSBjcmVhdGUgb25lIHNjcm9sbCBsaXN0ZW5lciBwZXIgdGFyZ2V0IGFuZCBzaGFyZSB0aGUgb2JzZXJ2YWJsZS5cbiAgLy8gVHlwaWNhbCwgdGhlcmUgd2lsbCBvbmx5IGJlIG9uZSBvYnNlcnZhYmxlIHBlciBhcHBsaWNhdGlvblxuICBnZXRTY3JvbGxMaXN0ZW5lciA9IChzY3JvbGxUYXJnZXQ/OiBIVE1MRWxlbWVudCB8IFdpbmRvdyk6IE9ic2VydmFibGU8RXZlbnQgfCAnJz4gPT4ge1xuICAgIGlmICghc2Nyb2xsVGFyZ2V0IHx8IHR5cGVvZiBzY3JvbGxUYXJnZXQuYWRkRXZlbnRMaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgY29uc29sZS53YXJuKCdgYWRkRXZlbnRMaXN0ZW5lcmAgb24gJyArIHNjcm9sbFRhcmdldCArICcgKHNjcm9sbFRhcmdldCkgaXMgbm90IGEgZnVuY3Rpb24uIFNraXBwaW5nIHRoaXMgdGFyZ2V0Jyk7XG4gICAgICByZXR1cm4gZW1wdHkoKTtcbiAgICB9XG4gICAgY29uc3Qgc2Nyb2xsTGlzdGVuZXIgPSB0aGlzLnNjcm9sbExpc3RlbmVycy5nZXQoc2Nyb2xsVGFyZ2V0KTtcbiAgICBpZiAoc2Nyb2xsTGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBzY3JvbGxMaXN0ZW5lcjtcbiAgICB9XG5cbiAgICBjb25zdCBzcm9sbEV2ZW50OiBPYnNlcnZhYmxlPEV2ZW50PiA9IE9ic2VydmFibGUuY3JlYXRlKChvYnNlcnZlcjogU3ViamVjdDxFdmVudD4pID0+IHtcbiAgICAgIGNvbnN0IGV2ZW50TmFtZSA9ICdzY3JvbGwnO1xuICAgICAgY29uc3QgaGFuZGxlciA9IChldmVudDogRXZlbnQpID0+IG9ic2VydmVyLm5leHQoZXZlbnQpO1xuICAgICAgY29uc3Qgb3B0aW9ucyA9IHsgcGFzc2l2ZTogdHJ1ZSwgY2FwdHVyZTogZmFsc2UgfTtcbiAgICAgIHNjcm9sbFRhcmdldC5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgaGFuZGxlciwgb3B0aW9ucyk7XG4gICAgICByZXR1cm4gKCkgPT4gc2Nyb2xsVGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBoYW5kbGVyLCBvcHRpb25zKTtcbiAgICB9KTtcblxuICAgIGNvbnN0IGxpc3RlbmVyID0gdGhpcy5zYW1wbGVPYnNlcnZhYmxlKHNyb2xsRXZlbnQpO1xuICAgIHRoaXMuc2Nyb2xsTGlzdGVuZXJzLnNldChzY3JvbGxUYXJnZXQsIGxpc3RlbmVyKTtcbiAgICByZXR1cm4gbGlzdGVuZXI7XG4gIH07XG59XG4iXX0=