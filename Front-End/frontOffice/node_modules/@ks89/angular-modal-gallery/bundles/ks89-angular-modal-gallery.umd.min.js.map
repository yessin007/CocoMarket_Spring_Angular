{"version":3,"sources":["node_modules/tslib/tslib.es6.js","ng://@ks89/angular-modal-gallery/lib/directives/click-outside.directive.ts","ng://@ks89/angular-modal-gallery/lib/directives/size.directive.ts","ng://@ks89/angular-modal-gallery/lib/directives/keyboard-navigation.directive.ts","ng://@ks89/angular-modal-gallery/lib/directives/wrap.directive.ts","ng://@ks89/angular-modal-gallery/lib/directives/direction.directive.ts","ng://@ks89/angular-modal-gallery/lib/directives/a-tag-bg-image.directive.ts","ng://@ks89/angular-modal-gallery/lib/directives/description.directive.ts","ng://@ks89/angular-modal-gallery/lib/directives/margin.directive.ts","ng://@ks89/angular-modal-gallery/lib/directives/max-size.directive.ts","ng://@ks89/angular-modal-gallery/lib/directives/directives.ts","ng://@ks89/angular-modal-gallery/lib/components/background/background.component.ts","ng://@ks89/angular-modal-gallery/lib/model/image.class.ts","ng://@ks89/angular-modal-gallery/lib/model/action.enum.ts","ng://@ks89/angular-modal-gallery/lib/services/keyboard.service.ts","ng://@ks89/angular-modal-gallery/lib/services/gallery.service.ts","ng://@ks89/angular-modal-gallery/lib/utils/user-input.util.ts","ng://@ks89/angular-modal-gallery/lib/components/accessible.component.ts","ng://@ks89/angular-modal-gallery/lib/model/description.interface.ts","ng://@ks89/angular-modal-gallery/lib/model/keyboard.enum.ts","ng://@ks89/angular-modal-gallery/lib/model/loading-config.interface.ts","ng://@ks89/angular-modal-gallery/lib/utils/image.util.ts","ng://@ks89/angular-modal-gallery/lib/components/current-image/current-image.component.ts","ng://@ks89/angular-modal-gallery/lib/model/plain-gallery-config.interface.ts","ng://@ks89/angular-modal-gallery/lib/components/accessibility-default.ts","ng://@ks89/angular-modal-gallery/lib/services/id-validator.service.ts","ng://@ks89/angular-modal-gallery/lib/components/modal-gallery/modal-gallery.component.ts","ng://@ks89/angular-modal-gallery/lib/components/carousel/carousel.component.ts","ng://@ks89/angular-modal-gallery/lib/components/carousel/carousel-previews/carousel-previews.component.ts","ng://@ks89/angular-modal-gallery/lib/model/buttons-config.interface.ts","ng://@ks89/angular-modal-gallery/lib/components/upper-buttons/upper-buttons.component.ts","ng://@ks89/angular-modal-gallery/lib/components/upper-buttons/upper-buttons-default.ts","ng://@ks89/angular-modal-gallery/lib/components/dots/dots.component.ts","ng://@ks89/angular-modal-gallery/lib/components/previews/previews.component.ts","ng://@ks89/angular-modal-gallery/lib/components/current-image/loading-spinner/loading-spinner.component.ts","ng://@ks89/angular-modal-gallery/lib/components/plain-gallery/plain-gallery.component.ts","ng://@ks89/angular-modal-gallery/lib/components/components.ts","ng://@ks89/angular-modal-gallery/lib/modal-gallery.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__read","o","n","m","Symbol","iterator","r","e","i","call","ar","next","done","push","value","error","__spread","arguments","length","concat","ClickOutsideDirective","onClick","event","stopPropagation","targetElement","target","clickOutsideEnable","isInside","isHidden","className","startsWith","includes","clickOutside","emit","Directive","args","selector","Input","Output","HostListener","EventEmitter","SizeDirective","ngOnInit","applyStyle","ngOnChanges","sizeConfig","renderer","setStyle","el","nativeElement","width","height","Renderer2","ElementRef","KeyboardNavigationDirective","onKeyDown","isOpen","keyPress","keyCode","WrapDirective","wrap","DirectionDirective","direction","justify","ATagBgImageDirective","image","plain","modal","imgPath","img","style","DescriptionDirective","description","bgColor","textColor","position","top","bottom","left","right","marginTop","marginBottom","marginLeft","marginRight","MarginDirective","MaxSizeDirective","maxWidth","maxHeight","DIRECTIVES","BackgroundComponent","Component","template","changeDetection","ChangeDetectionStrategy","OnPush","id","action","result","tslib_1.__extends","ImageEvent","ImageModalEvent","_super","NORMAL","CLICK","KEYBOARD","SWIPE","LOAD","AUTOPLAY","KEYBOARD_CONFIGURATION","InjectionToken","KeyboardService","add","onBind","config","disableSsrWorkaround","window","mousetrap","bind","shortcuts","combo","preventDefault","returnValue","reset","Injectable","Inject","require","GalleryService","openGallery","galleryId","index","undefined","Error","navigate","navigateGallery","closeGallery","close","updateGallery","update","play","autoPlay","stop","providedIn","ENTER_CODE","SPACE_CODE","PREV","DIRECTION_RIGHT","AccessibleComponent","handleNavigationEvent","KeyboardEvent","handleKeyboardNavigationEvent","MouseEvent","handleMouseNavigationEvent","handleImageEvent","handleImageKeyboardEvent","handleImageMouseEvent","key","code","button","ALWAYS_HIDDEN","ALWAYS_VISIBLE","HIDE_IF_EMPTY","ESC","LEFT_ARROW","RIGHT_ARROW","UP_ARROW","DOWN_ARROW","STANDARD","CIRCULAR","BARS","DOTS","CUBE_FLIPPING","CIRCLES","EXPLOSING_SQUARES","getIndex","arrayOfImages","findIndex","val","CurrentImageComponent","onMouseEnter","configSlide","playConfig","pauseOnHover","stopCarousel","onMouseLeave","playCarousel","defaultLoading","enable","type","LoadingType","defaultDescription","strategy","DescriptionStrategy","imageText","numberSeparator","beforeTextDescription","defaultCurrentImageConfig","navigateOnClick","loadingConfig","downloadable","invertSwipe","configCurrentImage","assign","currentImageConfig","slideConfig","changes","images","currentImage","previousValue","currentValue","updateIndexes","ngAfterContentInit","_this","isPlatformBrowser","_platformId","_ngZone","runOutsideAngular","start$","pipe","map","interval","filter","switchMap","timer","takeUntil","stop$","subscribe","run","isLastImage","nextImage","Action","ref","markForCheck","onKeyPress","esc","keyboardConfig","Keyboard","prevImage","getDescriptionToDisplay","imageWithoutDescription","buildTextDescription","getAltDescriptionByImage","getTitleToDisplay","getLeftPreviewImage","currentIndex","infinite","handleBoundaries","Math","max","getRightPreviewImage","min","onImageEvent","onNavigationEvent","disable","isPreventSliding","getPrevImage","loading","previouslyLoaded","changeImage","getNextImage","onImageLoad","loadImageData","status","loadImage","swipe","SWIPE_ACTION","RIGHT","LEFT","getIndexToDelete","ngOnDestroy","isFirstImage","boundaryIndex","newIndex","customFullDescription","prevDescription","middleDescription","currImgDescription","err","console","PLATFORM_ID","NgZone","ChangeDetectorRef","Subject","normalAction","clickAction","keyboardAction","UP","DOWN","size","breakConfig","LineLayout","AdvancedLayout","modalOpenerByIndex","hideDefaultPlainGallery","ROW","COLUMN","GRID","CUSTOM","KS_DEFAULT_ACCESSIBILITY_CONFIG","backgroundAriaLabel","backgroundTitle","plainGalleryContentAriaLabel","plainGalleryContentTitle","modalGalleryContentAriaLabel","modalGalleryContentTitle","loadingSpinnerAriaLabel","loadingSpinnerTitle","mainContainerAriaLabel","mainContainerTitle","mainPrevImageAriaLabel","mainPrevImageTitle","mainNextImageAriaLabel","mainNextImageTitle","dotsContainerAriaLabel","dotsContainerTitle","dotAriaLabel","previewsContainerAriaLabel","previewsContainerTitle","previewScrollPrevAriaLabel","previewScrollPrevTitle","previewScrollNextAriaLabel","previewScrollNextTitle","carouselContainerAriaLabel","carouselContainerTitle","carouselPrevImageAriaLabel","carouselPrevImageTitle","carouselNextImageAriaLabel","carouselNextImageTitle","carouselPreviewsContainerAriaLabel","carouselPreviewsContainerTitle","carouselPreviewScrollPrevAriaLabel","carouselPreviewScrollPrevTitle","carouselPreviewScrollNextAriaLabel","carouselPreviewScrollNextTitle","IdValidatorService","checkAndAdd","Number","isInteger","ids","get","set","remove","delete","Map","ModalGalleryComponent","onPopState","imagesChange","modalImages","plainGalleryConfigChange","plainGalleryConfig","firstChange","initImages","currPlainGalleryConfigChange","layout","showModalGallery","idValidatorService","sidePreviews","show","galleryServiceNavigateSubscription","galleryService","payload","galleryServiceCloseSubscription","galleryServiceUpdateSubscription","changeDetectorRef","galleryServiceAutoPlaySubscription","onCustomEmit","eventToEmit","getButtonEventToEmit","buttonBeforeHook","buttonAfterHook","onFullScreen","doc","docEl","document","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","exitFullscreen","msExitFullscreen","mozCancelFullScreen","webkitExitFullscreen","requestFullscreen","webkitRequestFullscreen","mozRequestFullScreen","msRequestFullscreen","onDelete","currentImageComponent","onNavigate","platformId","extUrl","extUrlInNewTab","open","opener","location","href","onDownload","downloadImage","onCloseGallery","isCalledByService","opened","keyboardService","body","overflow","onShowModalGallery","onChangeCurrentImage","emitBoundaryEvent","isPlainGalleryVisible","onClickOutside","enableCloseOutside","onClickDot","onClickPreview","isIEorEdge","downloadImageOnlyIEorEdge","downloadImageAllBrowsers","unsubscribe","link","createElement","setAttribute","getFileName","appendChild","click","removeChild","req_1","XMLHttpRequest","responseType","onload","blob","Blob","response","navigator","msSaveBlob","send","downloadFileName","replace","hasData","showGallery","indexToCheck","firstImage","lastImage","msSaveOrOpenBlob","isPlatformServer","exportAs","decorators","ViewChild","accessibilityConfig","arrow","CarouselComponent","configPlay","onKeyDownLeft","configCarousel","keyboardEnable","onKeyDownLRight","configDotsChange","dotsConfig","configDots","carouselConfigChange","carouselConfig","playConfigChange","playConfigChangePrev","playConfigChangeCurr","isFirstChange","configCurrentImageCarousel","carouselImageConfig","visible","showArrows","objectFit","modalGalleryEnable","legacyIE11Mode","manageSlideConfig","sanitizeUrlBgStyle","unsafeStyle","sanitizer","bypassSecurityTrustStyle","changeCurrentImage","onClickCurrentImage","trackById","item","imageFound","DomSanitizer","HostBinding","ariaLabel","plainGalleryHidden","PlainGalleryStrategy","CarouselPreviewsComponent","updateHeight","configBreakpointHeight","newConfigPreview","configPreview","previewConfig","heightNum","defaultMaxHeight","defaultPreviewConfig","number","arrows","clickable","breakpoints","xSmall","small","medium","large","xLarge","hostMaxWidth","initPreviews","isXsmallScreen","breakpointObserver","isMatched","Breakpoints","XSmall","isSmallScreen","Small","isMediumScreen","Medium","isLargeScreen","Large","isxLargeScreen","XLarge","isActive","preview","simpleChange","prev","current","prevIndex","calc","floor","end","start","setBeginningIndexesPreviews","previews","setEndIndexesPreviews","previous","clickedImageIndex","indexOf","clickPreview","getAriaLabel","getTitle","title","getAlt","alt","getIE11LegacyBgSize","breakpointSubscription","BreakpointObserver","observe","DEFAULT","SIMPLE","ADVANCED","FULL","DELETE","EXTURL","DOWNLOAD","CLOSE","FULLSCREEN","WHITELIST_BUTTON_TYPES","ButtonType","KS_DEFAULT_SIZE","KS_DEFAULT_BTN_CLOSE","KS_DEFAULT_BTN_DOWNLOAD","KS_DEFAULT_BTN_EXTURL","KS_DEFAULT_BTN_DELETE","KS_DEFAULT_BTN_FULL_SCREEN","UpperButtonsComponent","defaultConfig","ButtonsStrategy","configButtons","buttonsConfig","buttons","addButtonIds","simpleButtonsDefault","advancedButtonsDefault","fullButtonsDefault","validateCustomButtons","defaultButtonsDefault","onEvent","dataToEmit","triggerOnMouseAndKeyboard","download","customEmit","fullscreen","emitter","forEach","apply","refresh","DotsComponent","dotsConfigChanges","imageIndex","onDotEvent","clickDot","PreviewsComponent","updatePreviews","setIndexesPreviews","defaultPreviewSize","LoadingSpinnerComponent","loadingStandard","loadingBars","loadingCircular","loadingDots","loadingCubeFlipping","loadingCircles","loadingExplosingSquares","PlainGalleryComponent","configChange","configPlainGallery","initPlainGalleryConfig","initImageGrid","showModalGalleryByImage","getAltPlainDescriptionByImage","getTitleDisplay","defaultPlainConfig","GridLayout","imageGrid","layout_1","row","directionStyle","wrapStyle","justifyStyle","count","ceil","start_1","end_1","j","pixels","widthStyle","defaultSize","defaultLayout","advanced","aTags","additionalBackground","COMPONENTS","HammerGestureConfig","KsHammerGestureConfig","buildHammer","element","Hammer","touchAction","GalleryModule","forRoot","ngModule","providers","provide","useValue","useFactory","setupKeyboardService","deps","NgModule","imports","CommonModule","declarations","exports","HAMMER_GESTURE_CONFIG","useClass","injector"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/*\n The MIT License (MIT)\n\n Copyright (c) 2017-2018 Stefano Cappa (Ks89)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NON INFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n */\n\nimport { Directive, EventEmitter, HostListener, Input, Output } from '@angular/core';\n\n/**\n * Directive to close the modal gallery clicking on the semi-transparent background.\n * In fact, it listens for a click on all elements that aren't 'inside' and it emits\n * an event using `@Output clickOutside`.\n */\n@Directive({\n  selector: '[ksClickOutside]'\n})\nexport class ClickOutsideDirective {\n  /**\n   * Boolean to enable this directive.\n   */\n  @Input()\n  clickOutsideEnable: boolean;\n  /**\n   * Output to emit an event if the clicked element class doesn't contain 'inside' or it is 'hidden'. The payload is a boolean.\n   */\n  @Output()\n  clickOutside: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /**\n   * Method called by Angular itself every click thanks to `@HostListener`.\n   * @param MouseEvent event payload received evey click\n   */\n  @HostListener('click', ['$event'])\n  onClick(event: MouseEvent) {\n    event.stopPropagation();\n\n    const targetElement: any = event.target;\n\n    if (!this.clickOutsideEnable || !targetElement) {\n      return;\n    }\n\n    let isInside = false;\n    let isHidden = false;\n\n    if (typeof targetElement.className !== 'string') {\n      // it happens with @fortawesome/fontawesome 5\n      // for some reasons className is an object with 2 empty properties inside\n      isInside = true;\n    } else {\n      // in normal scenarios, use classname, because it's a simple string\n      isInside = targetElement.className && targetElement.className.startsWith('inside');\n      isHidden = targetElement.className.includes('hidden');\n    }\n\n    // if inside => don't close modal gallery\n    // if hidden => close modal gallery\n    /*\n        i i' h | close\n        0 1  0 |   1 => close modal gallery\n        0 1  1 |   1 => close modal gallery\n        1 0  0 |   0\n        1 0  1 |   1 => close modal gallery\n     */\n    if (!isInside || isHidden) {\n      // close modal gallery\n      this.clickOutside.emit(true);\n    }\n  }\n}\n","/*\n The MIT License (MIT)\n\n Copyright (c) 2017-2018 Stefano Cappa (Ks89)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NON INFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n */\n\nimport { Directive, ElementRef, Input, OnChanges, OnInit, Renderer2 } from '@angular/core';\nimport { Size } from '../model/size.interface';\n\n/**\n * Directive to change the size of an element.\n */\n@Directive({\n  selector: '[ksSize]'\n})\nexport class SizeDirective implements OnInit, OnChanges {\n  /**\n   * Object of type `Size` to resize the element.\n   */\n  @Input()\n  sizeConfig: Size;\n\n  constructor(private renderer: Renderer2, private el: ElementRef) {}\n\n  /**\n   * Method Â´ngOnInitÂ´ to apply the style of this directive.\n   * This is an Angular's lifecycle hook, so its called automatically by Angular itself.\n   * In particular, it's called only one time!!!\n   */\n  ngOnInit() {\n    this.applyStyle();\n  }\n\n  /**\n   * Method Â´ngOnChangesÂ´ to apply the style of this directive.\n   * This is an Angular's lifecycle hook, so its called automatically by Angular itself.\n   * In particular, it's called when any data-bound property of a directive changes!!!\n   */\n  ngOnChanges() {\n    this.applyStyle();\n  }\n\n  /**\n   * Private method to change both width and height of an element.\n   */\n  private applyStyle() {\n    if (!this.sizeConfig) {\n      return;\n    }\n    // apply [style.width]\n    this.renderer.setStyle(this.el.nativeElement, 'width', this.sizeConfig.width);\n    this.renderer.setStyle(this.el.nativeElement, 'height', this.sizeConfig.height);\n  }\n}\n","/*\n The MIT License (MIT)\n\n Copyright (c) 2017-2018 Stefano Cappa (Ks89)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NON INFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n */\n\nimport { Directive, EventEmitter, HostListener, Input, Output } from '@angular/core';\n\n@Directive({\n  selector: '[ksKeyboardNavigation]'\n})\nexport class KeyboardNavigationDirective {\n  @Input()\n  isOpen: boolean;\n\n  @Output()\n  keyPress: EventEmitter<number> = new EventEmitter<number>();\n\n  /**\n   * Listener to catch keyboard's events and call the right method based on the key.\n   * For instance, pressing esc, this will call `closeGallery(Action.KEYBOARD)` and so on.\n   * If you passed a valid `keyboardConfig` esc, right and left buttons will be customized based on your data.\n   * @param e KeyboardEvent caught by the listener.\n   */\n  @HostListener('window:keydown', ['$event'])\n  onKeyDown(e: KeyboardEvent) {\n    if (!this.isOpen) {\n      return;\n    }\n    this.keyPress.emit(e.keyCode);\n  }\n}\n","/*\n The MIT License (MIT)\n\n Copyright (c) 2017-2018 Stefano Cappa (Ks89)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NON INFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n */\n\nimport { Directive, ElementRef, Input, OnChanges, OnInit, Renderer2 } from '@angular/core';\n\n/**\n * Directive to change the flex-wrap css property of an element.\n */\n@Directive({\n  selector: '[ksWrap]'\n})\nexport class WrapDirective implements OnInit, OnChanges {\n  /**\n   * Boolean input that it's true to add 'flex-wrap: wrap', 'flex-wrap: nowrap' otherwise.\n   */\n  @Input()\n  wrap: boolean;\n  /**\n   * String input to force the width of the element to be able to see wrapping.\n   */\n  @Input()\n  width: string;\n\n  constructor(private renderer: Renderer2, private el: ElementRef) {}\n\n  /**\n   * Method Â´ngOnInitÂ´ to apply the style of this directive.\n   * This is an Angular's lifecycle hook, so its called automatically by Angular itself.\n   * In particular, it's called only one time!!!\n   */\n  ngOnInit() {\n    this.applyStyle();\n  }\n\n  /**\n   * Method Â´ngOnChangesÂ´ to apply the style of this directive.\n   * This is an Angular's lifecycle hook, so its called automatically by Angular itself.\n   * In particular, it's called when any data-bound property of a directive changes!!!\n   */\n  ngOnChanges() {\n    this.applyStyle();\n  }\n\n  /**\n   * Private method to change both widht and flex-wrap css properties.\n   */\n  private applyStyle() {\n    // TODO is this right???? If wrap os false I cannot apply width and flex-wrap\n    if (!this.wrap) {\n      return;\n    }\n    this.renderer.setStyle(this.el.nativeElement, 'width', this.width);\n    this.renderer.setStyle(this.el.nativeElement, 'flex-wrap', this.wrap ? 'wrap' : 'nowrap');\n  }\n}\n","/*\n The MIT License (MIT)\n\n Copyright (c) 2017-2018 Stefano Cappa (Ks89)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NON INFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n */\n\nimport { Directive, ElementRef, Input, OnChanges, OnInit, Renderer2 } from '@angular/core';\n\n/**\n * Directive to change the flex-direction of an element, based on two inputs (`direction` and `justify`).\n */\n@Directive({\n  selector: '[ksDirection]'\n})\nexport class DirectionDirective implements OnInit, OnChanges {\n  /**\n   * String input to set the css flex-direction of an element.\n   */\n  @Input()\n  direction: string;\n  /**\n   * String input to set the css justify-content of an element.\n   */\n  @Input()\n  justify: string;\n\n  constructor(private renderer: Renderer2, private el: ElementRef) {}\n\n  /**\n   * Method Â´ngOnInitÂ´ to apply the style of this directive.\n   * This is an Angular's lifecycle hook, so its called automatically by Angular itself.\n   * In particular, it's called only one time!!!\n   */\n  ngOnInit() {\n    this.applyStyle();\n  }\n\n  /**\n   * Method Â´ngOnChangesÂ´ to apply the style of this directive.\n   * This is an Angular's lifecycle hook, so its called automatically by Angular itself.\n   * In particular, it's called when any data-bound property of a directive changes!!!\n   */\n  ngOnChanges() {\n    this.applyStyle();\n  }\n\n  /**\n   * Private method to change both direction and justify of an element.\n   */\n  private applyStyle() {\n    if (!this.direction || !this.justify) {\n      return;\n    }\n    this.renderer.setStyle(this.el.nativeElement, 'flex-direction', this.direction);\n    this.renderer.setStyle(this.el.nativeElement, 'justify-content', this.justify);\n  }\n}\n","/*\n The MIT License (MIT)\n\n Copyright (c) 2017-2018 Stefano Cappa (Ks89)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NON INFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n */\n\nimport { Directive, ElementRef, Input, OnChanges, OnInit, Renderer2 } from '@angular/core';\n\nimport { Image } from '../model/image.class';\nimport { SafeResourceUrl } from '@angular/platform-browser';\n\n/**\n * Directive to add an image to an `<a>` tag with some additional custom properties.\n */\n@Directive({\n  selector: '[ksATagBgImage]'\n})\nexport class ATagBgImageDirective implements OnInit, OnChanges {\n  /**\n   * Object of type `Image` that represents the image to add to the `<a>` tag.\n   */\n  @Input()\n  image: Image;\n  /**\n   * Additional style to customize the background attribute.\n   * Empty string by default.\n   */\n  @Input()\n  style: string;\n\n  constructor(private renderer: Renderer2, private el: ElementRef) {}\n\n  /**\n   * Method Â´ngOnInitÂ´ to apply the style of this directive.\n   * This is an Angular's lifecycle hook, so its called automatically by Angular itself.\n   * In particular, it's called only one time!!!\n   */\n  ngOnInit() {\n    this.applyStyle();\n  }\n\n  /**\n   * Method Â´ngOnChangesÂ´ to apply the style of this directive.\n   * This is an Angular's lifecycle hook, so its called automatically by Angular itself.\n   * In particular, it's called when any data-bound property of a directive changes!!!\n   */\n  ngOnChanges() {\n    this.applyStyle();\n  }\n\n  /**\n   * Private method to add an image as background of an `<a>` tag.\n   */\n  private applyStyle() {\n    if (!this.image || (!this.image.plain && !this.image.modal)) {\n      return;\n    }\n\n    const imgPath: string | SafeResourceUrl = this.image.plain && this.image.plain.img ? this.image.plain.img : this.image.modal.img;\n    this.renderer.setStyle(this.el.nativeElement, 'background', `url(\"${imgPath}\") ${this.style}`);\n  }\n}\n","/*\n The MIT License (MIT)\n\n Copyright (c) 2017-2018 Stefano Cappa (Ks89)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NON INFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n */\n\nimport { Directive, ElementRef, Input, OnChanges, OnInit, Renderer2 } from '@angular/core';\nimport { Description } from '../model/description.interface';\n\n/**\n * Directive to customize the description.\n */\n@Directive({\n  selector: '[ksDescription]'\n})\nexport class DescriptionDirective implements OnInit, OnChanges {\n  /**\n   * Object of type `Description` to resize the element.\n   */\n  @Input()\n  description: Description;\n\n  constructor(private renderer: Renderer2, private el: ElementRef) {}\n\n  /**\n   * Method Â´ngOnInitÂ´ to apply the style of this directive.\n   * This is an Angular's lifecycle hook, so its called automatically by Angular itself.\n   * In particular, it's called only one time!!!\n   */\n  ngOnInit() {\n    this.applyStyle();\n  }\n\n  /**\n   * Method Â´ngOnChangesÂ´ to apply the style of this directive.\n   * This is an Angular's lifecycle hook, so its called automatically by Angular itself.\n   * In particular, it's called when any data-bound property of a directive changes!!!\n   */\n  ngOnChanges() {\n    this.applyStyle();\n  }\n\n  /**\n   * Private method to change description's style.\n   */\n  private applyStyle() {\n    if (!this.description) {\n      return;\n    }\n\n    if (this.description.style) {\n      this.renderer.setStyle(this.el.nativeElement, 'background', this.description.style.bgColor);\n      this.renderer.setStyle(this.el.nativeElement, 'color', this.description.style.textColor);\n\n      if (this.description.style.width) {\n        this.renderer.setStyle(this.el.nativeElement, 'width', this.description.style.width);\n      }\n      if (this.description.style.height) {\n        this.renderer.setStyle(this.el.nativeElement, 'height', this.description.style.height);\n      }\n      if (this.description.style.position) {\n        this.renderer.setStyle(this.el.nativeElement, 'position', this.description.style.position);\n      }\n      if (this.description.style.top) {\n        this.renderer.setStyle(this.el.nativeElement, 'top', this.description.style.top);\n      }\n      if (this.description.style.bottom) {\n        this.renderer.setStyle(this.el.nativeElement, 'bottom', this.description.style.bottom);\n      }\n      if (this.description.style.left) {\n        this.renderer.setStyle(this.el.nativeElement, 'left', this.description.style.left);\n      }\n      if (this.description.style.right) {\n        this.renderer.setStyle(this.el.nativeElement, 'right', this.description.style.right);\n      }\n\n      this.renderer.setStyle(this.el.nativeElement, 'margin-top', this.description.style.marginTop ? this.description.style.marginTop : '0px');\n      this.renderer.setStyle(this.el.nativeElement, 'margin-bottom', this.description.style.marginBottom ? this.description.style.marginBottom : '0px');\n      this.renderer.setStyle(this.el.nativeElement, 'margin-left', this.description.style.marginLeft ? this.description.style.marginLeft : '0px');\n      this.renderer.setStyle(this.el.nativeElement, 'margin-right', this.description.style.marginRight ? this.description.style.marginRight : '0px');\n    }\n  }\n}\n","/*\n The MIT License (MIT)\n\n Copyright (c) 2017-2018 Stefano Cappa (Ks89)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NON INFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n */\n\nimport { Directive, ElementRef, Input, OnChanges, OnInit, Renderer2 } from '@angular/core';\n\n/**\n * Directive to change margins of an element.\n */\n@Directive({\n  selector: '[ksMargin]'\n})\nexport class MarginDirective implements OnInit, OnChanges {\n  /**\n   * String to set the margin of an element.\n   */\n  @Input()\n  marginLeft: string;\n  /**\n   * String to set the margin of an element.\n   */\n  @Input()\n  marginRight: string;\n  /**\n   * String to set the margin of an element.\n   */\n  @Input()\n  marginTop: string;\n  /**\n   * String to set the margin of an element.\n   */\n  @Input()\n  marginBottom: string;\n\n  constructor(private renderer: Renderer2, private el: ElementRef) {}\n\n  /**\n   * Method Â´ngOnInitÂ´ to apply the style of this directive.\n   * This is an Angular's lifecycle hook, so its called automatically by Angular itself.\n   * In particular, it's called only one time!!!\n   */\n  ngOnInit() {\n    this.applyStyle();\n  }\n\n  /**\n   * Method Â´ngOnChangesÂ´ to apply the style of this directive.\n   * This is an Angular's lifecycle hook, so its called automatically by Angular itself.\n   * In particular, it's called when any data-bound property of a directive changes!!!\n   */\n  ngOnChanges() {\n    this.applyStyle();\n  }\n\n  /**\n   * Private method to change both width and height of an element.\n   */\n  private applyStyle() {\n    if (this.marginLeft) {\n      this.renderer.setStyle(this.el.nativeElement, 'margin-left', this.marginLeft);\n    }\n    if (this.marginRight) {\n      this.renderer.setStyle(this.el.nativeElement, 'margin-right', this.marginRight);\n    }\n    if (this.marginTop) {\n      this.renderer.setStyle(this.el.nativeElement, 'margin-top', this.marginTop);\n    }\n    if (this.marginBottom) {\n      this.renderer.setStyle(this.el.nativeElement, 'margin-bottom', this.marginBottom);\n    }\n  }\n}\n","/*\n The MIT License (MIT)\n\n Copyright (c) 2017-2018 Stefano Cappa (Ks89)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NON INFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n */\n\nimport { Directive, ElementRef, Input, OnChanges, OnInit, Renderer2 } from '@angular/core';\nimport { MaxSize } from '../model/max-size.interface';\n\n/**\n * Directive to change the max size of an element.\n */\n@Directive({\n  selector: '[ksMaxSize]'\n})\nexport class MaxSizeDirective implements OnInit, OnChanges {\n  /**\n   * Object of type `MaxSize` to resize the element.\n   */\n  @Input()\n  sizeConfig: MaxSize;\n\n  constructor(private renderer: Renderer2, private el: ElementRef) {}\n\n  /**\n   * Method Â´ngOnInitÂ´ to apply the style of this directive.\n   * This is an Angular's lifecycle hook, so its called automatically by Angular itself.\n   * In particular, it's called only one time!!!\n   */\n  ngOnInit() {\n    this.applyStyle();\n  }\n\n  /**\n   * Method Â´ngOnChangesÂ´ to apply the style of this directive.\n   * This is an Angular's lifecycle hook, so its called automatically by Angular itself.\n   * In particular, it's called when any data-bound property of a directive changes!!!\n   */\n  ngOnChanges() {\n    this.applyStyle();\n  }\n\n  /**\n   * Private method to change both max-width and max-height of an element.\n   */\n  private applyStyle() {\n    if (!this.sizeConfig) {\n      return;\n    }\n    if (this.sizeConfig.maxWidth) {\n      this.renderer.setStyle(this.el.nativeElement, 'max-width', this.sizeConfig.maxWidth);\n    }\n    if (this.sizeConfig.maxHeight) {\n      this.renderer.setStyle(this.el.nativeElement, 'max-height', this.sizeConfig.maxHeight);\n    }\n  }\n}\n","/*\n The MIT License (MIT)\n\n Copyright (c) 2017-2018 Stefano Cappa (Ks89)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NON INFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n */\n\nimport { ClickOutsideDirective } from './click-outside.directive';\nimport { SizeDirective } from './size.directive';\nimport { KeyboardNavigationDirective } from './keyboard-navigation.directive';\nimport { WrapDirective } from './wrap.directive';\nimport { DirectionDirective } from './direction.directive';\nimport { ATagBgImageDirective } from './a-tag-bg-image.directive';\nimport { DescriptionDirective } from './description.directive';\nimport { MarginDirective } from './margin.directive';\nimport { MaxSizeDirective } from './max-size.directive';\n\n/**\n * Array of all directives.\n */\nexport const DIRECTIVES = [\n  ClickOutsideDirective,\n  SizeDirective,\n  KeyboardNavigationDirective,\n  WrapDirective,\n  DirectionDirective,\n  ATagBgImageDirective,\n  DescriptionDirective,\n  MarginDirective,\n  MaxSizeDirective\n];\n","/*\n The MIT License (MIT)\n\n Copyright (c) 2017-2018 Stefano Cappa (Ks89)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NON INFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n */\n\nimport { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\nimport { AccessibilityConfig } from '../../model/accessibility.interface';\n\n/**\n * Component with the semi-transparent background.\n */\n@Component({\n  selector: 'ks-background',\n  styleUrls: ['background.scss'],\n  templateUrl: 'background.html',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BackgroundComponent {\n  /**\n   * Boolean that it is true if the modal gallery is visible,\n   * so also this component should be visible.\n   */\n  @Input()\n  isOpen: boolean;\n  /**\n   * Object of type `AccessibilityConfig` to init custom accessibility features.\n   * For instance, it contains titles, alt texts, aria-labels and so on.\n   */\n  @Input()\n  accessibilityConfig: AccessibilityConfig;\n}\n","/*\n The MIT License (MIT)\n\n Copyright (c) 2017-2018 Stefano Cappa (Ks89)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NON INFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n */\n\nimport { Action } from './action.enum';\nimport { Size } from './size.interface';\nimport { SafeResourceUrl } from '@angular/platform-browser';\n\n/**\n * Class `Image` that represents an image with both `modal` and `plain` configurations.\n * Both image `id` and `modal` are mandatory, instead `plain` is optional.\n */\nexport class Image {\n  id: number;\n\n  modal: ModalImage;\n  plain?: PlainImage;\n\n  constructor(id: number, modal: ModalImage, plain?: PlainImage) {\n    this.id = id;\n    this.modal = modal;\n    this.plain = plain;\n  }\n}\n\n/**\n * Interface `ImageData` to configure an image, but it isn't used directly.\n * Please, refers to `PlainImage` or `ModalImage`.\n */\nexport interface ImageData {\n  img: string | SafeResourceUrl;\n  description?: string;\n  title?: string;\n  alt?: string;\n  ariaLabel?: string;\n  angle?: number;\n}\n\n/**\n * Interface `ModalImage` to configure the modal image.\n */\nexport interface ModalImage extends ImageData {\n  extUrl?: string;\n  downloadFileName?: string;\n}\n\n/**\n * Interface `PlainImage` to configure the plain image.\n */\nexport interface PlainImage extends ImageData {\n  size?: Size;\n}\n\n/**\n * Class `ImageEvent` that represents the event payload with the result and the triggered action.\n */\nexport class ImageEvent {\n  action: Action;\n  result: number | boolean;\n\n  constructor(action: Action, result: number | boolean) {\n    this.action = action;\n    this.result = result;\n  }\n}\n\n/**\n * Class `ImageModalEvent` that represents the event payload with the result and the triggered action.\n */\nexport class ImageModalEvent extends ImageEvent {\n  constructor(action: Action, result: number | boolean) {\n    super(action, result);\n  }\n}\n","/*\n The MIT License (MIT)\n\n Copyright (c) 2017-2018 Stefano Cappa (Ks89)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NON INFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n */\n\n/**\n * Enum `Action` with a list of possible actions, based on the source of the action.\n */\nexport enum Action {\n  NORMAL, // default value\n  CLICK, // mouse click\n  KEYBOARD,\n  SWIPE,\n  LOAD,\n  AUTOPLAY\n}\n","/*\n The MIT License (MIT)\n\n Copyright (c) 2017-2018 Stefano Cappa (Ks89)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NON INFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n */\n\nimport { Inject, Injectable, InjectionToken } from '@angular/core';\n\nimport { KeyboardServiceConfig } from '../model/keyboard-service-config.interface';\n\nexport const KEYBOARD_CONFIGURATION = new InjectionToken<KeyboardServiceConfig>('KEYBOARD_CONFIGURATION');\n\n/**\n * Service to intercept ctrl+s (or cmd+s on macOS) using a third-party library, called Mousetrap.\n */\n@Injectable()\nexport class KeyboardService {\n  /**\n   * Private Mousetrap variable to store the instance.\n   */\n  private mousetrap: MousetrapInstance;\n  /**\n   * Private variable to store shortcuts as either Array or string.\n   */\n  private shortcuts: Array<string> | string;\n\n  /**\n   * Constructor of `KeyboardService` to init `mousetrap` and `shortcuts` private variables.\n   * @param KeyboardServiceConfig config object received by the `forRoot()` function to init custom shortcuts\n   */\n  constructor(@Inject(KEYBOARD_CONFIGURATION) private config: KeyboardServiceConfig) {\n    // this.config is always defined, because forced by forRoot inside the module\n    // when empty, it's simply an empty object: {}\n\n    this.shortcuts = this.config && this.config.shortcuts ? this.config.shortcuts : ['ctrl+s', 'meta+s'];\n\n    // temporary workaround to fix this issue: https://github.com/Ks89/angular-modal-gallery/issues/142\n    if (this.config && !this.config.disableSsrWorkaround) {\n      // To prevent issues with angular-universal on server-side\n      if (typeof window !== 'undefined') {\n        require('mousetrap');\n        this.mousetrap = new (<any>Mousetrap)();\n      }\n    }\n  }\n\n  /**\n   * Method to add a lister for ctrl+s/cmd+s keyboard events.\n   * @param (e: KeyboardEvent, combo: string) => any onBind callback function to add shortcuts\n   */\n  add(onBind: (e: KeyboardEvent, combo: string) => any) {\n    // temporary workaround to fix this issue: https://github.com/Ks89/angular-modal-gallery/issues/142\n    if (this.config && !this.config.disableSsrWorkaround) {\n      // To prevent issues with angular-universal on server-side\n      if (typeof window !== 'undefined') {\n        this.mousetrap.bind(this.shortcuts, (event: KeyboardEvent, combo: string) => {\n          if (event.preventDefault) {\n            event.preventDefault();\n          } else {\n            // internet explorer\n            event.returnValue = false;\n          }\n          onBind(event, combo);\n        });\n      }\n    }\n  }\n\n  /**\n   * Method to reset all listeners. Please, call this function when needed\n   * to free resources ad prevent leaks.\n   */\n  reset() {\n    // temporary workaround to fix this issue: https://github.com/Ks89/angular-modal-gallery/issues/142\n    if (this.config && !this.config.disableSsrWorkaround) {\n      // To prevent issues with angular-universal on server-side\n      if (typeof window !== 'undefined') {\n        this.mousetrap.reset();\n      }\n    }\n  }\n}\n","/*\n The MIT License (MIT)\n\n Copyright (c) 2017-2018 Stefano Cappa (Ks89)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NON INFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n */\n\nimport { EventEmitter, Injectable } from '@angular/core';\nimport { Image } from '../model/image.class';\n\nexport interface InternalGalleryPayload {\n  galleryId: number;\n  index?: number;\n  image?: Image;\n  result?: boolean;\n}\n\n/**\n * Service to call methods on a gallery by its galleryId.\n */\n@Injectable({ providedIn: 'root' })\nexport class GalleryService {\n  navigate: EventEmitter<InternalGalleryPayload> = new EventEmitter<InternalGalleryPayload>();\n  close: EventEmitter<number> = new EventEmitter<number>();\n  update: EventEmitter<InternalGalleryPayload> = new EventEmitter<InternalGalleryPayload>();\n  autoPlay: EventEmitter<InternalGalleryPayload> = new EventEmitter<InternalGalleryPayload>();\n\n  /**\n   * Method to open the modal gallery with the galleryId passed as parameter.\n   * It will automatically shows the image at position index.\n   * @param galleryId number or undefined that represents the unique id of the gallery.\n   * @param index number of the image that you want to open.\n   * @throws a error with a message if galleryId is either undefined, < 0 or index is < 0\n   */\n  openGallery(galleryId: number | undefined, index: number): void {\n    if (galleryId === undefined || galleryId < 0 || index < 0) {\n      throw new Error('Cannot open gallery via GalleryService with either index<0 or galleryId<0 or galleryId===undefined');\n    }\n    this.navigate.emit({\n      galleryId: galleryId,\n      index: index\n    });\n  }\n\n  /**\n   * Method to navigate to a specific index of the modal gallery with the galleryId passed as parameter.\n   * At the moment, it's like openGallery, but in upcoming releases it will change the behaviour.\n   * @param galleryId number or undefined that represents the unique id of the gallery.\n   * @param index number of the image that you want to open.\n   * @throws a error with a message if galleryId is either undefined, < 0 or index is < 0\n   */\n  navigateGallery(galleryId: number | undefined, index: number): void {\n    if (galleryId === undefined || galleryId < 0 || index < 0) {\n      throw new Error('Cannot navigate via GalleryService with either index<0 or galleryId<0 or galleryId===undefined');\n    }\n    this.navigate.emit({\n      galleryId: galleryId,\n      index: index\n    });\n  }\n\n  /**\n   * Method to close the modal gallery with the galleryId passed as parameter.\n   * @param galleryId number or undefined that represents the unique id of the gallery.\n   * @throws a error with a message if galleryId is either undefined or < 0\n   */\n  closeGallery(galleryId: number | undefined): void {\n    if (galleryId === undefined || galleryId < 0) {\n      throw new Error('Cannot close gallery via GalleryService with galleryId<0 or galleryId===undefined');\n    }\n    this.close.emit(galleryId);\n  }\n\n  /**\n   * Service to update an image with a new object\n   * @param galleryId number or undefined that represents the unique id of the gallery.\n   * @param index number of the image that you want to update.\n   * @throws a error with a message if galleryId is either undefined, < 0 or index is < 0\n   *\n   * @since 6.3.0\n   */\n  updateGallery(galleryId: number | undefined, index: number, image: Image): void {\n    if (galleryId === undefined || galleryId < 0 || index < 0) {\n      throw new Error('Cannot update gallery via GalleryService with either index<0 or galleryId<0 or galleryId===undefined');\n    }\n    if (!image) {\n      throw new Error('Cannot update gallery via GalleryService, because image is not valid');\n    }\n    this.update.emit({\n      galleryId: galleryId,\n      index: index,\n      image: image\n    });\n  }\n\n  /**\n   * Service to play modal-gallery\n   * @param galleryId number or undefined that represents the unique id of the gallery.\n   * @throws a error with a message if galleryId is either undefined or < 0\n   *\n   * @since 7.2.0\n   */\n  play(galleryId: number | undefined): void {\n    if (galleryId === undefined || galleryId < 0) {\n      throw new Error('Cannot play gallery via GalleryService with galleryId<0 or galleryId===undefined');\n    }\n    this.autoPlay.emit({\n      galleryId: galleryId,\n      result: true\n    });\n  }\n\n  /**\n   * Service to stop modal-gallery\n   * @param galleryId number or undefined that represents the unique id of the gallery.\n   * @throws a error with a message if galleryId is either undefined or < 0\n   *\n   * @since 7.2.0\n   */\n  stop(galleryId: number | undefined): void {\n    if (galleryId === undefined || galleryId < 0) {\n      throw new Error('Cannot stop gallery via GalleryService with galleryId<0 or galleryId===undefined');\n    }\n    this.autoPlay.emit({\n      galleryId: galleryId,\n      result: false\n    });\n  }\n}\n","/*\n The MIT License (MIT)\n\n Copyright (c) 2017-2018 Stefano Cappa (Ks89)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NON INFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n */\n\n/**\n * Key of the keyboard's key `enter`\n */\nexport const ENTER_KEY = 'Enter';\n/**\n * Code of the keyboard's key `enter`\n */\nexport const ENTER_CODE = 'Enter';\n\n/**\n * Key of the keyboard's key 'right arrow'\n */\nexport const RIGHT_ARROW_KEY = 'ArrowRight';\n/**\n * Code of the keyboard's key 'right arrow'\n */\nexport const RIGHT_ARROW_CODE = 'ArrowRight';\n/**\n * KeyCode of the keyboard's key 'right arrow'\n * Used in unit tests only\n */\nexport const RIGHT_ARROW_KEYCODE = 39;\n\n/**\n * Key of the keyboard's key 'left arrow'\n */\nexport const LEFT_ARROW_KEY = 'ArrowLeft';\n/**\n * Code of the keyboard's key 'left arrow'\n */\nexport const LEFT_ARROW_CODE = 'ArrowLeft';\n/**\n * KeyCode of the keyboard's key 'left arrow'\n * Used in unit tests only\n */\nexport const LEFT_ARROW_KEYCODE = 37;\n\n/**\n * Key of the keyboard's key `space`\n */\nexport const SPACE_KEY = '';\n/**\n * Code of the keyboard's key `space`\n */\nexport const SPACE_CODE = 'Space';\n/**\n * KeyCode of the keyboard's key 'space'\n * Used in unit tests only\n */\nexport const SPACE_KEYCODE = 32;\n\n/**\n * KeyCode of the main mouse button\n */\nexport const MOUSE_MAIN_BUTTON_CLICK = 0;\n\n/**\n * Const NEXT\n */\nexport const NEXT = 1;\n/**\n * Const PREV\n */\nexport const PREV = -1;\n/**\n * Const NOTHING to represents a situation when it isn't both NEXT and PREV\n */\nexport const NOTHING = 0;\n\n/**\n * Const to represent the right direction\n */\nexport const DIRECTION_RIGHT = 'right';\n/**\n * Const to represent the left direction\n */\nexport const DIRECTION_LEFT = 'left';\n","/*\n The MIT License (MIT)\n\n Copyright (c) 2017-2018 Stefano Cappa (Ks89)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NON INFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n */\n\nimport { ChangeDetectionStrategy, Component } from '@angular/core';\n\nimport { DIRECTION_RIGHT, MOUSE_MAIN_BUTTON_CLICK, NEXT, NOTHING, PREV, ENTER_CODE, SPACE_CODE } from '../utils/user-input.util';\n\n/**\n * Provides some useful methods to add accessibility features to subclasses.\n * In particular, it exposes a method to handle navigation event with both Keyboard and Mouse\n * and another with also the direction (right or left).\n */\n@Component({\n  selector: 'ks-accessible',\n  template: ``,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AccessibleComponent {\n  constructor() {}\n\n  /**\n   * Method to handle navigation events with both Keyboard and Mouse.\n   * @param string direction of the navigation that can be either 'next' or 'prev'\n   * @param KeyboardEvent | MouseEvent event payload\n   * @returns number -1 for PREV, 1 for NEXT and 0 for NOTHING\n   */\n  handleNavigationEvent(direction: string, event: KeyboardEvent | MouseEvent): number {\n    if (!event) {\n      return NOTHING;\n    }\n    if (event instanceof KeyboardEvent) {\n      return this.handleKeyboardNavigationEvent(direction, event);\n    } else if (event instanceof MouseEvent) {\n      return this.handleMouseNavigationEvent(direction, event);\n    }\n    return NOTHING;\n  }\n\n  /**\n   * Method to handle events over an image, for instance a keypress with the Keyboard or a Mouse click.\n   * @param KeyboardEvent | MouseEvent event payload\n   * @returns number 1 for NEXT and 0 for NOTHING\n   */\n  handleImageEvent(event: KeyboardEvent | MouseEvent): number {\n    if (!event) {\n      return NOTHING;\n    }\n    if (event instanceof KeyboardEvent) {\n      return this.handleImageKeyboardEvent(event);\n    } else if (event instanceof MouseEvent) {\n      return this.handleImageMouseEvent(event);\n    }\n    return NOTHING;\n  }\n\n  /**\n   * Private method to handle keyboard events over an image.\n   * @param KeyboardEvent event payload\n   * @returns number 1 for NEXT and 0 for NOTHING\n   */\n  private handleImageKeyboardEvent(event: KeyboardEvent): number {\n    const key: string = event.code;\n    if (key === SPACE_CODE || key === ENTER_CODE) {\n      return NEXT;\n    }\n    return NOTHING;\n  }\n\n  /**\n   * Private method to handle mouse events over an image.\n   * @param MouseEvent event payload\n   * @returns number 1 for NEXT and 0 for NOTHING\n   */\n  private handleImageMouseEvent(event: MouseEvent): number {\n    const mouseBtn: number = event.button;\n    if (mouseBtn === MOUSE_MAIN_BUTTON_CLICK) {\n      return NEXT;\n    }\n    return NOTHING;\n  }\n\n  /**\n   * Method to handle events over an image, for instance a keypress with the Keyboard or a Mouse click.\n   * @param string direction of the navigation that can be either 'next' or 'prev'\n   * @param KeyboardEvent event payload\n   * @returns number -1 for PREV, 1 for NEXT and 0 for NOTHING\n   */\n  private handleKeyboardNavigationEvent(direction: string, event: KeyboardEvent): number {\n    const key: string = event.code;\n    if (key === SPACE_CODE || key === ENTER_CODE) {\n      return direction === DIRECTION_RIGHT ? NEXT : PREV;\n    }\n    return NOTHING;\n  }\n\n  /**\n   * Method to handle events over an image, for instance a keypress with the Keyboard or a Mouse click.\n   * @param string direction of the navigation that can be either 'next' or 'prev'\n   * @param MouseEvent event payload\n   * @returns number -1 for PREV, 1 for NEXT and 0 for NOTHING\n   */\n  private handleMouseNavigationEvent(direction: string, event: MouseEvent): number {\n    const mouseBtn: number = event.button;\n    if (mouseBtn === MOUSE_MAIN_BUTTON_CLICK) {\n      return direction === DIRECTION_RIGHT ? NEXT : PREV;\n    }\n    return NOTHING;\n  }\n}\n","/*\n The MIT License (MIT)\n\n Copyright (c) 2017-2018 Stefano Cappa (Ks89)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NON INFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n */\n\n/**\n * Interface `Description` to change the description, either with a full custom\n * description or with a small and simple customization.\n * Also, you could change margins, background style and so on.\n */\nexport interface Description {\n  strategy: DescriptionStrategy;\n  customFullDescription?: string;\n  imageText?: string;\n  numberSeparator?: string;\n  beforeTextDescription?: string;\n\n  style?: DescriptionStyle;\n}\n\n/**\n * Enum `DescriptionStrategy` with keys and their relative key codes.\n */\nexport enum DescriptionStrategy {\n  ALWAYS_HIDDEN = 1,\n  ALWAYS_VISIBLE,\n  HIDE_IF_EMPTY\n}\n\n/**\n * Interface to change css properties.\n */\nexport interface DescriptionStyle {\n  bgColor?: string;\n  textColor?: string;\n  width?: string;\n  height?: string;\n  position?: string;\n  top?: string;\n  bottom?: string;\n  left?: string;\n  right?: string;\n  marginTop?: string;\n  marginBottom?: string;\n  marginRight?: string;\n  marginLeft?: string;\n}\n","/*\n The MIT License (MIT)\n\n Copyright (c) 2017-2018 Stefano Cappa (Ks89)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NON INFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n */\n\n/**\n * Enum `Keyboard` with keys and their relative key codes.\n */\nexport enum Keyboard {\n  ESC = 27,\n  LEFT_ARROW = 37,\n  RIGHT_ARROW = 39,\n  UP_ARROW = 38,\n  DOWN_ARROW = 40\n}\n","/*\n The MIT License (MIT)\n\n Copyright (c) 2017-2018 Stefano Cappa (Ks89)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NON INFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n */\n\n/**\n * Interface `LoadingConfig` to configure loading icon.\n */\nexport interface LoadingConfig {\n  enable: boolean;\n  type: LoadingType;\n}\n\n/**\n * Enum `LoadingType` with a list of possible types.\n */\nexport enum LoadingType {\n  STANDARD = 1,\n  CIRCULAR,\n  BARS,\n  DOTS,\n  CUBE_FLIPPING,\n  CIRCLES,\n  EXPLOSING_SQUARES\n}\n","/*\n The MIT License (MIT)\n\n Copyright (c) 2017-2018 Stefano Cappa (Ks89)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NON INFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n */\n\nimport { Image } from '../model/image.class';\n\n/**\n * Utility function to get the index of the input `image` from `arrayOfImages`\n * @param Image image to get the index. The image 'id' must be a number >= 0\n * @param Image[] arrayOfImages to search the image within it\n * @returns number the index of the image. -1 if not found.\n * @throws an Error if either image or arrayOfImages are not valid,\n *  or if the input image doesn't contain an 'id', or the 'id' is < 0\n */\nexport function getIndex(image: Image, arrayOfImages: Image[]): number {\n  if (!image) {\n    throw new Error('image must be a valid Image object');\n  }\n\n  if (!arrayOfImages) {\n    throw new Error('arrayOfImages must be a valid Image[]');\n  }\n\n  if (!image.id && image.id !== 0) {\n    // id = 0 is admitted\n    throw new Error(`A numeric Image 'id' is mandatory`);\n  }\n\n  if (image.id < 0) {\n    throw new Error(`Image 'id' must be >= 0`);\n  }\n\n  return arrayOfImages.findIndex((val: Image) => val.id === image.id);\n}\n","/*\n The MIT License (MIT)\n\n Copyright (c) 2017-2018 Stefano Cappa (Ks89)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NON INFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  HostListener,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n  PLATFORM_ID,\n  SimpleChange,\n  SimpleChanges\n} from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\nimport { Subject, timer } from 'rxjs';\nimport { filter, map, switchMap, takeUntil } from 'rxjs/operators';\n\nimport { AccessibleComponent } from '../accessible.component';\n\nimport { AccessibilityConfig } from '../../model/accessibility.interface';\nimport { Action } from '../../model/action.enum';\nimport { Description, DescriptionStrategy, DescriptionStyle } from '../../model/description.interface';\nimport { Image, ImageModalEvent } from '../../model/image.class';\nimport { InternalLibImage } from '../../model/image-internal.class';\nimport { Keyboard } from '../../model/keyboard.enum';\nimport { KeyboardConfig } from '../../model/keyboard-config.interface';\nimport { LoadingConfig, LoadingType } from '../../model/loading-config.interface';\nimport { SlideConfig } from '../../model/slide-config.interface';\n\nimport { NEXT, PREV } from '../../utils/user-input.util';\nimport { getIndex } from '../../utils/image.util';\nimport { CurrentImageConfig } from '../../model/current-image-config.interface';\n\n/**\n * Interface to describe the Load Event, used to\n * emit an event when the image is finally loaded and the spinner has gone.\n */\nexport interface ImageLoadEvent {\n  status: boolean;\n  index: number;\n  id: number;\n}\n\n/**\n * Component with the current image with some additional elements like arrows and side previews.\n */\n@Component({\n  selector: 'ks-current-image',\n  styleUrls: ['current-image.scss', '../image-arrows.scss', 'current-image-previews.scss'],\n  templateUrl: 'current-image.html',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CurrentImageComponent extends AccessibleComponent implements OnInit, OnChanges, AfterContentInit, OnDestroy {\n  /**\n   * Unique id (>=0) of the current instance of this library. This is useful when you are using\n   * the service to call modal gallery without open it manually.\n   */\n  @Input()\n  id: number;\n  /**\n   * Object of type `InternalLibImage` that represent the visible image.\n   */\n  @Input()\n  currentImage: InternalLibImage;\n  /**\n   * Array of `InternalLibImage` that represent the model of this library with all images,\n   * thumbs and so on.\n   */\n  @Input()\n  images: InternalLibImage[];\n  /**\n   * Boolean that it is true if the modal gallery is visible.\n   * If yes, also this component should be visible.\n   */\n  @Input()\n  isOpen: boolean;\n  /**\n   * Interface to configure current image in modal-gallery.\n   * For instance you can disable navigation on click on current image (enabled by default).\n   */\n  @Input()\n  currentImageConfig: CurrentImageConfig;\n  /**\n   * Object of type `SlideConfig` to get `infinite sliding`.\n   */\n  @Input()\n  slideConfig: SlideConfig;\n  /**\n   * Object of type `AccessibilityConfig` to init custom accessibility features.\n   * For instance, it contains titles, alt texts, aria-labels and so on.\n   */\n  @Input()\n  accessibilityConfig: AccessibilityConfig;\n  /**\n   * Object of type `KeyboardConfig` to assign custom keys to both ESC, RIGHT and LEFT keyboard's actions.\n   */\n  @Input()\n  keyboardConfig: KeyboardConfig;\n\n  /**\n   * Output to emit an event when images are loaded. The payload contains an `ImageLoadEvent`.\n   */\n  @Output()\n  loadImage: EventEmitter<ImageLoadEvent> = new EventEmitter<ImageLoadEvent>();\n  /**\n   * Output to emit any changes of the current image. The payload contains an `ImageModalEvent`.\n   */\n  @Output()\n  changeImage: EventEmitter<ImageModalEvent> = new EventEmitter<ImageModalEvent>();\n  /**\n   * Output to emit an event when the modal gallery is closed. The payload contains an `ImageModalEvent`.\n   */\n  @Output()\n  close: EventEmitter<ImageModalEvent> = new EventEmitter<ImageModalEvent>();\n\n  /**\n   * Subject to play modal-gallery.\n   */\n  private start$ = new Subject<void>();\n  /**\n   * Subject to stop modal-gallery.\n   */\n  private stop$ = new Subject<void>();\n\n  /**\n   * Enum of type `Action` that represents a normal action.\n   * Declared here to be used inside the template.\n   */\n  normalAction: Action = Action.NORMAL;\n  /**\n   * Enum of type `Action` that represents a mouse click on a button.\n   * Declared here to be used inside the template.\n   */\n  clickAction: Action = Action.CLICK;\n  /**\n   * Enum of type `Action` that represents a keyboard action.\n   * Declared here to be used inside the template.\n   */\n  keyboardAction: Action = Action.KEYBOARD;\n  /**\n   * Boolean that it's true when you are watching the first image (currently visible).\n   * False by default\n   */\n  isFirstImage = false;\n  /**\n   * Boolean that it's true when you are watching the last image (currently visible).\n   * False by default\n   */\n  isLastImage = false;\n  /**\n   * Boolean that it's true if an image of the modal gallery is still loading.\n   * True by default\n   */\n  loading = true;\n  /**\n   * Object of type `CurrentImageConfig` exposed to the template. This field is initialized\n   * applying transformations, default values and so on to the input of the same type.\n   */\n  configCurrentImage: CurrentImageConfig;\n\n  configSlide: SlideConfig;\n\n  /**\n   * Private object without type to define all swipe actions used by hammerjs.\n   */\n  private SWIPE_ACTION = {\n    LEFT: 'swipeleft',\n    RIGHT: 'swiperight',\n    UP: 'swipeup',\n    DOWN: 'swipedown'\n  };\n\n  constructor(@Inject(PLATFORM_ID) private _platformId, private _ngZone: NgZone, private ref: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Listener to stop the gallery when the mouse pointer is over the current image.\n   */\n  @HostListener('mouseenter')\n  onMouseEnter() {\n    // if carousel feature is disable, don't do anything in any case\n    if (!this.configSlide || !this.configSlide.playConfig) {\n      return;\n    }\n    if (!this.configSlide.playConfig.pauseOnHover) {\n      return;\n    }\n    this.stopCarousel();\n  }\n\n  /**\n   * Listener to play the gallery when the mouse pointer leave the current image.\n   */\n  @HostListener('mouseleave')\n  onMouseLeave() {\n    // if carousel feature is disable, don't do anything in any case\n    if (!this.configSlide || !this.configSlide.playConfig) {\n      return;\n    }\n    if (!this.configSlide.playConfig.pauseOnHover || !this.configSlide.playConfig.autoPlay) {\n      return;\n    }\n    this.playCarousel();\n  }\n\n  /**\n   * Method Â´ngOnInitÂ´ to build `configCurrentImage` applying default values.\n   * This is an Angular's lifecycle hook, so its called automatically by Angular itself.\n   * In particular, it's called only one time!!!\n   */\n  ngOnInit() {\n    const defaultLoading: LoadingConfig = { enable: true, type: LoadingType.STANDARD };\n    const defaultDescriptionStyle: DescriptionStyle = {\n      bgColor: 'rgba(0, 0, 0, .5)',\n      textColor: 'white',\n      marginTop: '0px',\n      marginBottom: '0px',\n      marginLeft: '0px',\n      marginRight: '0px'\n    };\n    const defaultDescription: Description = {\n      strategy: DescriptionStrategy.ALWAYS_VISIBLE,\n      imageText: 'Image ',\n      numberSeparator: '/',\n      beforeTextDescription: ' - ',\n      style: defaultDescriptionStyle\n    };\n    const defaultCurrentImageConfig: CurrentImageConfig = {\n      navigateOnClick: true,\n      loadingConfig: defaultLoading,\n      description: defaultDescription,\n      downloadable: false,\n      invertSwipe: false\n    };\n\n    this.configCurrentImage = Object.assign({}, defaultCurrentImageConfig, this.currentImageConfig);\n    this.configCurrentImage.description = Object.assign({}, defaultDescription, this.configCurrentImage.description);\n\n    this.configSlide = Object.assign({}, this.slideConfig);\n  }\n\n  /**\n   * Method Â´ngOnChangesÂ´ to update `loading` status and emit events.\n   * If the gallery is open, then it will also manage boundary arrows and sliding.\n   * This is an Angular's lifecycle hook, so its called automatically by Angular itself.\n   * In particular, it's called when any data-bound property of a directive changes!!!\n   */\n  ngOnChanges(changes: SimpleChanges) {\n    const images: SimpleChange = changes.images;\n    const currentImage: SimpleChange = changes.currentImage;\n\n    if (currentImage && currentImage.previousValue !== currentImage.currentValue) {\n      this.updateIndexes();\n    } else if (images && images.previousValue !== images.currentValue) {\n      this.updateIndexes();\n    }\n\n    const slideConfig: SimpleChange = changes.slideConfig;\n    if (slideConfig && slideConfig.previousValue !== slideConfig.currentValue) {\n      this.configSlide = Object.assign({}, this.slideConfig);\n    }\n  }\n\n  ngAfterContentInit() {\n    // interval doesn't play well with SSR and protractor,\n    // so we should run it in the browser and outside Angular\n    if (isPlatformBrowser(this._platformId)) {\n      this._ngZone.runOutsideAngular(() => {\n        this.start$\n          .pipe(\n            map(() => this.configSlide && this.configSlide.playConfig && this.configSlide.playConfig.autoPlay && this.configSlide.playConfig.interval),\n            filter(interval => interval > 0),\n            switchMap(interval => timer(interval).pipe(takeUntil(this.stop$)))\n          )\n          .subscribe(() =>\n            this._ngZone.run(() => {\n              if (!this.isLastImage) {\n                this.nextImage(Action.AUTOPLAY);\n              }\n              this.ref.markForCheck();\n            })\n          );\n\n        this.start$.next();\n      });\n    }\n  }\n\n  /**\n   * Method to handle keypress based on the `keyboardConfig` input. It gets the keyCode of\n   * the key that triggered the keypress event to navigate between images or to close the modal gallery.\n   * @param number keyCode of the key that triggered the keypress event\n   */\n  onKeyPress(keyCode: number) {\n    const esc: number = this.keyboardConfig && this.keyboardConfig.esc ? this.keyboardConfig.esc : Keyboard.ESC;\n    const right: number = this.keyboardConfig && this.keyboardConfig.right ? this.keyboardConfig.right : Keyboard.RIGHT_ARROW;\n    const left: number = this.keyboardConfig && this.keyboardConfig.left ? this.keyboardConfig.left : Keyboard.LEFT_ARROW;\n\n    switch (keyCode) {\n      case esc:\n        this.close.emit(new ImageModalEvent(Action.KEYBOARD, true));\n        break;\n      case right:\n        this.nextImage(Action.KEYBOARD);\n        break;\n      case left:\n        this.prevImage(Action.KEYBOARD);\n        break;\n    }\n  }\n\n  /**\n   * Method to get the image description based on input params.\n   * If you provide a full description this will be the visible description, otherwise,\n   * it will be built using the `Description` object, concatenating its fields.\n   * @param Image image to get its description. If not provided it will be the current image\n   * @returns String description of the image (or the current image if not provided)\n   * @throws an Error if description isn't available\n   */\n  getDescriptionToDisplay(image: Image = this.currentImage): string {\n    if (!this.configCurrentImage || !this.configCurrentImage.description) {\n      throw new Error('Description input must be a valid object implementing the Description interface');\n    }\n\n    const imageWithoutDescription: boolean = !image.modal || !image.modal.description || image.modal.description === '';\n\n    switch (this.configCurrentImage.description.strategy) {\n      case DescriptionStrategy.HIDE_IF_EMPTY:\n        return imageWithoutDescription ? '' : image.modal.description + '';\n      case DescriptionStrategy.ALWAYS_HIDDEN:\n        return '';\n      default:\n        // ----------- DescriptionStrategy.ALWAYS_VISIBLE -----------------\n        return this.buildTextDescription(image, imageWithoutDescription);\n    }\n  }\n\n  /**\n   * Method to get `alt attribute`.\n   * `alt` specifies an alternate text for an image, if the image cannot be displayed.\n   * @param Image image to get its alt description. If not provided it will be the current image\n   * @returns String alt description of the image (or the current image if not provided)\n   */\n  getAltDescriptionByImage(image: Image = this.currentImage): string {\n    if (!image) {\n      return '';\n    }\n    return image.modal && image.modal.description ? image.modal.description : `Image ${getIndex(image, this.images) + 1}`;\n  }\n\n  /**\n   * Method to get the title attributes based on descriptions.\n   * This is useful to prevent accessibility issues, because if DescriptionStrategy is ALWAYS_HIDDEN,\n   * it prevents an empty string as title.\n   * @param Image image to get its description. If not provided it will be the current image\n   * @returns String title of the image based on descriptions\n   * @throws an Error if description isn't available\n   */\n  getTitleToDisplay(image: Image = this.currentImage): string {\n    if (!this.configCurrentImage || !this.configCurrentImage.description) {\n      throw new Error('Description input must be a valid object implementing the Description interface');\n    }\n    const imageWithoutDescription: boolean = !image.modal || !image.modal.description || image.modal.description === '';\n    const description: string = this.buildTextDescription(image, imageWithoutDescription);\n    return description;\n  }\n\n  /**\n   * Method to get the left side preview image.\n   * @returns Image the image to show as size preview on the left\n   */\n  getLeftPreviewImage(): Image {\n    const currentIndex: number = getIndex(this.currentImage, this.images);\n    if (currentIndex === 0 && this.configSlide.infinite) {\n      // the current image is the first one,\n      // so the previous one is the last image\n      // because infinite is true\n      return this.images[this.images.length - 1];\n    }\n    this.handleBoundaries(currentIndex);\n    return this.images[Math.max(currentIndex - 1, 0)];\n  }\n\n  /**\n   * Method to get the right side preview image.\n   * @returns Image the image to show as size preview on the right\n   */\n  getRightPreviewImage(): Image {\n    const currentIndex: number = getIndex(this.currentImage, this.images);\n    if (currentIndex === this.images.length - 1 && this.configSlide.infinite) {\n      // the current image is the last one,\n      // so the next one is the first image\n      // because infinite is true\n      return this.images[0];\n    }\n    this.handleBoundaries(currentIndex);\n    return this.images[Math.min(currentIndex + 1, this.images.length - 1)];\n  }\n\n  /**\n   * Method called by events from both keyboard and mouse on an image.\n   * This will invoke the nextImage method.\n   * @param KeyboardEvent | MouseEvent event payload\n   * @param Action action that triggered the event or `Action.NORMAL` if not provided\n   */\n  onImageEvent(event: KeyboardEvent | MouseEvent, action: Action = Action.NORMAL) {\n    // check if triggered by a mouse click\n    // If yes, It should block navigation when navigateOnClick is false\n    if (action === Action.CLICK && !this.configCurrentImage.navigateOnClick) {\n      // a user has requested to block navigation via configCurrentImage.navigateOnClick property\n      return;\n    }\n\n    const result: number = super.handleImageEvent(event);\n    if (result === NEXT) {\n      this.nextImage(action);\n    }\n  }\n\n  /**\n   * Method called by events from both keyboard and mouse on a navigation arrow.\n   * @param string direction of the navigation that can be either 'next' or 'prev'\n   * @param KeyboardEvent | MouseEvent event payload\n   * @param Action action that triggered the event or `Action.NORMAL` if not provided\n   * @param boolean disable to disable navigation\n   */\n  onNavigationEvent(direction: string, event: KeyboardEvent, action: Action = Action.NORMAL, disable: boolean = false) {\n    if (disable) {\n      return;\n    }\n    const result: number = super.handleNavigationEvent(direction, event);\n    if (result === NEXT) {\n      this.nextImage(action);\n    } else if (result === PREV) {\n      this.prevImage(action);\n    }\n  }\n\n  /**\n   * Method to go back to the previous image.\n   * @param action Enum of type `Action` that represents the source\n   *  action that moved back to the previous image. `Action.NORMAL` by default.\n   */\n  prevImage(action: Action = Action.NORMAL) {\n    // check if prevImage should be blocked\n    if (this.isPreventSliding(0)) {\n      return;\n    }\n    const prevImage: InternalLibImage = this.getPrevImage();\n    this.loading = !prevImage.previouslyLoaded;\n    this.changeImage.emit(new ImageModalEvent(action, getIndex(prevImage, this.images)));\n\n    this.start$.next();\n  }\n\n  /**\n   * Method to go back to the previous image.\n   * @param action Enum of type `Action` that represents the source\n   *  action that moved to the next image. `Action.NORMAL` by default.\n   */\n  nextImage(action: Action = Action.NORMAL) {\n    // check if nextImage should be blocked\n    if (this.isPreventSliding(this.images.length - 1)) {\n      return;\n    }\n    const nextImage: InternalLibImage = this.getNextImage();\n    this.loading = !nextImage.previouslyLoaded;\n    this.changeImage.emit(new ImageModalEvent(action, getIndex(nextImage, this.images)));\n\n    this.start$.next();\n  }\n\n  /**\n   * Method to emit an event as loadImage output to say that the requested image if loaded.\n   * This method is invoked by the javascript's 'load' event on an img tag.\n   * @param Event event that triggered the load\n   */\n  onImageLoad(event: Event) {\n    const loadImageData: ImageLoadEvent = {\n      status: true,\n      index: getIndex(this.currentImage, this.images),\n      id: this.currentImage.id\n    };\n\n    this.loadImage.emit(loadImageData);\n\n    this.loading = false;\n  }\n\n  /**\n   * Method used by Hammerjs to support touch gestures (you can also invert the swipe direction with configCurrentImage.invertSwipe).\n   * @param action String that represent the direction of the swipe action. 'swiperight' by default.\n   */\n  swipe(action = this.SWIPE_ACTION.RIGHT) {\n    switch (action) {\n      case this.SWIPE_ACTION.RIGHT:\n        if (this.configCurrentImage.invertSwipe) {\n          this.prevImage(Action.SWIPE);\n        } else {\n          this.nextImage(Action.SWIPE);\n        }\n        break;\n      case this.SWIPE_ACTION.LEFT:\n        if (this.configCurrentImage.invertSwipe) {\n          this.nextImage(Action.SWIPE);\n        } else {\n          this.prevImage(Action.SWIPE);\n        }\n        break;\n      // case this.SWIPE_ACTION.UP:\n      //   break;\n      // case this.SWIPE_ACTION.DOWN:\n      //   break;\n    }\n  }\n\n  /**\n   * Method used in `modal-gallery.component` to get the index of an image to delete.\n   * @param Image image to get the index, or the visible image, if not passed\n   * @returns number the index of the image\n   */\n  getIndexToDelete(image: Image = this.currentImage): number {\n    return getIndex(image, this.images);\n  }\n\n  /**\n   * Method to play modal gallery.\n   */\n  playCarousel() {\n    this.start$.next();\n  }\n\n  /**\n   * Stops modal gallery from cycling through items.\n   */\n  stopCarousel() {\n    this.stop$.next();\n  }\n\n  /**\n   * Method to cleanup resources. In fact, this will stop the modal gallery.\n   * This is an Angular's lifecycle hook that is called when this component is destroyed.\n   */\n  ngOnDestroy() {\n    this.stopCarousel();\n  }\n\n  /**\n   * Private method to update both `isFirstImage` and `isLastImage` based on\n   * the index of the current image.\n   * @param number currentIndex is the index of the current image\n   */\n  private handleBoundaries(currentIndex: number) {\n    if (this.images.length === 1) {\n      this.isFirstImage = true;\n      this.isLastImage = true;\n      return;\n    }\n    if (!this.configSlide || this.configSlide.infinite === true) {\n      // infinite sliding enabled\n      this.isFirstImage = false;\n      this.isLastImage = false;\n    } else {\n      switch (currentIndex) {\n        case 0:\n          // execute this only if infinite sliding is disabled\n          this.isFirstImage = true;\n          this.isLastImage = false;\n          break;\n        case this.images.length - 1:\n          // execute this only if infinite sliding is disabled\n          this.isFirstImage = false;\n          this.isLastImage = true;\n          break;\n        default:\n          this.isFirstImage = false;\n          this.isLastImage = false;\n          break;\n      }\n    }\n  }\n\n  /**\n   * Private method to check if next/prev actions should be blocked.\n   * It checks if configSlide.infinite === false and if the image index is equals to the input parameter.\n   * If yes, it returns true to say that sliding should be blocked, otherwise not.\n   * @param number boundaryIndex that could be either the beginning index (0) or the last index\n   *  of images (this.images.length - 1).\n   * @returns boolean true if configSlide.infinite === false and the current index is\n   *  either the first or the last one.\n   */\n  private isPreventSliding(boundaryIndex: number): boolean {\n    return !!this.configSlide && this.configSlide.infinite === false && getIndex(this.currentImage, this.images) === boundaryIndex;\n  }\n\n  /**\n   * Private method to get the next index.\n   * This is necessary because at the end, when you call next again, you'll go to the first image.\n   * That happens because all modal images are shown like in a circle.\n   */\n  private getNextImage(): InternalLibImage {\n    const currentIndex: number = getIndex(this.currentImage, this.images);\n    let newIndex = 0;\n    if (currentIndex >= 0 && currentIndex < this.images.length - 1) {\n      newIndex = currentIndex + 1;\n    } else {\n      newIndex = 0; // start from the first index\n    }\n    return this.images[newIndex];\n  }\n\n  /**\n   * Private method to get the previous index.\n   * This is necessary because at index 0, when you call prev again, you'll go to the last image.\n   * That happens because all modal images are shown like in a circle.\n   */\n  private getPrevImage(): InternalLibImage {\n    const currentIndex: number = getIndex(this.currentImage, this.images);\n    let newIndex = 0;\n    if (currentIndex > 0 && currentIndex <= this.images.length - 1) {\n      newIndex = currentIndex - 1;\n    } else {\n      newIndex = this.images.length - 1; // start from the last index\n    }\n    return this.images[newIndex];\n  }\n\n  /**\n   * Private method to build a text description.\n   * This is used also to create titles.\n   * @param Image image to get its description. If not provided it will be the current image.\n   * @param boolean imageWithoutDescription is a boolean that it's true if the image hasn't a 'modal' description.\n   * @returns String description built concatenating image fields with a specific logic.\n   */\n  private buildTextDescription(image: Image, imageWithoutDescription: boolean): string {\n    if (!this.configCurrentImage || !this.configCurrentImage.description) {\n      throw new Error('Description input must be a valid object implementing the Description interface');\n    }\n\n    // If customFullDescription use it, otherwise proceed to build a description\n    if (this.configCurrentImage.description.customFullDescription && this.configCurrentImage.description.customFullDescription !== '') {\n      return this.configCurrentImage.description.customFullDescription;\n    }\n\n    const currentIndex: number = getIndex(image, this.images);\n    // If the current image hasn't a description,\n    // prevent to write the ' - ' (or this.description.beforeTextDescription)\n\n    const prevDescription: string = this.configCurrentImage.description.imageText ? this.configCurrentImage.description.imageText : '';\n    const midSeparator: string = this.configCurrentImage.description.numberSeparator ? this.configCurrentImage.description.numberSeparator : '';\n    const middleDescription: string = currentIndex + 1 + midSeparator + this.images.length;\n\n    if (imageWithoutDescription) {\n      return prevDescription + middleDescription;\n    }\n\n    const currImgDescription: string = image.modal && image.modal.description ? image.modal.description : '';\n    const endDescription: string = this.configCurrentImage.description.beforeTextDescription + currImgDescription;\n    return prevDescription + middleDescription + endDescription;\n  }\n\n  /**\n   * Private method to call handleBoundaries when ngOnChanges is called.\n   */\n  private updateIndexes() {\n    let index: number;\n    try {\n      index = getIndex(this.currentImage, this.images);\n    } catch (err) {\n      console.error('Cannot get the current image index in current-image');\n      throw err;\n    }\n    if (this.isOpen) {\n      this.handleBoundaries(index);\n    }\n  }\n}\n","/*\n The MIT License (MIT)\n\n Copyright (c) 2017-2018 Stefano Cappa (Ks89)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NON INFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n */\n\nimport { Size } from './size.interface';\n\n/**\n * Interface `PlainGalleryConfig` to configure plain-gallery features.\n */\nexport interface PlainGalleryConfig {\n  strategy: PlainGalleryStrategy;\n  layout: PlainGalleryLayout;\n  advanced?: AdvancedConfig;\n}\n\n/**\n * Interface `PlainGalleryLayout` to configure the layout. This interface isn't used directly, instead\n * refers to either `LineLayout`, `GridLayout` or `AdvancedLayout`.\n */\n// tslint:disable-next-line no-empty-interface\nexport interface PlainGalleryLayout {}\n\n/**\n * Class `LineLayout` to configure a linear plain gallery.\n */\nexport class LineLayout implements PlainGalleryLayout {\n  breakConfig: BreakConfig;\n  justify: string;\n  size: Size;\n\n  constructor(size: Size, breakConfig: BreakConfig, justify: string) {\n    this.size = size;\n    this.breakConfig = breakConfig;\n    this.justify = justify;\n  }\n}\n\n/**\n * Class `GridLayout` to configure a grid plain gallery.\n */\nexport class GridLayout implements PlainGalleryLayout {\n  breakConfig: BreakConfig;\n  size: Size;\n\n  constructor(size: Size, breakConfig: BreakConfig) {\n    this.size = size;\n    this.breakConfig = breakConfig;\n  }\n}\n\n/**\n * Class `AdvancedLayout` to configure a fully custom plain gallery.\n */\nexport class AdvancedLayout implements PlainGalleryLayout {\n  modalOpenerByIndex: number;\n  hideDefaultPlainGallery: boolean;\n\n  constructor(modalOpenerByIndex: number, hideDefaultPlainGallery: boolean) {\n    this.modalOpenerByIndex = modalOpenerByIndex;\n    this.hideDefaultPlainGallery = hideDefaultPlainGallery;\n  }\n}\n\n/**\n * Enum `PlainGalleryStrategy` to choose the behaviour of the plain gallery.\n */\nexport enum PlainGalleryStrategy {\n  // don't use 0 here\n  // the first index is 1 and all of the following members are auto-incremented from that point on\n  ROW = 1,\n  COLUMN,\n  GRID,\n  CUSTOM // full custom strategy\n}\n\n/**\n * Interface `BreakConfig` to limit the number of items of the plain gallery or to force it to fill other lines.\n */\nexport interface BreakConfig {\n  length: number;\n  wrap: boolean;\n}\n\n/**\n * Interface `AdvancedConfig` to use `<a>` tags instead of `<img>`.\n * It also contains a string property to customize the css background property.\n * For more info check here https://www.w3schools.com/cssref/css3_pr_background.asp\n */\nexport interface AdvancedConfig {\n  aTags: boolean;\n  additionalBackground: string;\n}\n","import { AccessibilityConfig } from '../model/accessibility.interface';\n\n/**\n * Default accessibility configuration.\n */\nexport const KS_DEFAULT_ACCESSIBILITY_CONFIG: AccessibilityConfig = {\n  backgroundAriaLabel: 'Modal gallery full screen background',\n  backgroundTitle: '',\n\n  plainGalleryContentAriaLabel: 'Plain gallery content',\n  plainGalleryContentTitle: '',\n\n  modalGalleryContentAriaLabel: 'Modal gallery content',\n  modalGalleryContentTitle: '',\n\n  loadingSpinnerAriaLabel: 'The current image is loading. Please be patient.',\n  loadingSpinnerTitle: 'The current image is loading. Please be patient.',\n\n  mainContainerAriaLabel: 'Current image and navigation',\n  mainContainerTitle: '',\n  mainPrevImageAriaLabel: 'Previous image',\n  mainPrevImageTitle: 'Previous image',\n  mainNextImageAriaLabel: 'Next image',\n  mainNextImageTitle: 'Next image',\n\n  dotsContainerAriaLabel: 'Image navigation dots',\n  dotsContainerTitle: '',\n  dotAriaLabel: 'Navigate to image number',\n\n  previewsContainerAriaLabel: 'Image previews',\n  previewsContainerTitle: '',\n  previewScrollPrevAriaLabel: 'Scroll previous previews',\n  previewScrollPrevTitle: 'Scroll previous previews',\n  previewScrollNextAriaLabel: 'Scroll next previews',\n  previewScrollNextTitle: 'Scroll next previews',\n\n  carouselContainerAriaLabel: 'Current image and navigation',\n  carouselContainerTitle: '',\n  carouselPrevImageAriaLabel: 'Previous image',\n  carouselPrevImageTitle: 'Previous image',\n  carouselNextImageAriaLabel: 'Next image',\n  carouselNextImageTitle: 'Next image',\n  carouselPreviewsContainerAriaLabel: 'Image previews',\n  carouselPreviewsContainerTitle: '',\n  carouselPreviewScrollPrevAriaLabel: 'Scroll previous previews',\n  carouselPreviewScrollPrevTitle: 'Scroll previous previews',\n  carouselPreviewScrollNextAriaLabel: 'Scroll next previews',\n  carouselPreviewScrollNextTitle: 'Scroll next previews'\n};\n","/*\n The MIT License (MIT)\n\n Copyright (c) 2017-2018 Stefano Cappa (Ks89)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NON INFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n */\n\nimport { Injectable } from '@angular/core';\n\n/**\n * Service to check if the provided id is unique\n */\n@Injectable({ providedIn: 'root' })\nexport class IdValidatorService {\n  ids = new Map();\n\n  /**\n   * Method to check and reserve an id for the current instance of the library.\n   * In this way, no other instances can use the same id.\n   * @param galleryId number or undefined that represents the unique id of the gallery.\n   * @return boolean true if success. false is never returned, instead an exception is thrown\n   * @throws a error with a message if galleryId is neither unique, < 0 or an integer\n   */\n  checkAndAdd(galleryId: number | undefined): boolean {\n    if (!Number.isInteger(galleryId) || galleryId < 0) {\n      throw new Error('You must provide a valid [id]=\"unique integer > 0 here\" to the gallery/carousel in your template');\n    }\n    if (this.ids.get(galleryId)) {\n      throw new Error(`Cannot create gallery with id=${galleryId} because already used in your application. This must be a unique integer >= 0`);\n    }\n    this.ids.set(galleryId, galleryId);\n    return true;\n  }\n\n  /**\n   * Method to remove a reserved id. In this way you are able to use the id again for another instance of the library.\n   * @param galleryId number or undefined that represents the unique id of the gallery.\n   * @return boolean true if success. false is never returned, instead an exception is thrown\n   * @throws a error with a message if galleryId is neither integer or < 0\n   */\n  remove(galleryId: number | undefined): boolean {\n    if (!Number.isInteger(galleryId) || galleryId < 0) {\n      throw new Error('You must provide a valid [id]=\"unique integer > 0 here\" to the gallery/carousel in your template');\n    }\n    // if (this.ids.find(id => id === galleryId)) {\n    //   throw new Error(`Cannot create gallery with id=${galleryId} because already used in your application. This must be a unique number >= 0.`);\n    // }\n    this.ids.delete(galleryId);\n    return true;\n  }\n}\n","/*\n The MIT License (MIT)\n\n Copyright (c) 2017-2018 Stefano Cappa (Ks89)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NON INFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  HostListener,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n  PLATFORM_ID,\n  SimpleChange,\n  SimpleChanges,\n  ViewChild\n} from '@angular/core';\nimport { isPlatformBrowser, isPlatformServer } from '@angular/common';\n\nimport { ButtonEvent, ButtonsConfig } from '../../model/buttons-config.interface';\nimport { Image, ImageModalEvent } from '../../model/image.class';\nimport { Action } from '../../model/action.enum';\nimport { KeyboardConfig } from '../../model/keyboard-config.interface';\nimport { PreviewConfig } from '../../model/preview-config.interface';\nimport { SidePreviewsConfig, SlideConfig } from '../../model/slide-config.interface';\nimport { AccessibilityConfig } from '../../model/accessibility.interface';\nimport { KeyboardService } from '../../services/keyboard.service';\nimport { GalleryService, InternalGalleryPayload } from '../../services/gallery.service';\nimport { DotsConfig } from '../../model/dots-config.interface';\nimport { CurrentImageComponent, ImageLoadEvent } from '../current-image/current-image.component';\nimport { InternalLibImage } from '../../model/image-internal.class';\nimport { AdvancedLayout, PlainGalleryConfig } from '../../model/plain-gallery-config.interface';\nimport { KS_DEFAULT_ACCESSIBILITY_CONFIG } from '../accessibility-default';\nimport { CurrentImageConfig } from '../../model/current-image-config.interface';\nimport { getIndex } from '../../utils/image.util';\n\nimport { Subscription } from 'rxjs';\nimport { IdValidatorService } from '../../services/id-validator.service';\nimport { InteractionEvent } from '../../model/interaction-event.interface';\nimport { PlayConfig } from '../../model/play-config.interface';\n\n/**\n * Main Component of this library with both the plain and modal galleries.\n */\n@Component({\n  selector: 'ks-modal-gallery',\n  exportAs: 'ksModalGallery',\n  styleUrls: ['modal-gallery.scss'],\n  templateUrl: 'modal-gallery.html',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ModalGalleryComponent implements OnInit, OnDestroy, OnChanges {\n  /**\n   * Unique id (>=0) of the current instance of this library. This is useful when you are using\n   * the service to call modal gallery without open it manually.\n   */\n  @Input()\n  id: number;\n  /**\n   * Array of `Image` that represent the model of this library with all images, thumbs and so on.\n   */\n  @Input()\n  modalImages: Image[];\n  /**\n   * Object of type `ButtonsConfig` to show/hide buttons.\n   */\n  @Input()\n  buttonsConfig: ButtonsConfig;\n  /**\n   * Boolean to enable modal-gallery close behaviour when clicking\n   * on the semi-transparent background. Enabled by default.\n   */\n  @Input()\n  enableCloseOutside = true;\n  /**\n   * Interface to configure current image in modal-gallery.\n   * For instance you can disable navigation on click on current image (enabled by default).\n   */\n  @Input()\n  currentImageConfig: CurrentImageConfig;\n  /**\n   * Object of type `DotsConfig` to init DotsComponent's features.\n   * For instance, it contains a param to show/hide dots.\n   */\n  @Input()\n  dotsConfig: DotsConfig;\n  /**\n   * Object of type `PreviewConfig` to init PreviewsComponent's features.\n   * For instance, it contains a param to show/hide previews.\n   */\n  @Input()\n  previewConfig: PreviewConfig;\n  /**\n   * Object of type `SlideConfig` to init side previews and `infinite sliding`.\n   */\n  @Input()\n  slideConfig: SlideConfig;\n  /**\n   * Object of type `AccessibilityConfig` to init custom accessibility features.\n   * For instance, it contains titles, alt texts, aria-labels and so on.\n   */\n  @Input()\n  accessibilityConfig: AccessibilityConfig = KS_DEFAULT_ACCESSIBILITY_CONFIG;\n  /**\n   * Object of type `KeyboardConfig` to assign custom keys to ESC, RIGHT and LEFT keyboard's actions.\n   */\n  @Input()\n  keyboardConfig: KeyboardConfig;\n  /**\n   * Object of type `PlainGalleryConfig` to configure the plain gallery.\n   */\n  @Input()\n  plainGalleryConfig: PlainGalleryConfig;\n\n  /**\n   * Output to emit an event when the modal gallery is closed.\n   */\n  @Output()\n  close: EventEmitter<ImageModalEvent> = new EventEmitter<ImageModalEvent>();\n  /**\n   * Output to emit an event when an image is changed.\n   */\n  @Output()\n  show: EventEmitter<ImageModalEvent> = new EventEmitter<ImageModalEvent>();\n  /**\n   * Output to emit an event when the current image is the first one.\n   */\n  @Output()\n  firstImage: EventEmitter<ImageModalEvent> = new EventEmitter<ImageModalEvent>();\n  /**\n   * Output to emit an event when the current image is the last one.\n   */\n  @Output()\n  lastImage: EventEmitter<ImageModalEvent> = new EventEmitter<ImageModalEvent>();\n  /**\n   * Output to emit an event when the modal gallery is closed.\n   */\n  @Output()\n  hasData: EventEmitter<ImageModalEvent> = new EventEmitter<ImageModalEvent>();\n  /**\n   * Output to emit an event when a button is clicked, but before that the action is triggered.\n   */\n  @Output()\n  buttonBeforeHook: EventEmitter<ButtonEvent> = new EventEmitter<ButtonEvent>();\n  /**\n   * Output to emit an event when a button is clicked, but after that the action is triggered.\n   */\n  @Output()\n  buttonAfterHook: EventEmitter<ButtonEvent> = new EventEmitter<ButtonEvent>();\n  /**\n   * Output to emit an event when someone clicks either an arrow of modal gallery or also in previews.\n   */\n  @Output()\n  arrow: EventEmitter<InteractionEvent> = new EventEmitter<InteractionEvent>();\n\n  /**\n   * Reference to the CurrentImageComponent to invoke methods on it.\n   */\n  @ViewChild(CurrentImageComponent)\n  currentImageComponent;\n\n  /**\n   * Boolean that it is true if the modal gallery is visible. False by default.\n   */\n  opened = false;\n  /**\n   * Boolean to open the modal gallery. False by default.\n   */\n  showGallery = false;\n  /**\n   * Array of `InternalLibImage` representing the model of this library with all images, thumbs and so on.\n   */\n  images: InternalLibImage[];\n  /**\n   * `Image` that is visible right now.\n   */\n  currentImage: InternalLibImage;\n  /**\n   * Object of type `SlideConfig` passed to currentImage and used to handle play/stop features. This field is initialized\n   * applying transformations, default values and so on to the input of the same type.\n   */\n  configSlide: SlideConfig;\n\n  private galleryServiceNavigateSubscription: Subscription;\n  private galleryServiceCloseSubscription: Subscription;\n  private galleryServiceUpdateSubscription: Subscription;\n  private galleryServiceAutoPlaySubscription: Subscription;\n\n  /**\n   * HostListener to catch browser's back button and destroy the gallery.\n   * This prevents weired behaviour about scrolling.\n   * Added to fix this issue: https://github.com/Ks89/angular-modal-gallery/issues/159\n   */\n  @HostListener('window:popstate', ['$event'])\n  onPopState(e: Event) {\n    this.closeGallery();\n  }\n\n  /**\n   * Constructor with the injection of Â´KeyboardServiceÂ´, an object to support Server-Side Rendering and other useful services.\n   */\n  constructor(\n    private keyboardService: KeyboardService,\n    private galleryService: GalleryService,\n    @Inject(PLATFORM_ID) private platformId: Object,\n    private changeDetectorRef: ChangeDetectorRef,\n    private idValidatorService: IdValidatorService\n  ) {}\n\n  /**\n   * Method Â´ngOnChangesÂ´ to re-init images if input is changed.\n   * This is an Angular's lifecycle hook, so its called automatically by Angular itself.\n   * In particular, it's called before `ngOnInit()` and whenever one or more data-bound input properties change.\n   * @param changes `SimpleChanges` object of current and previous property values provided by Angular.\n   */\n  ngOnChanges(changes: SimpleChanges) {\n    const imagesChange: SimpleChange = changes.modalImages;\n    const plainGalleryConfigChange: SimpleChange = changes.plainGalleryConfig;\n\n    if (imagesChange && !imagesChange.firstChange && imagesChange.previousValue !== imagesChange.currentValue) {\n      this.initImages();\n    }\n\n    if (plainGalleryConfigChange) {\n      // const prevPlainGalleryConfigChange: any = plainGalleryConfigChange.previousValue;\n      const currPlainGalleryConfigChange: PlainGalleryConfig = plainGalleryConfigChange.currentValue;\n      if (\n        currPlainGalleryConfigChange.layout &&\n        currPlainGalleryConfigChange.layout instanceof AdvancedLayout &&\n        currPlainGalleryConfigChange.layout.modalOpenerByIndex !== -1\n      ) {\n        // console.log('opening modal gallery from custom plain gallery, index: ', currPlainGalleryConfigChange);\n        this.showModalGallery(currPlainGalleryConfigChange.layout.modalOpenerByIndex);\n      }\n    }\n  }\n\n  /**\n   * Method Â´ngOnInitÂ´ to init images calling `initImages()`.\n   * This is an Angular's lifecycle hook, so its called automatically by Angular itself.\n   * In particular, it's called only one time!!!\n   */\n  ngOnInit() {\n    this.idValidatorService.checkAndAdd(this.id);\n\n    // id is a mandatory input and must a number > 0\n    if ((!this.id && this.id !== 0) || this.id < 0) {\n      throw new Error(\n        `'[id]=\"a number >= 0\"' is a mandatory input from 6.0.0 in angular-modal-gallery.` +\n          `If you are using multiple instances of this library, please be sure to use different ids`\n      );\n    }\n\n    // call initImages to init images and to emit `hasData` event\n    this.initImages();\n\n    const defaultSlideConfig: SlideConfig = {\n      infinite: false,\n      playConfig: <PlayConfig>{ autoPlay: false, interval: 5000, pauseOnHover: true },\n      sidePreviews: <SidePreviewsConfig>{ show: true, size: { width: '100px', height: 'auto' } }\n    };\n    this.configSlide = Object.assign({}, defaultSlideConfig, this.slideConfig);\n\n    this.galleryServiceNavigateSubscription = this.galleryService.navigate.subscribe((payload: InternalGalleryPayload) => {\n      if (!payload) {\n        return;\n      }\n      // if galleryId is not valid OR galleryId is related to another instance and not this one\n      if (payload.galleryId === undefined || payload.galleryId < 0 || payload.galleryId !== this.id) {\n        return;\n      }\n      // if image index is not valid\n      if (payload.index < 0 || payload.index > this.images.length) {\n        return;\n      }\n      this.showModalGallery(payload.index, true);\n    });\n\n    this.galleryServiceCloseSubscription = this.galleryService.close.subscribe((galleryId: number) => {\n      if (galleryId < 0 || this.id !== galleryId) {\n        return;\n      }\n      this.closeGallery(Action.NORMAL, true);\n    });\n\n    this.galleryServiceUpdateSubscription = this.galleryService.update.subscribe((payload: InternalGalleryPayload) => {\n      if (!payload) {\n        return;\n      }\n      // if galleryId is not valid OR galleryId is related to another instance and not this one\n      if (payload.galleryId === undefined || payload.galleryId < 0 || payload.galleryId !== this.id) {\n        return;\n      }\n      // if either image index or image are not valid\n      if (payload.index < 0 || payload.index > this.images.length || !payload.image) {\n        return;\n      }\n      const currentIndex: number = getIndex(payload.image, this.images);\n      this.images = this.images.map((image: InternalLibImage, index: number) => {\n        if (image.id === payload.index) {\n          return <InternalLibImage>payload.image;\n        }\n        return image;\n      });\n      if (currentIndex === payload.index) {\n        this.currentImage = this.images[payload.index];\n      }\n      this.changeDetectorRef.markForCheck();\n    });\n\n    this.galleryServiceAutoPlaySubscription = this.galleryService.autoPlay.subscribe((payload: InternalGalleryPayload) => {\n      // if galleryId is not valid OR galleryId is related to another instance and not this one\n      if (payload.galleryId === undefined || payload.galleryId < 0 || payload.galleryId !== this.id) {\n        return;\n      }\n      this.configSlide.playConfig.autoPlay = payload.result;\n    });\n  }\n\n  /**\n   * Method called by custom upper buttons.\n   * @param ButtonEvent event payload\n   */\n  onCustomEmit(event: ButtonEvent) {\n    const eventToEmit: ButtonEvent = this.getButtonEventToEmit(event);\n    this.buttonBeforeHook.emit(eventToEmit);\n    // console.log('on onCustomEmit', eventToEmit);\n    this.buttonAfterHook.emit(eventToEmit);\n  }\n\n  // TODO implement on refresh\n  // /**\n  //  * Method called by the refresh upper button.\n  //  * STILL NOT IMPLEMENTED, SO DON'T USE IT\n  //  * @param ButtonEvent event payload\n  //  */\n  // onRefresh(event: ButtonEvent) {\n  //   const eventToEmit: ButtonEvent = this.getButtonEventToEmit(event);\n  //\n  //   this.buttonBeforeHook.emit(eventToEmit);\n  //   // console.log('TODO implement on refresh inside the library', eventToEmit);\n  //\n  //   this.currentImage = Object.assign({}, this.currentImage, { previouslyLoaded: false });\n  //\n  //   // TODO add logic to hide and show the current image\n  //\n  //   // console.log('onRefresh', this.currentImage);\n  //\n  //   // const indexNum: number = this.currentImageComponent.getIndex();\n  //\n  //   // this.images = this.images.map((val: InternalLibImage, index: number) => {\n  //   //   if (index !== 2) {\n  //   //     return val;\n  //   //   } else {\n  //   //     const img: InternalLibImage = Object.assign({}, val, {previouslyLoaded: false});\n  //   //     return img;\n  //   //   }\n  //   // });\n  //   //\n  //   // this.closeGallery();\n  //   // this.showModalGallery(2);\n  //\n  //   this.buttonAfterHook.emit(eventToEmit);\n  // }\n\n  // /**\n  //  * Method called by the rotate upper button.\n  //  * @param ButtonEvent event payload\n  //  */\n  // onRotate(event: ButtonEvent) {\n  //   const eventToEmit: ButtonEvent = this.getButtonEventToEmit(event);\n  //   this.buttonBeforeHook.emit(eventToEmit);\n  //\n  //   // TODO implement rotation logic\n  //\n  //   this.buttonAfterHook.emit(eventToEmit);\n  // }\n\n  /**\n   * Method called by the full-screen upper button.\n   * @param ButtonEvent event payload\n   */\n  onFullScreen(event: ButtonEvent) {\n    const eventToEmit: ButtonEvent = this.getButtonEventToEmit(event);\n    this.buttonBeforeHook.emit(eventToEmit);\n\n    const doc: any = <any>document;\n    const docEl: any = <any>document.documentElement;\n\n    const fullscreenDisabled: boolean = !doc.fullscreenElement && !doc.webkitFullscreenElement && !doc.mozFullScreenElement && !doc.msFullscreenElement;\n\n    if (fullscreenDisabled) {\n      if (docEl.requestFullscreen) {\n        docEl.requestFullscreen();\n      } else if (docEl.webkitRequestFullscreen) {\n        docEl.webkitRequestFullscreen();\n      } else if (docEl.mozRequestFullScreen) {\n        docEl.mozRequestFullScreen();\n      } else if (docEl.msRequestFullscreen) {\n        docEl.msRequestFullscreen();\n      }\n    } else {\n      if (doc.exitFullscreen) {\n        doc.exitFullscreen();\n      } else if (doc.msExitFullscreen) {\n        doc.msExitFullscreen();\n      } else if (doc.mozCancelFullScreen) {\n        doc.mozCancelFullScreen();\n      } else if (doc.webkitExitFullscreen) {\n        doc.webkitExitFullscreen();\n      }\n    }\n\n    this.buttonAfterHook.emit(eventToEmit);\n  }\n\n  /**\n   * Method called by the delete upper button.\n   * @param ButtonEvent event payload\n   */\n  onDelete(event: ButtonEvent) {\n    const eventToEmit: ButtonEvent = this.getButtonEventToEmit(event);\n    this.buttonBeforeHook.emit(eventToEmit);\n\n    if (this.images.length === 1) {\n      this.closeGallery();\n    }\n\n    const imageIndexToDelete: number = this.currentImageComponent.getIndexToDelete(event.image);\n    if (imageIndexToDelete === this.images.length - 1) {\n      // last image\n      this.currentImageComponent.prevImage();\n    } else {\n      this.currentImageComponent.nextImage();\n    }\n\n    this.buttonAfterHook.emit(eventToEmit);\n  }\n\n  /**\n   * Method called by the navigate upper button.\n   * @param ButtonEvent event payload\n   */\n  onNavigate(event: ButtonEvent) {\n    const eventToEmit: ButtonEvent = this.getButtonEventToEmit(event);\n    this.buttonBeforeHook.emit(eventToEmit);\n    // To support SSR\n    if (isPlatformBrowser(this.platformId)) {\n      if (eventToEmit.image && eventToEmit.image.modal.extUrl) {\n        // where I should open this link? The current tab or another one?\n        if (eventToEmit.button && eventToEmit.button.extUrlInNewTab) {\n          // in this case I should use target _blank to open the url in a new tab, however these is a security issue.\n          // Prevent Reverse Tabnabbing's attacks (https://www.owasp.org/index.php/Reverse_Tabnabbing)\n          // Some resources:\n          // - https://www.owasp.org/index.php/HTML5_Security_Cheat_Sheet#Tabnabbing\n          // - https://medium.com/@jitbit/target-blank-the-most-underestimated-vulnerability-ever-96e328301f4c\n          // - https://developer.mozilla.org/en-US/docs/Web/API/Window/open\n          const newWindow = window.open(eventToEmit.image.modal.extUrl, 'noopener,noreferrer,');\n          newWindow.opener = null; // required to prevent security issues\n        } else {\n          window.location.href = eventToEmit.image.modal.extUrl;\n        }\n      }\n    }\n    this.buttonAfterHook.emit(eventToEmit);\n  }\n\n  /**\n   * Method called by the download upper button.\n   * @param ButtonEvent event payload\n   */\n  onDownload(event: ButtonEvent) {\n    const eventToEmit: ButtonEvent = this.getButtonEventToEmit(event);\n    this.buttonBeforeHook.emit(eventToEmit);\n    this.downloadImage();\n    this.buttonAfterHook.emit(eventToEmit);\n  }\n\n  /**\n   * Method called by the close upper button.\n   * @param ButtonEvent event payload\n   * @param Action action that triggered the close method. `Action.NORMAL` by default\n   */\n  onCloseGallery(event: ButtonEvent, action: Action = Action.NORMAL) {\n    const eventToEmit: ButtonEvent = this.getButtonEventToEmit(event);\n    this.buttonBeforeHook.emit(eventToEmit);\n    this.closeGallery(action);\n    this.buttonAfterHook.emit(eventToEmit);\n  }\n\n  /**\n   * Method to close the modal gallery specifying the action.\n   * It also reset the `keyboardService` to prevent multiple listeners.\n   * @param Action action type. `Action.NORMAL` by default\n   * @param boolean isCalledByService is true if called by gallery.service, otherwise false\n   */\n  closeGallery(action: Action = Action.NORMAL, isCalledByService: boolean = false) {\n    this.close.emit(new ImageModalEvent(action, true));\n    this.opened = false;\n    this.keyboardService.reset();\n\n    // shows scrollbar\n    document.body.style.overflow = 'visible';\n\n    if (isCalledByService) {\n      // the following is required, otherwise the view will not be updated\n      // this happens only if called by gallery.service\n      this.changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Method called when you click on an image of your plain (or inline) gallery.\n   * @param number index of the clicked image\n   */\n  onShowModalGallery(index: number) {\n    this.showModalGallery(index);\n  }\n\n  /**\n   * Method to show the modal gallery displaying the image with\n   * the index specified as input parameter.\n   * It will also register a new `keyboardService` to catch keyboard's events to download the current\n   * image with keyboard's shortcuts. This service, will be removed either when modal gallery component\n   * will be destroyed or when the gallery is closed invoking the `closeGallery` method.\n   * @param number index of the image to show\n   * @param boolean isCalledByService is true if called by gallery.service, otherwise false\n   */\n  showModalGallery(index: number, isCalledByService: boolean = false) {\n    // hides scrollbar\n    document.body.style.overflow = 'hidden';\n\n    this.keyboardService.add((event: KeyboardEvent, combo: string) => {\n      if (event.preventDefault) {\n        event.preventDefault();\n      } else {\n        // internet explorer\n        event.returnValue = false;\n      }\n      this.downloadImage();\n    });\n\n    this.opened = true;\n    this.currentImage = this.images[index];\n\n    // emit a new ImageModalEvent with the index of the current image\n    this.show.emit(new ImageModalEvent(Action.LOAD, index + 1));\n\n    if (isCalledByService) {\n      // the following is required, otherwise the view will not be updated\n      // this happens only if called by gallery.service\n      this.changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Method called when the image changes and used to update the `currentImage` object.\n   * @param ImageModalEvent event payload\n   */\n  onChangeCurrentImage(event: ImageModalEvent) {\n    const newIndex: number = <number>event.result;\n    if (newIndex < 0 || newIndex >= this.images.length) {\n      return;\n    }\n\n    this.currentImage = this.images[newIndex];\n\n    // emit first/last event based on newIndex value\n    this.emitBoundaryEvent(event.action, newIndex);\n\n    // emit current visible image index\n    this.show.emit(new ImageModalEvent(event.action, newIndex + 1));\n  }\n\n  isPlainGalleryVisible(): boolean {\n    if (this.plainGalleryConfig && this.plainGalleryConfig.layout && this.plainGalleryConfig.layout instanceof AdvancedLayout) {\n      return !this.plainGalleryConfig.layout.hideDefaultPlainGallery;\n    }\n    return true;\n  }\n\n  /**\n   * Method called when you click 'outside' (i.e. on the semi-transparent background)\n   * to close the modal gallery if `enableCloseOutside` is true.\n   * @param boolean event payload. True to close the modal gallery, false otherwise\n   */\n  onClickOutside(event: boolean) {\n    if (event && this.enableCloseOutside) {\n      this.closeGallery(Action.CLICK);\n    }\n  }\n\n  /**\n   * Method called when an image is loaded and the loading spinner has gone.\n   * It sets the previouslyLoaded flag inside the Image to hide loading spinner when displayed again.\n   * @param ImageLoadEvent event payload\n   */\n  onImageLoad(event: ImageLoadEvent) {\n    // console.log('modal-image onImageLoad', event);\n    // console.log('modal-image onImageLoad images before', this.images);\n\n    // sets as previously loaded the image with index specified by `event.status`\n    this.images = this.images.map((img: InternalLibImage) => {\n      if (img && img.id === event.id) {\n        return Object.assign({}, img, { previouslyLoaded: event.status });\n      }\n      return img;\n    });\n\n    // console.log('modal-image onImageLoad images after', this.images);\n  }\n\n  /**\n   * Method called when a dot is clicked and used to update the current image.\n   * @param number index of the clicked dot\n   */\n  onClickDot(index: number) {\n    this.currentImage = this.images[index];\n  }\n\n  /**\n   * Method called when an image preview is clicked and used to update the current image.\n   * @param Image preview image\n   */\n  onClickPreview(event: ImageModalEvent) {\n    this.onChangeCurrentImage(event);\n  }\n\n  // onClickArrow(event: InteractionEvent) {\n  //   // TODO validate before to emit\n  //   this.arrow.emit(event);\n  // }\n\n  /**\n   * Method to download the current image, only if `downloadable` is true.\n   * It contains also a logic to enable downloading features also for IE11.\n   */\n  downloadImage() {\n    if (this.currentImageConfig && !this.currentImageConfig.downloadable) {\n      return;\n    }\n    // If IE11 or Microsoft Edge use msSaveBlob(...)\n    if (this.isIEorEdge()) {\n      // I cannot use fetch API because IE11 doesn't support it,\n      // so I have to switch to XMLHttpRequest\n      this.downloadImageOnlyIEorEdge();\n    } else {\n      // for all other browsers\n      this.downloadImageAllBrowsers();\n    }\n  }\n\n  /**\n   * Method to cleanup resources. In fact, this will reset keyboard's service.\n   * This is an Angular's lifecycle hook that is called when this component is destroyed.\n   */\n  ngOnDestroy() {\n    this.keyboardService.reset();\n\n    this.idValidatorService.remove(this.id);\n\n    if (this.galleryServiceNavigateSubscription) {\n      this.galleryServiceNavigateSubscription.unsubscribe();\n    }\n    if (this.galleryServiceCloseSubscription) {\n      this.galleryServiceCloseSubscription.unsubscribe();\n    }\n    if (this.galleryServiceUpdateSubscription) {\n      this.galleryServiceUpdateSubscription.unsubscribe();\n    }\n    if (this.galleryServiceAutoPlaySubscription) {\n      this.galleryServiceAutoPlaySubscription.unsubscribe();\n    }\n  }\n\n  /**\n   * Private method to download the current image for all browsers except for IE11.\n   */\n  private downloadImageAllBrowsers() {\n    const link = document.createElement('a');\n    link.href = <string>this.currentImage.modal.img;\n    link.setAttribute('download', this.getFileName(this.currentImage));\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  }\n\n  /**\n   * Private method to download the current image only for IE11 using\n   * custom javascript's methods available only on IE.\n   */\n  private downloadImageOnlyIEorEdge() {\n    if (isPlatformBrowser(this.platformId)) {\n      const req = new XMLHttpRequest();\n      req.open('GET', <string>this.currentImage.modal.img, true);\n      req.responseType = 'arraybuffer';\n      req.onload = event => {\n        const blob = new Blob([req.response], { type: 'image/png' });\n        window.navigator.msSaveBlob(blob, this.getFileName(this.currentImage));\n      };\n      req.send();\n    }\n  }\n\n  /**\n   * Private method to get the `ButtonEvent` to emit, merging the input `ButtonEvent`\n   * with the current image.\n   * @param ButtonEvent event payload to return\n   * @returns ButtonEvent event payload with the current image included\n   */\n  private getButtonEventToEmit(event: ButtonEvent): ButtonEvent {\n    return Object.assign(event, { image: this.currentImage });\n  }\n\n  /**\n   * Private method to get the file name from an input path.\n   * This is used either to get the image's name from its path or from the Image itself,\n   * if specified as 'downloadFileName' by the user.\n   * @param Image image to extract its file name\n   * @returns string string file name of the input image.\n   */\n  private getFileName(image: Image): string {\n    if (!image.modal.downloadFileName || image.modal.downloadFileName.length === 0) {\n      return (<string>this.currentImage.modal.img).replace(/^.*[\\\\\\/]/, '');\n    } else {\n      return image.modal.downloadFileName;\n    }\n  }\n\n  /**\n   * Private method to initialize `images` as array of `Image`s.\n   * Also, it will emit ImageowmodaModalEvent to say that images are loaded.\n   */\n  private initImages() {\n    // I'm not cloning the array, but I'm doing this to cast it to an array of InternalLibImages\n    this.images = <InternalLibImage[]>this.modalImages;\n    this.hasData.emit(new ImageModalEvent(Action.LOAD, true));\n    this.showGallery = this.images.length > 0;\n  }\n\n  /**\n   * Private method to emit events when either the last or the first image are visible.\n   * @param action Enum of type Action that represents the source of the event that changed the\n   *  current image to the first one or the last one.\n   * @param indexToCheck is the index number of the image (the first or the last one).\n   */\n  private emitBoundaryEvent(action: Action, indexToCheck: number) {\n    // to emit first/last event\n    switch (indexToCheck) {\n      case 0:\n        this.firstImage.emit(new ImageModalEvent(action, true));\n        break;\n      case this.images.length - 1:\n        this.lastImage.emit(new ImageModalEvent(action, true));\n        break;\n    }\n  }\n\n  /**\n   * Private method to check if this library is running on\n   * Microsoft browsers or not (i.e. it detects both IE11 and Edge)\n   * supporting also Server-Side Rendering.\n   * Inspired by https://msdn.microsoft.com/it-it/library/hh779016(v=vs.85).aspx\n   * @returns any the result\n   */\n  private isIEorEdge(): any {\n    if (isPlatformBrowser(this.platformId)) {\n      // if both Blob constructor and msSaveOrOpenBlob are supported by the current browser\n      return window.Blob && window.navigator.msSaveOrOpenBlob;\n    }\n    if (isPlatformServer(this.platformId)) {\n      // server only\n      return true;\n    }\n  }\n}\n","/*\n The MIT License (MIT)\n\n Copyright (c) 2017-2018 Stefano Cappa (Ks89)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NON INFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n */\n\n// The idea to create a carousel with two Subjects came from ng-bootstrap\n// So a big thank you to the ng-bootstrap team for the interesting implementation that I used here with some customizations.\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n  PLATFORM_ID,\n  SimpleChange,\n  SimpleChanges\n} from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\nimport { Subject, timer } from 'rxjs';\nimport { filter, map, switchMap, takeUntil } from 'rxjs/operators';\n\nimport { AccessibleComponent } from '../accessible.component';\n\nimport { AccessibilityConfig } from '../../model/accessibility.interface';\nimport { Image, ImageEvent, ImageModalEvent } from '../../model/image.class';\nimport { Action } from '../../model/action.enum';\nimport { getIndex } from '../../utils/image.util';\nimport { NEXT, PREV } from '../../utils/user-input.util';\nimport { Description, DescriptionStrategy, DescriptionStyle } from '../../model/description.interface';\nimport { DotsConfig } from '../../model/dots-config.interface';\nimport { KS_DEFAULT_ACCESSIBILITY_CONFIG } from '../accessibility-default';\nimport { GalleryService } from '../../services/gallery.service';\nimport { AdvancedLayout, PlainGalleryConfig, PlainGalleryStrategy } from '../../model/plain-gallery-config.interface';\nimport { PlayConfig } from '../../model/play-config.interface';\nimport { CarouselConfig } from '../../model/carousel-config.interface';\nimport { CarouselImageConfig } from '../../model/carousel-image-config.interface';\nimport { DomSanitizer, SafeStyle } from '@angular/platform-browser';\nimport { CarouselPreviewConfig } from '../../model/carousel-preview-config.interface';\n\n/**\n * Component with configurable inline/plain carousel.\n */\n@Component({\n  selector: 'ks-carousel',\n  styleUrls: ['carousel.scss', '../image-arrows.scss'],\n  templateUrl: 'carousel.html',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CarouselComponent extends AccessibleComponent implements OnInit, AfterContentInit, OnDestroy, OnChanges {\n  /**\n   * Attribute to set ariaLabel of the host component\n   */\n  @HostBinding('attr.aria-label')\n  ariaLabel = `Carousel`;\n  /**\n   * Unique id (>=0) of the current instance of the carousel. This is useful when you are using\n   * the carousel's feature to open modal gallery.\n   */\n  @Input()\n  id: number;\n  /**\n   * Array of `InternalLibImage` that represent the model of this library with all images,\n   * thumbs and so on.\n   */\n  @Input()\n  images: Image[];\n  /**\n   * Object of type `CarouselConfig` to init CarouselComponent's features.\n   * For instance, it contains parameters to change the style, how it navigates and so on.\n   */\n  @Input()\n  carouselConfig: CarouselConfig;\n  /**\n   * Object of type `PlayConfig` to init CarouselComponent's features about auto-play.\n   * For instance, it contains parameters to enable/disable autoPlay, interval and so on.\n   */\n  @Input()\n  playConfig: PlayConfig;\n  /**\n   * Interface to configure current image in carousel.\n   * For instance you can change the description.\n   */\n  @Input()\n  carouselImageConfig: CarouselImageConfig;\n  /**\n   * Object of type `DotsConfig` to init DotsComponent's features.\n   * For instance, it contains a param to show/hide this component.\n   */\n  @Input()\n  dotsConfig: DotsConfig = { visible: true };\n  /**\n   * Object of type `CarouselPreviewConfig` to init PreviewsComponent's features.\n   * For instance, it contains a param to show/hide previews, change sizes and so on.\n   */\n  @Input()\n  previewConfig: CarouselPreviewConfig;\n  /**\n   * boolean to enable/disable infinite sliding. Enabled by default.\n   */\n  @Input()\n  infinite = true;\n  /**\n   * Object of type `AccessibilityConfig` to init custom accessibility features.\n   * For instance, it contains titles, alt texts, aria-labels and so on.\n   */\n  @Input()\n  accessibilityConfig: AccessibilityConfig = KS_DEFAULT_ACCESSIBILITY_CONFIG;\n\n  /**\n   * Output to emit an event when an image is changed.\n   */\n  @Output()\n  show: EventEmitter<ImageModalEvent> = new EventEmitter<ImageModalEvent>();\n  /**\n   * Output to emit an event when the current image is the first one.\n   */\n  @Output()\n  firstImage: EventEmitter<ImageModalEvent> = new EventEmitter<ImageModalEvent>();\n  /**\n   * Output to emit an event when the current image is the last one.\n   */\n  @Output()\n  lastImage: EventEmitter<ImageModalEvent> = new EventEmitter<ImageModalEvent>();\n\n  /**\n   * Enum of type `Action` that represents a mouse click on a button.\n   * Declared here to be used inside the template.\n   */\n  clickAction: Action = Action.CLICK;\n  /**\n   * Enum of type `Action` that represents a keyboard action.\n   * Declared here to be used inside the template.\n   */\n  keyboardAction: Action = Action.KEYBOARD;\n  /**\n   * `Image` that is visible right now.\n   */\n  currentImage: Image;\n  /**\n   * Object of type `CarouselConfig` exposed to the template. This field is initialized\n   * applying transformations, default values and so on to the input of the same type.\n   */\n  configCarousel: CarouselConfig;\n  /**\n   * Object of type `PlayConfig` exposed to the template. This field is initialized\n   * applying transformations, default values and so on to the input of the same type.\n   */\n  configPlay: PlayConfig;\n  /**\n   * Object of type `CarouselImageConfig` exposed to the template. This field is initialized\n   * applying transformations, default values and so on to the input of the same type.\n   */\n  configCurrentImageCarousel: CarouselImageConfig;\n  /**\n   * Object of type `DotsConfig` exposed to the template. This field is initialized\n   * applying transformations, default values and so on to the input of the same type.\n   */\n  configDots: DotsConfig;\n  /**\n   * Boolean that it's true when you are watching the first image (currently visible).\n   * False by default\n   */\n  isFirstImage = false;\n  /**\n   * Boolean that it's true when you are watching the last image (currently visible).\n   * False by default\n   */\n  isLastImage = false;\n  /**\n   * Object of type `PlainGalleryConfig` to force ks-modal-gallery to hide plain-gallery\n   */\n  plainGalleryHidden: PlainGalleryConfig = {\n    strategy: PlainGalleryStrategy.CUSTOM,\n    layout: new AdvancedLayout(-1, true)\n  };\n\n  /**\n   * Subject to play the carousel.\n   */\n  private start$ = new Subject<void>();\n  /**\n   * Subject to stop the carousel.\n   */\n  private stop$ = new Subject<void>();\n\n  /**\n   * Private object without type to define all swipe actions used by hammerjs.\n   */\n  private SWIPE_ACTION = {\n    LEFT: 'swipeleft',\n    RIGHT: 'swiperight',\n    UP: 'swipeup',\n    DOWN: 'swipedown'\n  };\n\n  /**\n   * Listener to stop the gallery when the mouse pointer is over the current image.\n   */\n  @HostListener('mouseenter')\n  onMouseEnter() {\n    if (!this.configPlay.pauseOnHover) {\n      return;\n    }\n    this.stopCarousel();\n  }\n\n  /**\n   * Listener to play the gallery when the mouse pointer leave the current image.\n   */\n  @HostListener('mouseleave')\n  onMouseLeave() {\n    if (!this.configPlay.pauseOnHover || !this.configPlay.autoPlay) {\n      return;\n    }\n    this.playCarousel();\n  }\n\n  /**\n   * Listener to navigate carousel images with keyboard (left).\n   */\n  @HostListener('keydown.arrowLeft')\n  onKeyDownLeft() {\n    if (!this.configCarousel.keyboardEnable) {\n      return;\n    }\n    this.prevImage();\n  }\n\n  /**\n   * Listener to navigate carousel images with keyboard (right).\n   */\n  @HostListener('keydown.arrowRight')\n  onKeyDownLRight() {\n    if (!this.configCarousel.keyboardEnable) {\n      return;\n    }\n    this.nextImage();\n  }\n\n  constructor(\n    @Inject(PLATFORM_ID) private _platformId,\n    private _ngZone: NgZone,\n    private galleryService: GalleryService,\n    private ref: ChangeDetectorRef,\n    // sanitizer is used only to sanitize style before add it to background property when legacyIE11Mode is enabled\n    private sanitizer: DomSanitizer\n  ) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // handle changes of dotsConfig\n    const configDotsChange: SimpleChange = changes.dotsConfig;\n    if (configDotsChange && configDotsChange.currentValue !== configDotsChange.previousValue) {\n      this.configDots = configDotsChange.currentValue;\n    }\n    // handle changes of carouselConfig\n    const carouselConfigChange: SimpleChange = changes.carouselConfig;\n    if (carouselConfigChange && carouselConfigChange.currentValue !== carouselConfigChange.previousValue) {\n      this.configCarousel = carouselConfigChange.currentValue;\n    }\n    // handle changes of playConfig starting/stopping the carousel accordingly\n    const playConfigChange: SimpleChange = changes.playConfig;\n    if (playConfigChange) {\n      const playConfigChangePrev: PlayConfig = playConfigChange.previousValue;\n      const playConfigChangeCurr: PlayConfig = playConfigChange.currentValue;\n      if (playConfigChangePrev !== playConfigChangeCurr) {\n        this.configPlay = playConfigChange.currentValue;\n        // if autoplay is enabled, and this is not the\n        // first change (to prevent multiple starts at the beginning)\n        if (playConfigChangeCurr.autoPlay && !playConfigChange.isFirstChange()) {\n          this.start$.next();\n        } else {\n          this.stopCarousel();\n        }\n      }\n    }\n  }\n\n  ngOnInit() {\n    this.currentImage = this.images[0];\n\n    const defaultDescriptionStyle: DescriptionStyle = {\n      bgColor: 'rgba(0, 0, 0, .5)',\n      textColor: 'white',\n      marginTop: '0px',\n      marginBottom: '0px',\n      marginLeft: '0px',\n      marginRight: '0px'\n    };\n    const defaultDescription: Description = {\n      strategy: DescriptionStrategy.ALWAYS_HIDDEN,\n      imageText: 'Image ',\n      numberSeparator: '/',\n      beforeTextDescription: ' - ',\n      style: defaultDescriptionStyle\n    };\n    const defaultCurrentImageConfig: CarouselImageConfig = {\n      description: defaultDescription,\n      invertSwipe: false\n    };\n    const defaultCurrentCarouselConfig: CarouselConfig = {\n      maxWidth: '100%',\n      maxHeight: '400px',\n      showArrows: true,\n      objectFit: 'cover',\n      keyboardEnable: true,\n      modalGalleryEnable: false,\n      legacyIE11Mode: false\n    };\n    const defaultCurrentCarouselPlay: PlayConfig = {\n      autoPlay: true,\n      interval: 5000,\n      pauseOnHover: true\n    };\n\n    this.configCurrentImageCarousel = Object.assign({}, defaultCurrentImageConfig, this.carouselImageConfig);\n    this.configCurrentImageCarousel.description = Object.assign({}, defaultDescription, this.configCurrentImageCarousel.description);\n\n    const defaultConfig: DotsConfig = { visible: true };\n    this.configDots = Object.assign(defaultConfig, this.dotsConfig);\n\n    this.configCarousel = Object.assign({}, defaultCurrentCarouselConfig, this.carouselConfig);\n    this.configPlay = Object.assign({}, defaultCurrentCarouselPlay, this.playConfig);\n\n    // check values\n    if (this.configPlay.interval <= 0) {\n      throw new Error(`Carousel's interval must be a number >= 0`);\n    }\n\n    this.manageSlideConfig();\n  }\n\n  ngAfterContentInit() {\n    // interval doesn't play well with SSR and protractor,\n    // so we should run it in the browser and outside Angular\n    if (isPlatformBrowser(this._platformId)) {\n      this._ngZone.runOutsideAngular(() => {\n        this.start$\n          .pipe(\n            map(() => this.configPlay.interval),\n            filter(interval => interval > 0),\n            switchMap(interval => timer(interval).pipe(takeUntil(this.stop$)))\n          )\n          .subscribe(() =>\n            this._ngZone.run(() => {\n              if (this.configPlay.autoPlay) {\n                this.nextImage();\n              }\n              this.ref.markForCheck();\n            })\n          );\n\n        this.start$.next();\n      });\n    }\n  }\n\n  /**\n   * Method used in template to sanitize an url when you need legacyIE11Mode.\n   * In this way you can set an url as background of a div.\n   * @param unsafeStyle is a string and represents the url to sanitize.\n   * @returns a SafeStyle object that can be used in template without problems.\n   */\n  sanitizeUrlBgStyle(unsafeStyle: string): SafeStyle {\n    // Method used only to sanitize background-image style before add it to background property when legacyIE11Mode is enabled\n    return this.sanitizer.bypassSecurityTrustStyle('url(' + unsafeStyle + ')');\n  }\n\n  /**\n   * Method called when a dot is clicked and used to update the current image.\n   * @param number index of the clicked dot\n   */\n  onClickDot(index: number) {\n    this.changeCurrentImage(this.images[index], Action.NORMAL);\n  }\n\n  /**\n   * Method called by events from both keyboard and mouse on a navigation arrow.\n   * @param string direction of the navigation that can be either 'next' or 'prev'\n   * @param KeyboardEvent | MouseEvent event payload\n   * @param Action action that triggered the event or `Action.NORMAL` if not provided\n   */\n  onNavigationEvent(direction: string, event: KeyboardEvent, action: Action = Action.NORMAL) {\n    const result: number = super.handleNavigationEvent(direction, event);\n    if (result === NEXT) {\n      this.nextImage(action);\n    } else if (result === PREV) {\n      this.prevImage(action);\n    }\n  }\n\n  /**\n   * Method triggered when you click on the current image.\n   * Also, if modalGalleryEnable is true, you can open the modal-gallery.\n   */\n  onClickCurrentImage() {\n    if (!this.configCarousel.modalGalleryEnable) {\n      return;\n    }\n    const index = getIndex(this.currentImage, this.images);\n    this.galleryService.openGallery(this.id, index);\n  }\n\n  /**\n   * Method to get the image description based on input params.\n   * If you provide a full description this will be the visible description, otherwise,\n   * it will be built using the `Description` object, concatenating its fields.\n   * @param Image image to get its description. If not provided it will be the current image\n   * @returns String description of the image (or the current image if not provided)\n   * @throws an Error if description isn't available\n   */\n  getDescriptionToDisplay(image: Image = this.currentImage): string {\n    if (!this.configCurrentImageCarousel || !this.configCurrentImageCarousel.description) {\n      throw new Error('Description input must be a valid object implementing the Description interface');\n    }\n\n    const imageWithoutDescription: boolean = !image.modal || !image.modal.description || image.modal.description === '';\n\n    switch (this.configCurrentImageCarousel.description.strategy) {\n      case DescriptionStrategy.HIDE_IF_EMPTY:\n        return imageWithoutDescription ? '' : image.modal.description + '';\n      case DescriptionStrategy.ALWAYS_HIDDEN:\n        return '';\n      default:\n        // ----------- DescriptionStrategy.ALWAYS_VISIBLE -----------------\n        return this.buildTextDescription(image, imageWithoutDescription);\n    }\n  }\n\n  /**\n   * Method used by Hammerjs to support touch gestures (you can also invert the swipe direction with configCurrentImage.invertSwipe).\n   * @param action String that represent the direction of the swipe action. 'swiperight' by default.\n   */\n  swipe(action = this.SWIPE_ACTION.RIGHT) {\n    switch (action) {\n      case this.SWIPE_ACTION.RIGHT:\n        if (this.configCurrentImageCarousel.invertSwipe) {\n          this.prevImage(Action.SWIPE);\n        } else {\n          this.nextImage(Action.SWIPE);\n        }\n        break;\n      case this.SWIPE_ACTION.LEFT:\n        if (this.configCurrentImageCarousel.invertSwipe) {\n          this.nextImage(Action.SWIPE);\n        } else {\n          this.prevImage(Action.SWIPE);\n        }\n        break;\n      // case this.SWIPE_ACTION.UP:\n      //   break;\n      // case this.SWIPE_ACTION.DOWN:\n      //   break;\n    }\n  }\n\n  /**\n   * Method to go back to the previous image.\n   * @param action Enum of type `Action` that represents the source\n   *  action that moved back to the previous image. `Action.NORMAL` by default.\n   */\n  prevImage(action: Action = Action.NORMAL) {\n    // check if prevImage should be blocked\n    if (this.isPreventSliding(0)) {\n      return;\n    }\n    this.changeCurrentImage(this.getPrevImage(), action);\n\n    this.manageSlideConfig();\n\n    this.start$.next();\n  }\n\n  /**\n   * Method to go back to the previous image.\n   * @param action Enum of type `Action` that represents the source\n   *  action that moved to the next image. `Action.NORMAL` by default.\n   */\n  nextImage(action: Action = Action.NORMAL) {\n    // check if nextImage should be blocked\n    if (this.isPreventSliding(this.images.length - 1)) {\n      return;\n    }\n    this.changeCurrentImage(this.getNextImage(), action);\n\n    this.manageSlideConfig();\n\n    this.start$.next();\n  }\n\n  /**\n   * Method used in the template to track ids in ngFor.\n   * @param number index of the array\n   * @param Image item of the array\n   * @returns number the id of the item\n   */\n  trackById(index: number, item: Image): number {\n    return item.id;\n  }\n\n  /**\n   * Method called when an image preview is clicked and used to update the current image.\n   * @param event an ImageEvent object with the relative action and the index of the clicked preview.\n   */\n  onClickPreview(event: ImageEvent) {\n    const imageFound: Image = this.images[<number>event.result];\n    if (!!imageFound) {\n      this.manageSlideConfig();\n      this.changeCurrentImage(<Image>imageFound, event.action);\n    }\n  }\n\n  /**\n   * Method to play carousel.\n   */\n  playCarousel() {\n    this.start$.next();\n  }\n\n  /**\n   * Stops the carousel from cycling through items.\n   */\n  stopCarousel() {\n    this.stop$.next();\n  }\n\n  // TODO remove this because duplicated\n  /**\n   * Method to get `alt attribute`.\n   * `alt` specifies an alternate text for an image, if the image cannot be displayed.\n   * @param Image image to get its alt description. If not provided it will be the current image\n   * @returns String alt description of the image (or the current image if not provided)\n   */\n  getAltDescriptionByImage(image: Image = this.currentImage): string {\n    if (!image) {\n      return '';\n    }\n    return image.modal && image.modal.description ? image.modal.description : `Image ${getIndex(image, this.images) + 1}`;\n  }\n\n  // TODO remove this because duplicated\n  /**\n   * Method to get the title attributes based on descriptions.\n   * This is useful to prevent accessibility issues, because if DescriptionStrategy is ALWAYS_HIDDEN,\n   * it prevents an empty string as title.\n   * @param Image image to get its description. If not provided it will be the current image\n   * @returns String title of the image based on descriptions\n   * @throws an Error if description isn't available\n   */\n  getTitleToDisplay(image: Image = this.currentImage): string {\n    if (!this.configCurrentImageCarousel || !this.configCurrentImageCarousel.description) {\n      throw new Error('Description input must be a valid object implementing the Description interface');\n    }\n    const imageWithoutDescription: boolean = !image.modal || !image.modal.description || image.modal.description === '';\n    const description: string = this.buildTextDescription(image, imageWithoutDescription);\n    return description;\n  }\n\n  /**\n   * Method to reset carousel (force image with index 0 to be the current image and re-init also previews)\n   */\n  // temporary removed because never tested\n  // reset() {\n  //   if (this.configPlay && this.configPlay.autoPlay) {\n  //     this.stopCarousel();\n  //   }\n  //   this.currentImage = this.images[0];\n  //   this.handleBoundaries(0);\n  //   if (this.configPlay && this.configPlay.autoPlay) {\n  //     this.playCarousel();\n  //   }\n  //   this.ref.markForCheck();\n  // }\n\n  /**\n   * Method to cleanup resources. In fact, this will stop the carousel.\n   * This is an Angular's lifecycle hook that is called when this component is destroyed.\n   */\n  ngOnDestroy() {\n    this.stopCarousel();\n  }\n\n  /**\n   * Method to change the current image, receiving the new image as input the relative action.\n   * @param image an Image object that represents the new image to set as current.\n   * @param action Enum of type `Action` that represents the source action that triggered the change.\n   */\n  private changeCurrentImage(image: Image, action: Action) {\n    this.currentImage = image;\n    const index: number = getIndex(image, this.images);\n\n    // emit first/last event based on newIndex value\n    this.emitBoundaryEvent(action, index);\n\n    // emit current visible image index\n    this.show.emit(new ImageModalEvent(action, index + 1));\n  }\n\n  /**\n   * Private method to get the next index.\n   * This is necessary because at the end, when you call next again, you'll go to the first image.\n   * That happens because all modal images are shown like in a circle.\n   */\n  private getNextImage(): Image {\n    const currentIndex: number = getIndex(this.currentImage, this.images);\n    let newIndex = 0;\n    if (currentIndex >= 0 && currentIndex < this.images.length - 1) {\n      newIndex = currentIndex + 1;\n    } else {\n      newIndex = 0; // start from the first index\n    }\n    return this.images[newIndex];\n  }\n\n  /**\n   * Private method to get the previous index.\n   * This is necessary because at index 0, when you call prev again, you'll go to the last image.\n   * That happens because all modal images are shown like in a circle.\n   */\n  private getPrevImage(): Image {\n    const currentIndex: number = getIndex(this.currentImage, this.images);\n    let newIndex = 0;\n    if (currentIndex > 0 && currentIndex <= this.images.length - 1) {\n      newIndex = currentIndex - 1;\n    } else {\n      newIndex = this.images.length - 1; // start from the last index\n    }\n    return this.images[newIndex];\n  }\n\n  /**\n   * Private method to build a text description.\n   * This is used also to create titles.\n   * @param Image image to get its description. If not provided it will be the current image.\n   * @param boolean imageWithoutDescription is a boolean that it's true if the image hasn't a 'modal' description.\n   * @returns String description built concatenating image fields with a specific logic.\n   */\n  private buildTextDescription(image: Image, imageWithoutDescription: boolean): string {\n    if (!this.configCurrentImageCarousel || !this.configCurrentImageCarousel.description) {\n      throw new Error('Description input must be a valid object implementing the Description interface');\n    }\n\n    // If customFullDescription use it, otherwise proceed to build a description\n    if (this.configCurrentImageCarousel.description.customFullDescription && this.configCurrentImageCarousel.description.customFullDescription !== '') {\n      return this.configCurrentImageCarousel.description.customFullDescription;\n    }\n\n    const currentIndex: number = getIndex(image, this.images);\n    // If the current image hasn't a description,\n    // prevent to write the ' - ' (or this.description.beforeTextDescription)\n\n    const prevDescription: string = this.configCurrentImageCarousel.description.imageText ? this.configCurrentImageCarousel.description.imageText : '';\n    const midSeparator: string = this.configCurrentImageCarousel.description.numberSeparator\n      ? this.configCurrentImageCarousel.description.numberSeparator\n      : '';\n    const middleDescription: string = currentIndex + 1 + midSeparator + this.images.length;\n\n    if (imageWithoutDescription) {\n      return prevDescription + middleDescription;\n    }\n\n    const currImgDescription: string = image.modal && image.modal.description ? image.modal.description : '';\n    const endDescription: string = this.configCurrentImageCarousel.description.beforeTextDescription + currImgDescription;\n    return prevDescription + middleDescription + endDescription;\n  }\n\n  /**\n   * Private method to update both `isFirstImage` and `isLastImage` based on\n   * the index of the current image.\n   * @param number currentIndex is the index of the current image\n   */\n  private handleBoundaries(currentIndex: number) {\n    if (this.images.length === 1) {\n      this.isFirstImage = true;\n      this.isLastImage = true;\n      return;\n    }\n    switch (currentIndex) {\n      case 0:\n        // execute this only if infinite sliding is disabled\n        this.isFirstImage = true;\n        this.isLastImage = false;\n        break;\n      case this.images.length - 1:\n        // execute this only if infinite sliding is disabled\n        this.isFirstImage = false;\n        this.isLastImage = true;\n        break;\n      default:\n        this.isFirstImage = false;\n        this.isLastImage = false;\n        break;\n    }\n  }\n\n  /**\n   * Private method to manage boundary arrows and sliding.\n   * This is based on the slideConfig input to enable/disable 'infinite sliding'.\n   * @param number index of the visible image\n   */\n  private manageSlideConfig() {\n    let index: number;\n    try {\n      index = getIndex(this.currentImage, this.images);\n    } catch (err) {\n      console.error('Cannot get the current image index in current-image');\n      throw err;\n    }\n\n    if (this.infinite === true) {\n      // enable infinite sliding\n      this.isFirstImage = false;\n      this.isLastImage = false;\n    } else {\n      this.handleBoundaries(index);\n    }\n  }\n\n  /**\n   * Private method to emit events when either the last or the first image are visible.\n   * @param action Enum of type Action that represents the source of the event that changed the\n   *  current image to the first one or the last one.\n   * @param indexToCheck is the index number of the image (the first or the last one).\n   */\n  private emitBoundaryEvent(action: Action, indexToCheck: number) {\n    // to emit first/last event\n    switch (indexToCheck) {\n      case 0:\n        this.firstImage.emit(new ImageModalEvent(action, true));\n        break;\n      case this.images.length - 1:\n        this.lastImage.emit(new ImageModalEvent(action, true));\n        break;\n    }\n  }\n\n  /**\n   * Private method to check if next/prev actions should be blocked.\n   * It checks if slideConfig.infinite === false and if the image index is equals to the input parameter.\n   * If yes, it returns true to say that sliding should be blocked, otherwise not.\n   * @param number boundaryIndex that could be either the beginning index (0) or the last index\n   *  of images (this.images.length - 1).\n   * @returns boolean true if slideConfig.infinite === false and the current index is\n   *  either the first or the last one.\n   */\n  private isPreventSliding(boundaryIndex: number): boolean {\n    return !this.infinite && getIndex(this.currentImage, this.images) === boundaryIndex;\n  }\n}\n","/*\n The MIT License (MIT)\n\n Copyright (c) 2017-2018 Stefano Cappa (Ks89)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NON INFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n  SimpleChange,\n  SimpleChanges\n} from '@angular/core';\nimport { DomSanitizer, SafeStyle } from '@angular/platform-browser';\nimport { BreakpointObserver, Breakpoints, BreakpointState } from '@angular/cdk/layout';\n\nimport { Subscription } from 'rxjs';\n\nimport { AccessibleComponent } from '../../accessible.component';\n\nimport { AccessibilityConfig } from '../../../model/accessibility.interface';\nimport { Image, ImageEvent } from '../../../model/image.class';\nimport { InternalLibImage } from '../../../model/image-internal.class';\nimport { BreakpointsConfig, CarouselPreviewConfig } from '../../../model/carousel-preview-config.interface';\nimport { CarouselConfig } from '../../../model/carousel-config.interface';\n\nimport { NEXT, PREV } from '../../../utils/user-input.util';\nimport { getIndex } from '../../../utils/image.util';\nimport { Action } from '../../../model/action.enum';\n\n/**\n * Component with image previews for carousel\n */\n@Component({\n  selector: 'ks-carousel-previews',\n  styleUrls: ['carousel-previews.scss', '../../previews-arrows.scss'],\n  templateUrl: 'carousel-previews.html',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CarouselPreviewsComponent extends AccessibleComponent implements OnInit, OnChanges, OnDestroy {\n  /**\n   * Variable to change the max-width of the host component\n   */\n  @HostBinding('style.max-width')\n  hostMaxWidth = '100%';\n\n  /**\n   * Variable to set aria-label of the host component\n   */\n  @HostBinding('attr.aria-label')\n  ariaLabel = `Carousel previews`;\n\n  /**\n   * Object of type `CarouselConfig` to init CarouselComponent's features.\n   * For instance, it contains parameters to change the style, how it navigates and so on.\n   */\n  @Input()\n  carouselConfig: CarouselConfig;\n  /**\n   * Object of type `InternalLibImage` that represent the visible image.\n   */\n  @Input()\n  currentImage: InternalLibImage;\n  /**\n   * Array of `InternalLibImage` that represent the model of this library with all images,\n   * thumbs and so on.\n   */\n  @Input()\n  images: InternalLibImage[];\n  /**\n   * Object of type `CarouselPreviewConfig` to init PreviewsComponent's features.\n   * For instance, it contains a param to show/hide this component, sizes.\n   */\n  @Input()\n  previewConfig: CarouselPreviewConfig;\n  /**\n   * Object of type `AccessibilityConfig` to init custom accessibility features.\n   * For instance, it contains titles, alt texts, aria-labels and so on.\n   */\n  @Input()\n  accessibilityConfig: AccessibilityConfig;\n  /**\n   * Output to emit the clicked preview. The payload contains the `InternalLibImage` associated to the clicked preview.\n   */\n  @Output()\n  clickPreview: EventEmitter<ImageEvent> = new EventEmitter<ImageEvent>();\n\n  /**\n   * Enum of type `Action` that represents a mouse click on a button.\n   * Declared here to be used inside the template.\n   */\n  clickAction: Action = Action.CLICK;\n  /**\n   * Enum of type `Action` that represents a keyboard action.\n   * Declared here to be used inside the template.\n   */\n  keyboardAction: Action = Action.KEYBOARD;\n  /**\n   * Array of `InternalLibImage` exposed to the template. This field is initialized\n   * applying transformations, default values and so on to the input of the same type.\n   */\n  previews: InternalLibImage[] = [];\n  /**\n   * Object of type `CarouselPreviewConfig` exposed to the template. This field is initialized\n   * applying transformations, default values and so on to the input of the same type.\n   */\n  configPreview: CarouselPreviewConfig;\n\n  /**\n   * Start index (inclusive) of the input images used to display previews.\n   */\n  start: number;\n  /**\n   * End index (non inclusive) of the input images used to display previews.\n   */\n  end: number;\n\n  /**\n   * Private property with the default max height of previews.\n   */\n  private defaultMaxHeight = '200px';\n\n  private breakpointSubscription: Subscription;\n\n  constructor(\n    private ref: ChangeDetectorRef,\n    private breakpointObserver: BreakpointObserver,\n    // sanitizer is used only to sanitize style before add it to background property when legacyIE11Mode is enabled\n    private sanitizer: DomSanitizer\n  ) {\n    super();\n\n    // listen for width changes and update preview heights accordingly\n    this.breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.XSmall, Breakpoints.Small, Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe((result: BreakpointState) => {\n        if (!this.configPreview) {\n          return;\n        }\n        if (result.breakpoints[Breakpoints.XSmall]) {\n          this.updateHeight(this.configPreview.breakpoints.xSmall);\n        } else if (result.breakpoints[Breakpoints.Small]) {\n          this.updateHeight(this.configPreview.breakpoints.small);\n        } else if (result.breakpoints[Breakpoints.Medium]) {\n          this.updateHeight(this.configPreview.breakpoints.medium);\n        } else if (result.breakpoints[Breakpoints.Large]) {\n          this.updateHeight(this.configPreview.breakpoints.large);\n        } else if (result.breakpoints[Breakpoints.XLarge]) {\n          this.updateHeight(this.configPreview.breakpoints.xLarge);\n        }\n      });\n  }\n\n  /**\n   * Method to update the height of previews, passing the desired height as input.\n   * @param configBreakpointHeight is a number that represent the desired height to set.\n   */\n  private updateHeight(configBreakpointHeight: number) {\n    const newConfigPreview = Object.assign({}, this.configPreview);\n    if (this.previewConfig && this.previewConfig.maxHeight) {\n      const heightNum: number = +this.previewConfig.maxHeight.replace('px', '').replace('%', '');\n      newConfigPreview.maxHeight = Math.min(configBreakpointHeight, heightNum) + 'px';\n    } else {\n      const heightNum: number = +this.defaultMaxHeight.replace('px', '').replace('%', '');\n      newConfigPreview.maxHeight = Math.min(configBreakpointHeight, heightNum) + 'px';\n    }\n    this.configPreview = newConfigPreview;\n    this.ref.markForCheck();\n  }\n\n  /**\n   * Method Â´ngOnInitÂ´ to build `configPreview` applying a default value and also to\n   * init the `previews` array.\n   * This is an Angular's lifecycle hook, so its called automatically by Angular itself.\n   * In particular, it's called only one time!!!\n   */\n  ngOnInit() {\n    const defaultBreakpoints: BreakpointsConfig = { xSmall: 100, small: 100, medium: 150, large: 200, xLarge: 200 };\n    const defaultPreviewConfig: CarouselPreviewConfig = {\n      visible: true,\n      number: 4,\n      arrows: true,\n      clickable: true,\n      width: 100 / 4 + '%',\n      maxHeight: this.defaultMaxHeight,\n      breakpoints: defaultBreakpoints\n    };\n\n    this.configPreview = Object.assign({}, defaultPreviewConfig, this.previewConfig);\n\n    // if number is <= 0 reset to default\n    if (this.configPreview && this.configPreview.number <= 0) {\n      this.configPreview.number = defaultPreviewConfig.number;\n    }\n\n    // Init preview image width based on the number of previews in PreviewConfig\n    // Don't move this line above, because I need to be sure that both configPreview.number\n    // and configPreview.size are initialized\n    this.configPreview.width = 100 / this.configPreview.number + '%';\n\n    // change the max-width of this component if there is a specified width !== 100% in carouselConfig\n    if (this.carouselConfig && this.carouselConfig.maxWidth !== '100%') {\n      this.hostMaxWidth = this.carouselConfig.maxWidth;\n    }\n\n    // init previews based on currentImage and the full array of images\n    this.initPreviews(this.currentImage, this.images);\n\n    // apply custom height based on responsive breakpoints\n    // This is required, because the breakpointSubscription is not triggered at creation,\n    // but only when the width changes\n    const isXsmallScreen = this.breakpointObserver.isMatched(Breakpoints.XSmall);\n    const isSmallScreen = this.breakpointObserver.isMatched(Breakpoints.Small);\n    const isMediumScreen = this.breakpointObserver.isMatched(Breakpoints.Medium);\n    const isLargeScreen = this.breakpointObserver.isMatched(Breakpoints.Large);\n    const isxLargeScreen = this.breakpointObserver.isMatched(Breakpoints.XLarge);\n    if (isXsmallScreen) {\n      this.updateHeight(this.configPreview.breakpoints.xSmall);\n    } else if (isSmallScreen) {\n      this.updateHeight(this.configPreview.breakpoints.small);\n    } else if (isMediumScreen) {\n      this.updateHeight(this.configPreview.breakpoints.medium);\n    } else if (isLargeScreen) {\n      this.updateHeight(this.configPreview.breakpoints.large);\n    } else if (isxLargeScreen) {\n      this.updateHeight(this.configPreview.breakpoints.xLarge);\n    }\n  }\n\n  /**\n   * Method to check if an image is active (i.e. a preview image).\n   * @param InternalLibImage preview is an image to check if it's active or not\n   * @returns boolean true if is active, false otherwise\n   */\n  isActive(preview: InternalLibImage): boolean {\n    if (!preview || !this.currentImage) {\n      return false;\n    }\n    return preview.id === this.currentImage.id;\n  }\n\n  /**\n   * Method Â´ngOnChangesÂ´ to update `previews` array.\n   * Also, both `start` and `end` local variables will be updated accordingly.\n   * This is an Angular's lifecycle hook, so its called automatically by Angular itself.\n   * In particular, it's called when any data-bound property of a directive changes!!!\n   */\n  ngOnChanges(changes: SimpleChanges) {\n    const simpleChange: SimpleChange = changes.currentImage;\n    if (!simpleChange) {\n      return;\n    }\n\n    const prev: InternalLibImage = simpleChange.previousValue;\n    const current: InternalLibImage = simpleChange.currentValue;\n\n    if (current && changes.images && changes.images.previousValue && changes.images.currentValue) {\n      // I'm in this if statement, if input images are changed (for instance, because I removed one of them with the 'delete button',\n      // or because users changed the images array while modal gallery is still open).\n      // In this case, I have to re-init previews, because the input array of images is changed.\n      this.initPreviews(current, changes.images.currentValue);\n    }\n\n    if (prev && current && prev.id !== current.id) {\n      // to manage infinite sliding I have to reset both `start` and `end` at the beginning\n      // to show again previews from the first image.\n      // This happens when you navigate over the last image to return to the first one\n      let prevIndex: number;\n      let currentIndex: number;\n      try {\n        prevIndex = getIndex(prev, this.images);\n        currentIndex = getIndex(current, this.images);\n      } catch (err) {\n        console.error('Cannot get previous and current image indexes in previews');\n        throw err;\n      }\n\n      // apply a formula to get a values to be used to decide if go next, return back or stay without doing anything\n      const calc = Math.floor((this.end - this.start) / 2) + this.start;\n\n      if (prevIndex === this.images.length - 1 && currentIndex === 0) {\n        // first image\n        this.setBeginningIndexesPreviews();\n        this.previews = this.images.filter((img: InternalLibImage, i: number) => i >= this.start && i < this.end);\n        return;\n      }\n      // the same for the opposite case, when you navigate back from the fist image to go to the last one.\n      if (prevIndex === 0 && currentIndex === this.images.length - 1) {\n        // last image\n        this.setEndIndexesPreviews();\n        this.previews = this.images.filter((img: InternalLibImage, i: number) => i >= this.start && i < this.end);\n        return;\n      }\n\n      if (this.configPreview.number % 2 === 0) {\n        if (calc > currentIndex) {\n          this.previous();\n        } else {\n          this.next();\n        }\n      } else {\n        if (calc > currentIndex) {\n          this.previous();\n        }\n        if (calc < currentIndex) {\n          this.next();\n        }\n      }\n    }\n  }\n\n  /**\n   * Method called by events from both keyboard and mouse on a preview.\n   * This will trigger the `clickpreview` output with the input preview as its payload.\n   * @param InternalLibImage preview that triggered this method\n   * @param KeyboardEvent | MouseEvent event payload\n   * @param Action that triggered this event (Action.NORMAL by default)\n   */\n  onImageEvent(preview: InternalLibImage, event: KeyboardEvent | MouseEvent, action: Action = Action.NORMAL) {\n    if (!this.configPreview || !this.configPreview.clickable) {\n      return;\n    }\n    const clickedImageIndex: number = this.images.indexOf(preview);\n    const result: number = super.handleImageEvent(event);\n    if (result === NEXT) {\n      this.clickPreview.emit(<ImageEvent>{ action: action, result: clickedImageIndex });\n    } else if (result === PREV) {\n      this.clickPreview.emit(<ImageEvent>{ action: action, result: clickedImageIndex });\n    }\n  }\n\n  /**\n   * Method called by events from both keyboard and mouse on a navigation arrow.\n   * @param string direction of the navigation that can be either 'next' or 'prev'\n   * @param KeyboardEvent | MouseEvent event payload\n   */\n  onNavigationEvent(direction: string, event: KeyboardEvent | MouseEvent) {\n    const result: number = super.handleNavigationEvent(direction, event);\n    if (result === NEXT) {\n      this.next();\n    } else if (result === PREV) {\n      this.previous();\n    }\n  }\n\n  /**\n   * Method to get aria-label text for a preview image.\n   * @param Image is the preview\n   */\n  getAriaLabel(preview: Image): string {\n    if (!preview.plain) {\n      return preview.modal.ariaLabel || '';\n    }\n    return preview.plain.ariaLabel || preview.modal.ariaLabel || '';\n  }\n\n  /**\n   * Method to get title text for a preview image.\n   * @param Image is the preview\n   */\n  getTitle(preview: Image): string {\n    if (!preview.plain) {\n      return preview.modal.title || '';\n    }\n    return preview.plain.title || preview.modal.title || '';\n  }\n\n  /**\n   * Method to get alt text for a preview image.\n   * @param Image is the preview\n   */\n  getAlt(preview: Image): string {\n    if (!preview.plain) {\n      return preview.modal.alt || '';\n    }\n    return preview.plain.alt || preview.modal.alt || '';\n  }\n\n  /**\n   * Method used in the template to track ids in ngFor.\n   * @param number index of the array\n   * @param Image item of the array\n   * @returns number the id of the item\n   */\n  trackById(index: number, item: Image): number {\n    return item.id;\n  }\n\n  /**\n   * Method used in template to sanitize an url when you need legacyIE11Mode.\n   * In this way you can set an url as background of a div.\n   * @param unsafeStyle is a string and represents the url to sanitize.\n   * @returns a SafeStyle object that can be used in template without problems.\n   */\n  sanitizeUrlBgStyle(unsafeStyle: string): SafeStyle {\n    // Method used only to sanitize background-image style before add it to background property when legacyIE11Mode is enabled\n    return this.sanitizer.bypassSecurityTrustStyle('url(' + unsafeStyle + ')');\n  }\n\n  /**\n   * Method to get the background-size value when IE11LegacyMode is enabled.\n   * This prevent weired behaviour on IE11 when previews are really small, but original images (.png/.jgp/...) are big.\n   * Using 'cover' it's not enough, because it's causing empty background in some cases.\n   * After some experiments, I decided to use the double of the height and auto as width.\n   */\n  getIE11LegacyBgSize(): string {\n    if (this.configPreview && this.configPreview.maxHeight) {\n      const bgHeight: number = +this.configPreview.maxHeight.replace('px', '');\n      return '100% ' + bgHeight * 2 + 'px';\n    }\n    return 'cover';\n  }\n\n  /**\n   * Method to cleanup resources. In fact, it cleans breakpointSubscription.\n   * This is an Angular's lifecycle hook that is called when this component is destroyed.\n   */\n  ngOnDestroy(): void {\n    if (this.breakpointSubscription) {\n      this.breakpointSubscription.unsubscribe();\n    }\n  }\n\n  /**\n   * Private method to init previews based on the currentImage and the full array of images.\n   * The current image in mandatory to show always the current preview (as highlighted).\n   * @param InternalLibImage currentImage to decide how to show previews, because I always want to see the current image as highlighted\n   * @param InternalLibImage[] images is the array of all images.\n   */\n  private initPreviews(currentImage: InternalLibImage, images: InternalLibImage[]) {\n    let index: number;\n    try {\n      index = getIndex(currentImage, images);\n    } catch (err) {\n      throw err;\n    }\n    switch (index) {\n      case 0:\n        // first image\n        this.setBeginningIndexesPreviews();\n        break;\n      case images.length - 1:\n        // last image\n        this.setEndIndexesPreviews();\n        break;\n      // default:\n      //   // other images\n      //   // TODO unused because it starts always at image 0\n      //   this.setIndexesPreviews();\n      //   break;\n    }\n    this.previews = images.filter((img: InternalLibImage, i: number) => i >= this.start && i < this.end);\n  }\n\n  /**\n   * Private method to init both `start` and `end` to the beginning.\n   */\n  private setBeginningIndexesPreviews() {\n    this.start = 0;\n    this.end = Math.min(<number>this.configPreview.number, this.images.length);\n  }\n\n  /**\n   * Private method to init both `start` and `end` to the end.\n   */\n  private setEndIndexesPreviews() {\n    this.start = this.images.length - 1 - (<number>this.configPreview.number - 1);\n    this.end = this.images.length;\n  }\n\n  /**\n   * Private method to update the visible previews navigating to the right (next).\n   */\n  private next() {\n    // check if nextImage should be blocked\n    if (this.isPreventSliding(this.images.length - 1)) {\n      return;\n    }\n\n    if (this.end === this.images.length) {\n      return;\n    }\n\n    this.start++;\n    this.end = Math.min(this.end + 1, this.images.length);\n\n    this.previews = this.images.filter((img: InternalLibImage, i: number) => i >= this.start && i < this.end);\n  }\n\n  /**\n   * Private method to update the visible previews navigating to the left (previous).\n   */\n  private previous() {\n    // check if prevImage should be blocked\n    if (this.isPreventSliding(0)) {\n      return;\n    }\n\n    if (this.start === 0) {\n      return;\n    }\n\n    this.start = Math.max(this.start - 1, 0);\n    this.end = Math.min(this.end - 1, this.images.length);\n\n    this.previews = this.images.filter((img: InternalLibImage, i: number) => i >= this.start && i < this.end);\n  }\n\n  /**\n   * Private method to block/permit sliding between previews.\n   * @param number boundaryIndex is the first or the last index of `images` input array\n   * @returns boolean if true block sliding, otherwise not\n   */\n  private isPreventSliding(boundaryIndex: number): boolean {\n    return getIndex(this.currentImage, this.images) === boundaryIndex;\n  }\n}\n","/*\n The MIT License (MIT)\n\n Copyright (c) 2017-2018 Stefano Cappa (Ks89)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NON INFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n */\n\nimport { Action } from './action.enum';\nimport { InternalLibImage } from './image-internal.class';\nimport { Size } from './size.interface';\n\n/**\n * Interface `ButtonsConfig` to add buttons, show/hide their, and to add the strategy.\n */\nexport interface ButtonsConfig {\n  visible: boolean;\n  strategy: ButtonsStrategy;\n  buttons?: ButtonConfig[];\n}\n\n/**\n * Interface `ButtonConfig` to configure a single button.\n */\nexport interface ButtonConfig {\n  className?: string;\n  size?: Size;\n  fontSize?: string;\n  type: ButtonType;\n  title?: string;\n  ariaLabel?: string;\n  extUrlInNewTab?: boolean; // to open the external url in a new tab, instead of the current one\n}\n\n/**\n * Interface `ButtonEvent` to represent the event payload when a button is clicked.\n */\nexport interface ButtonEvent {\n  button: ButtonConfig;\n  image: InternalLibImage | null;\n  action: Action;\n}\n\n/**\n * Enum `ButtonsStrategy` to configure the logic of a button.\n */\nexport enum ButtonsStrategy {\n  // don't use 0 here\n  // the first index is 1 and all of the following members are auto-incremented from that point on\n  DEFAULT = 1,\n  SIMPLE,\n  ADVANCED,\n  FULL,\n  CUSTOM\n}\n\n/**\n * Enum `ButtonType` is the type of a button.\n */\nexport enum ButtonType {\n  // don't use 0 here\n  // the first index is 1 and all of the following members are auto-incremented from that point on\n  // REFRESH = 1,\n  DELETE = 1,\n  EXTURL,\n  DOWNLOAD,\n  CLOSE,\n  CUSTOM,\n  FULLSCREEN\n  // ROTATE\n}\n\n/**\n * Array of admitted types of buttons.\n */\nexport const WHITELIST_BUTTON_TYPES: ButtonType[] = [\n  // ButtonType.REFRESH,\n  ButtonType.FULLSCREEN,\n  ButtonType.DELETE,\n  ButtonType.EXTURL,\n  ButtonType.DOWNLOAD,\n  ButtonType.CLOSE,\n  ButtonType.CUSTOM\n  // ButtonType.ROTATE\n];\n","/*\n The MIT License (MIT)\n\n Copyright (c) 2017 Stefano Cappa (Ks89)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NON INFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n */\n\nimport { ChangeDetectionStrategy, Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\n\nimport { AccessibleComponent } from '../accessible.component';\n\nimport { Action } from '../../model/action.enum';\nimport { Image } from '../../model/image.class';\nimport { ButtonConfig, ButtonEvent, ButtonsConfig, ButtonsStrategy, ButtonType, WHITELIST_BUTTON_TYPES } from '../../model/buttons-config.interface';\n\nimport {\n  KS_DEFAULT_BTN_CLOSE,\n  KS_DEFAULT_BTN_DELETE,\n  KS_DEFAULT_BTN_DOWNLOAD,\n  KS_DEFAULT_BTN_EXTURL,\n  KS_DEFAULT_BTN_FULL_SCREEN\n} from './upper-buttons-default';\n\nimport { NEXT } from '../../utils/user-input.util';\n\n/**\n * Internal representation of `ButtonConfig` with an optional `id` field, used by trackId to improve performances.\n */\nexport interface InternalButtonConfig extends ButtonConfig {\n  id?: number; // useful only for trackById, not needed by users\n}\n\n/**\n * Component with all upper buttons.\n * Also it emits click events as outputs.\n */\n@Component({\n  selector: 'ks-upper-buttons',\n  styleUrls: ['upper-buttons.scss'],\n  templateUrl: 'upper-buttons.html',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class UpperButtonsComponent extends AccessibleComponent implements OnInit {\n  /**\n   * Object of type `Image` that represent the visible image.\n   */\n  @Input()\n  currentImage: Image;\n  /**\n   * Object of type `ButtonsConfig` to init UpperButtonsComponent's features.\n   * For instance, it contains an array of buttons.\n   */\n  @Input()\n  buttonsConfig: ButtonsConfig;\n\n  /**\n   * Output to emit clicks on refresh button. The payload contains a `ButtonEvent`.\n   */\n  @Output()\n  refresh: EventEmitter<ButtonEvent> = new EventEmitter<ButtonEvent>();\n  /**\n   * Output to emit clicks on delete button. The payload contains a `ButtonEvent`.\n   */\n  @Output()\n  delete: EventEmitter<ButtonEvent> = new EventEmitter<ButtonEvent>();\n  /**\n   * Output to emit clicks on navigate button. The payload contains a `ButtonEvent`.\n   */\n  @Output()\n  navigate: EventEmitter<ButtonEvent> = new EventEmitter<ButtonEvent>();\n  /**\n   * Output to emit clicks on download button. The payload contains a `ButtonEvent`.\n   */\n  @Output()\n  download: EventEmitter<ButtonEvent> = new EventEmitter<ButtonEvent>();\n  /**\n   * Output to emit clicks on close button. The payload contains a `ButtonEvent`.\n   */\n  @Output()\n  close: EventEmitter<ButtonEvent> = new EventEmitter<ButtonEvent>();\n  /**\n   * Output to emit clicks on full-screen button. The payload contains a `ButtonEvent`.\n   */\n  @Output()\n  fullscreen: EventEmitter<ButtonEvent> = new EventEmitter<ButtonEvent>();\n  // /**\n  //  * Output to emit clicks on rotate button. The payload contains a `ButtonEvent`.\n  //  */\n  // @Output()\n  // rotate: EventEmitter<ButtonEvent> = new EventEmitter<ButtonEvent>();\n  /**\n   * Output to emit clicks on all custom buttons. The payload contains a `ButtonEvent`.\n   */\n  @Output()\n  customEmit: EventEmitter<ButtonEvent> = new EventEmitter<ButtonEvent>();\n\n  /**\n   * Array of `InternalButtonConfig` exposed to the template. This field is initialized\n   * applying transformations, default values and so on to the input of the same type.\n   */\n  buttons: InternalButtonConfig[];\n  /**\n   * Object of type `ButtonsConfig` exposed to the template. This field is initialized\n   * applying transformations, default values and so on to the input of the same type.\n   */\n  configButtons: ButtonsConfig;\n\n  /**\n   * Default buttons array for standard configuration\n   */\n  private defaultButtonsDefault: ButtonConfig[] = [KS_DEFAULT_BTN_CLOSE];\n  /**\n   * Default buttons array for simple configuration\n   */\n  private simpleButtonsDefault: ButtonConfig[] = [KS_DEFAULT_BTN_DOWNLOAD, ...this.defaultButtonsDefault];\n  /**\n   * Default buttons array for advanced configuration\n   */\n  private advancedButtonsDefault: ButtonConfig[] = [KS_DEFAULT_BTN_EXTURL, ...this.simpleButtonsDefault];\n  /**\n   * Default buttons array for full configuration\n   */\n  private fullButtonsDefault: ButtonConfig[] = [\n    /*KS_DEFAULT_BTN_REFRESH, */\n    KS_DEFAULT_BTN_FULL_SCREEN,\n    KS_DEFAULT_BTN_DELETE,\n    ...this.advancedButtonsDefault\n  ];\n\n  /**\n   * Method Â´ngOnInitÂ´ to build `configButtons` applying a default value and also to\n   * init the `buttons` array.\n   * This is an Angular's lifecycle hook, so its called automatically by Angular itself.\n   * In particular, it's called only one time!!!\n   */\n  ngOnInit() {\n    const defaultConfig: ButtonsConfig = { visible: true, strategy: ButtonsStrategy.DEFAULT };\n    this.configButtons = Object.assign(defaultConfig, this.buttonsConfig);\n    switch (this.configButtons.strategy) {\n      case ButtonsStrategy.SIMPLE:\n        this.buttons = this.addButtonIds(this.simpleButtonsDefault);\n        break;\n      case ButtonsStrategy.ADVANCED:\n        this.buttons = this.addButtonIds(this.advancedButtonsDefault);\n        break;\n      case ButtonsStrategy.FULL:\n        this.buttons = this.addButtonIds(this.fullButtonsDefault);\n        break;\n      case ButtonsStrategy.CUSTOM:\n        this.buttons = this.addButtonIds(this.validateCustomButtons(this.configButtons.buttons));\n        break;\n      case ButtonsStrategy.DEFAULT:\n      default:\n        this.buttons = this.addButtonIds(this.defaultButtonsDefault);\n        break;\n    }\n  }\n\n  /**\n   * Method called by events from both keyboard and mouse on a button.\n   * This will call a private method to trigger an output with the right payload.\n   * @param InternalButtonConfig button that called this method\n   * @param KeyboardEvent | MouseEvent event payload\n   * @param Action action that triggered the source event or `Action.CLICK` if not specified\n   * @throws an error if the button type is unknown\n   */\n  onEvent(button: InternalButtonConfig, event: KeyboardEvent | MouseEvent, action: Action = Action.CLICK) {\n    if (!event) {\n      return;\n    }\n    const dataToEmit: ButtonEvent = {\n      button: button,\n      // current image initialized as null\n      // (I'll fill this value inside the parent of this component\n      image: null,\n      action: action\n    };\n    switch (button.type) {\n      // case ButtonType.REFRESH:\n      //   this.triggerOnMouseAndKeyboard(this.refresh, event, dataToEmit);\n      //   break;\n      case ButtonType.DELETE:\n        this.triggerOnMouseAndKeyboard(this.delete, event, dataToEmit);\n        break;\n      case ButtonType.EXTURL:\n        if (!this.currentImage || !this.currentImage.modal || !this.currentImage.modal.extUrl) {\n          return;\n        }\n        this.triggerOnMouseAndKeyboard(this.navigate, event, dataToEmit);\n        break;\n      case ButtonType.DOWNLOAD:\n        this.triggerOnMouseAndKeyboard(this.download, event, dataToEmit);\n        break;\n      case ButtonType.CLOSE:\n        this.triggerOnMouseAndKeyboard(this.close, event, dataToEmit);\n        break;\n      case ButtonType.CUSTOM:\n        this.triggerOnMouseAndKeyboard(this.customEmit, event, dataToEmit);\n        break;\n      case ButtonType.FULLSCREEN:\n        this.triggerOnMouseAndKeyboard(this.fullscreen, event, dataToEmit);\n        break;\n      // case ButtonType.ROTATE:\n      //   this.triggerOnMouseAndKeyboard(this.rotate, event, dataToEmit);\n      //   break;\n      default:\n        throw new Error(`Unknown button's type into ButtonConfig`);\n    }\n  }\n\n  /**\n   * Method used in the template to track ids in ngFor.\n   * @param number index of the array\n   * @param Image item of the array\n   * @returns number the id of the item or undefined if the item is not valid\n   */\n  trackById(index: number, item: InternalButtonConfig): number | undefined {\n    return item ? item.id : undefined;\n  }\n\n  /**\n   * Private method to emit an event using the specified output as an `EventEmitter`.\n   * @param EventEmitter<ButtonEvent> emitter is the output to emit the `ButtonEvent`\n   * @param KeyboardEvent | MouseEvent event is the source that triggered this method\n   * @param ButtonEvent dataToEmit payload to emit\n   */\n  private triggerOnMouseAndKeyboard(emitter: EventEmitter<ButtonEvent>, event: KeyboardEvent | MouseEvent, dataToEmit: ButtonEvent) {\n    if (!emitter) {\n      throw new Error(`UpperButtonsComponent unknown emitter in triggerOnMouseAndKeyboard`);\n    }\n\n    const result: number = super.handleImageEvent(event);\n    if (result === NEXT) {\n      emitter.emit(dataToEmit);\n    }\n  }\n\n  /**\n   * Private method to add ids to the array of buttons.\n   * It adds ids in a reverse way, to be sure that the last button will always have id = 0.\n   * This is really useful in unit testing to be sure that close button always have id = 0, download 1 and so on...\n   * It's totally transparent to the user.\n   * @param ButtonConfig[] buttons config array\n   * @returns ButtonConfig[] the input array with incremental numeric ids\n   */\n  private addButtonIds(buttons: ButtonConfig[]): ButtonConfig[] {\n    return buttons.map((val: ButtonConfig, i: number) => Object.assign(val, { id: buttons.length - 1 - i }));\n  }\n\n  /**\n   * Private method to validate custom buttons received as input.\n   * @param ButtonConfig[] buttons config array\n   * @returns ButtonConfig[] the same input buttons config array\n   * @throws an error is exists a button with an unknown type\n   */\n  private validateCustomButtons(buttons: ButtonConfig[] = []): ButtonConfig[] {\n    buttons.forEach((val: ButtonConfig) => {\n      const indexOfButtonType: number = WHITELIST_BUTTON_TYPES.findIndex((type: ButtonType) => type === val.type);\n      if (indexOfButtonType === -1) {\n        throw new Error(`Unknown ButtonType. For custom types use ButtonType.CUSTOM`);\n      }\n    });\n    return buttons;\n  }\n}\n","import { ButtonConfig, ButtonType } from '../../model/buttons-config.interface';\nimport { Size } from '../../model/size.interface';\n\n/**\n * Default button size object\n */\nexport const KS_DEFAULT_SIZE: Size = { height: 'auto', width: '30px' };\n\n/**\n * Default close button object\n */\nexport const KS_DEFAULT_BTN_CLOSE: ButtonConfig = {\n  className: 'close-image',\n  size: KS_DEFAULT_SIZE,\n  type: ButtonType.CLOSE,\n  title: 'Close this modal image gallery',\n  ariaLabel: 'Close this modal image gallery'\n};\n\n/**\n * Default download button object\n */\nexport const KS_DEFAULT_BTN_DOWNLOAD: ButtonConfig = {\n  className: 'download-image',\n  size: KS_DEFAULT_SIZE,\n  type: ButtonType.DOWNLOAD,\n  title: 'Download the current image',\n  ariaLabel: 'Download the current image'\n};\n\n/**\n * Default exturl button object\n */\nexport const KS_DEFAULT_BTN_EXTURL: ButtonConfig = {\n  className: 'ext-url-image',\n  size: KS_DEFAULT_SIZE,\n  type: ButtonType.EXTURL,\n  title: 'Navigate the current image',\n  ariaLabel: 'Navigate the current image'\n};\n// /**\n//  * Default refresh button object\n//  */\n// export const KS_DEFAULT_BTN_REFRESH: ButtonConfig = {\n//   className: 'refresh-image',\n//   size: KS_DEFAULT_SIZE,\n//   type: ButtonType.REFRESH,\n//   title: 'Refresh all images',\n//   ariaLabel: 'Refresh all images'\n// };\n\n/**\n * Default delete button object\n */\nexport const KS_DEFAULT_BTN_DELETE: ButtonConfig = {\n  className: 'delete-image',\n  size: KS_DEFAULT_SIZE,\n  type: ButtonType.DELETE,\n  title: 'Delete the current image',\n  ariaLabel: 'Delete the current image'\n};\n\n/**\n * Default full-screen button object\n */\nexport const KS_DEFAULT_BTN_FULL_SCREEN: ButtonConfig = {\n  className: 'fullscreen-image',\n  size: KS_DEFAULT_SIZE,\n  type: ButtonType.FULLSCREEN,\n  title: 'Switch to full-screen',\n  ariaLabel: 'Switch to full-screen'\n};\n/**\n * Default rotate button object\n */\n// export const KS_DEFAULT_BTN_ROTATE: ButtonConfig = {\n//   className: 'rotate-image',\n//   size: KS_DEFAULT_SIZE,\n//   type: ButtonType.ROTATE,\n//   title: 'Rotate clockwise of 90 degrees the current image',\n//   ariaLabel: 'Rotate clockwise of 90 degrees the current image'\n// };\n","/*\n The MIT License (MIT)\n\n Copyright (c) 2017-2018 Stefano Cappa (Ks89)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NON INFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n */\n\nimport { ChangeDetectionStrategy, Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChange, SimpleChanges } from '@angular/core';\n\nimport { AccessibleComponent } from '../accessible.component';\n\nimport { AccessibilityConfig } from '../../model/accessibility.interface';\nimport { Image } from '../../model/image.class';\nimport { InternalLibImage } from '../../model/image-internal.class';\nimport { DotsConfig } from '../../model/dots-config.interface';\n\nimport { NEXT } from '../../utils/user-input.util';\nimport { getIndex } from '../../utils/image.util';\n\n/**\n * Component with clickable dots (small circles) to navigate between images inside the modal gallery.\n */\n@Component({\n  selector: 'ks-dots',\n  styleUrls: ['dots.scss'],\n  templateUrl: 'dots.html',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DotsComponent extends AccessibleComponent implements OnInit, OnChanges {\n  /**\n   * Object of type `InternalLibImage` that represent the visible image.\n   */\n  @Input()\n  currentImage: InternalLibImage;\n  /**\n   * Array of `InternalLibImage` that represent the model of this library with all images,\n   * thumbs and so on.\n   */\n  @Input()\n  images: InternalLibImage[];\n  /**\n   * Object of type `DotsConfig` to init DotsComponent's features.\n   * For instance, it contains a param to show/hide this component.\n   */\n  @Input()\n  dotsConfig: DotsConfig = { visible: true };\n  /**\n   * Object of type `AccessibilityConfig` to init custom accessibility features.\n   * For instance, it contains titles, alt texts, aria-labels and so on.\n   */\n  @Input()\n  accessibilityConfig: AccessibilityConfig;\n  /**\n   * Output to emit clicks on dots. The payload contains a number that represent\n   * the index of the clicked dot.\n   */\n  @Output()\n  clickDot: EventEmitter<number> = new EventEmitter<number>();\n\n  /**\n   * Object of type `DotsConfig` exposed to the template. This field is initialized\n   * applying transformations, default values and so on to the input of the same type.\n   */\n  configDots: DotsConfig;\n\n  /**\n   * Method Â´ngOnInitÂ´ to build `configDots` applying a default value.\n   * This is an Angular's lifecycle hook, so its called automatically by Angular itself.\n   * In particular, it's called only one time!!!\n   */\n  ngOnInit() {\n    const defaultConfig: DotsConfig = { visible: true };\n    this.configDots = Object.assign(defaultConfig, this.dotsConfig);\n  }\n\n  /**\n   * Method Â´ngOnChangesÂ´ to change `configDots` if the input dotsConfig is changed.\n   * This is an Angular's lifecycle hook, so its called automatically by Angular itself.\n   */\n  ngOnChanges(changes: SimpleChanges) {\n    const dotsConfigChanges: SimpleChange = changes.dotsConfig;\n    if (dotsConfigChanges && dotsConfigChanges.currentValue !== dotsConfigChanges.previousValue) {\n      this.configDots = dotsConfigChanges.currentValue;\n    }\n  }\n\n  /**\n   * Method to check if an image is active (i.e. the current image).\n   * It checks currentImage and images to prevent errors.\n   * @param number index of the image to check if it's active or not\n   * @returns boolean true if is active (and input params are valid), false otherwise\n   */\n  isActive(index: number): boolean {\n    if (!this.currentImage || !this.images || this.images.length === 0) {\n      return false;\n    }\n    let imageIndex: number;\n    try {\n      imageIndex = getIndex(this.currentImage, this.images);\n    } catch (err) {\n      console.error(`Internal error while trying to show the active 'dot'`, err);\n      return false;\n    }\n    return index === imageIndex;\n  }\n\n  /**\n   * Method called by events from keyboard and mouse.\n   * @param number index of the dot\n   * @param KeyboardEvent | MouseEvent event payload\n   */\n  onDotEvent(index: number, event: KeyboardEvent | MouseEvent) {\n    const result: number = super.handleImageEvent(event);\n    if (result === NEXT) {\n      this.clickDot.emit(index);\n    }\n  }\n\n  /**\n   * Method used in the template to track ids in ngFor.\n   * @param number index of the array\n   * @param Image item of the array\n   * @returns number the id of the item\n   */\n  trackById(index: number, item: Image): number {\n    return item.id;\n  }\n}\n","/*\n The MIT License (MIT)\n\n Copyright (c) 2017-2018 Stefano Cappa (Ks89)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NON INFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n */\n\nimport { ChangeDetectionStrategy, Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChange, SimpleChanges } from '@angular/core';\n\nimport { AccessibleComponent } from '../accessible.component';\n\nimport { AccessibilityConfig } from '../../model/accessibility.interface';\nimport { Image, ImageEvent, ImageModalEvent } from '../../model/image.class';\nimport { InternalLibImage } from '../../model/image-internal.class';\nimport { Size } from '../../model/size.interface';\nimport { PreviewConfig } from '../../model/preview-config.interface';\nimport { SlideConfig } from '../../model/slide-config.interface';\n\nimport { DIRECTION_LEFT, DIRECTION_RIGHT, NEXT, PREV } from '../../utils/user-input.util';\nimport { getIndex } from '../../utils/image.util';\nimport { InteractionEvent } from '../../model/interaction-event.interface';\nimport { Action } from '../../model/action.enum';\n\n/**\n * Component with image previews\n */\n@Component({\n  selector: 'ks-previews',\n  styleUrls: ['previews.scss', '../previews-arrows.scss'],\n  templateUrl: 'previews.html',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PreviewsComponent extends AccessibleComponent implements OnInit, OnChanges {\n  /**\n   * Object of type `InternalLibImage` that represent the visible image.\n   */\n  @Input()\n  currentImage: InternalLibImage;\n  /**\n   * Array of `InternalLibImage` that represent the model of this library with all images,\n   * thumbs and so on.\n   */\n  @Input()\n  images: InternalLibImage[];\n  /**\n   * Object of type `SlideConfig` to get `infinite sliding`.\n   */\n  @Input()\n  slideConfig: SlideConfig;\n  /**\n   * Object of type `PreviewConfig` to init PreviewsComponent's features.\n   * For instance, it contains a param to show/hide this component, sizes.\n   */\n  @Input()\n  previewConfig: PreviewConfig;\n  /**\n   * Object of type `AccessibilityConfig` to init custom accessibility features.\n   * For instance, it contains titles, alt texts, aria-labels and so on.\n   */\n  @Input()\n  accessibilityConfig: AccessibilityConfig;\n  /**\n   * Output to emit the clicked preview. The payload contains the `ImageEvent` associated to the clicked preview.\n   */\n  @Output()\n  clickPreview: EventEmitter<ImageEvent> = new EventEmitter<ImageEvent>();\n  // /**\n  //  * Output to emit the clicked arrow. The payload contains which arrow (left or right).\n  //  */\n  // @Output()\n  // clickArrow: EventEmitter<InteractionEvent> = new EventEmitter<InteractionEvent>();\n\n  /**\n   * Enum of type `Action` that represents a mouse click on a button.\n   * Declared here to be used inside the template.\n   */\n  clickAction: Action = Action.CLICK;\n  /**\n   * Enum of type `Action` that represents a keyboard action.\n   * Declared here to be used inside the template.\n   */\n  keyboardAction: Action = Action.KEYBOARD;\n  /**\n   * Array of `InternalLibImage` exposed to the template. This field is initialized\n   * applying transformations, default values and so on to the input of the same type.\n   */\n  previews: InternalLibImage[] = [];\n  /**\n   * Object of type `PreviewConfig` exposed to the template. This field is initialized\n   * applying transformations, default values and so on to the input of the same type.\n   */\n  configPreview: PreviewConfig;\n\n  /**\n   * Start index of the input images used to display previews.\n   */\n  start: number;\n  /**\n   * End index of the input images used to display previews.\n   */\n  end: number;\n\n  /**\n   * Default preview's size object, also used in the template to apply default sizes to ksSize's directive.\n   */\n  defaultPreviewSize: Size = { height: '50px', width: 'auto' };\n\n  /**\n   * Default preview's config object\n   */\n  private defaultPreviewConfig: PreviewConfig = {\n    visible: true,\n    number: 3,\n    arrows: true,\n    clickable: true,\n    // alwaysCenter: false, // TODO still not implemented\n    size: this.defaultPreviewSize\n  };\n\n  /**\n   * Method Â´ngOnInitÂ´ to build `configPreview` applying a default value and also to\n   * init the `previews` array.\n   * This is an Angular's lifecycle hook, so its called automatically by Angular itself.\n   * In particular, it's called only one time!!!\n   */\n  ngOnInit() {\n    this.configPreview = Object.assign({}, this.defaultPreviewConfig, this.previewConfig);\n\n    // if number is <= 0 reset to default\n    if (this.configPreview && this.configPreview.number && this.configPreview.number <= 0) {\n      this.configPreview.number = this.defaultPreviewConfig.number;\n    }\n\n    // init previews based on currentImage and the full array of images\n    this.initPreviews(this.currentImage, this.images);\n  }\n\n  /**\n   * Method to check if an image is active (i.e. a preview image).\n   * @param InternalLibImage preview is an image to check if it's active or not\n   * @returns boolean true if is active, false otherwise\n   */\n  isActive(preview: InternalLibImage): boolean {\n    if (!preview || !this.currentImage) {\n      return false;\n    }\n    return preview.id === this.currentImage.id;\n  }\n\n  // TODO improve this method to simplify the sourcecode + remove duplicated codelines\n  /**\n   * Method Â´ngOnChangesÂ´ to update `previews` array.\n   * Also, both `start` and `end` local variables will be updated accordingly.\n   * This is an Angular's lifecycle hook, so its called automatically by Angular itself.\n   * In particular, it's called when any data-bound property of a directive changes!!!\n   */\n  ngOnChanges(changes: SimpleChanges) {\n    const images: SimpleChange = changes.images;\n    const currentImage: SimpleChange = changes.currentImage;\n\n    let prev;\n    let current;\n\n    if (currentImage) {\n      prev = currentImage.previousValue;\n      current = currentImage.currentValue;\n    } else {\n      current = this.currentImage;\n    }\n\n    if (current && images && images.previousValue && images.currentValue) {\n      // I'm in this if statement, if input images are changed (for instance, because I removed one of them with the 'delete button',\n      // or because users changed the images array while modal gallery is still open).\n      // In this case, I have to re-init previews, because the input array of images is changed.\n      this.initPreviews(current, images.currentValue);\n    }\n\n    if (prev && current && prev.id !== current.id) {\n      this.updatePreviews(prev, current);\n    }\n  }\n\n  /**\n   * Method called by events from both keyboard and mouse on a preview.\n   * This will trigger the `clickpreview` output with the input preview as its payload.\n   * @param InternalLibImage preview that triggered this method\n   * @param KeyboardEvent | MouseEvent event payload\n   */\n  onImageEvent(preview: InternalLibImage, event: KeyboardEvent | MouseEvent, action: Action = Action.NORMAL) {\n    if (!this.configPreview || !this.configPreview.clickable) {\n      return;\n    }\n    const result: number = super.handleImageEvent(event);\n    if (result === NEXT || result === PREV) {\n      this.clickPreview.emit(new ImageModalEvent(action, getIndex(preview, this.images)));\n    }\n  }\n\n  /**\n   * Method called by events from both keyboard and mouse on a navigation arrow.\n   * It also emits an event to specify which arrow.\n   * @param string direction of the navigation that can be either 'next' or 'prev'\n   * @param KeyboardEvent | MouseEvent event payload\n   */\n  onNavigationEvent(direction: string, event: KeyboardEvent | MouseEvent, action: Action = Action.NORMAL) {\n    const result: number = super.handleNavigationEvent(direction, event);\n    if (result === NEXT) {\n      // this.clickArrow.emit(<InteractionEvent>{ source: 'modal-previews', payload: DIRECTION_RIGHT, action: action });\n      this.next();\n    } else if (result === PREV) {\n      // this.clickArrow.emit(<InteractionEvent>{ source: 'modal-previews', payload: DIRECTION_LEFT, action: action });\n      this.previous();\n    }\n  }\n\n  /**\n   * Method used in the template to track ids in ngFor.\n   * @param number index of the array\n   * @param Image item of the array\n   * @returns number the id of the item\n   */\n  trackById(index: number, item: Image): number {\n    return item.id;\n  }\n\n  /**\n   * Private method to init previews based on the currentImage and the full array of images.\n   * The current image in mandatory to show always the current preview (as highlighted).\n   * @param InternalLibImage currentImage to decide how to show previews, because I always want to see the current image as highlighted\n   * @param InternalLibImage[] images is the array of all images.\n   */\n  private initPreviews(currentImage: InternalLibImage, images: InternalLibImage[]) {\n    let index: number;\n    try {\n      index = getIndex(currentImage, images);\n    } catch (err) {\n      throw err;\n    }\n    switch (index) {\n      case 0:\n        // first image\n        this.setBeginningIndexesPreviews();\n        break;\n      case images.length - 1:\n        // last image\n        this.setEndIndexesPreviews();\n        break;\n      default:\n        // other images\n        this.setIndexesPreviews();\n        break;\n    }\n    this.previews = images.filter((img: InternalLibImage, i: number) => i >= this.start && i < this.end);\n  }\n\n  /**\n   * Private method to init both `start` and `end` to the beginning.\n   */\n  private setBeginningIndexesPreviews() {\n    this.start = 0;\n    this.end = Math.min(<number>this.configPreview.number, this.images.length);\n  }\n\n  /**\n   * Private method to init both `start` and `end` to the end.\n   */\n  private setEndIndexesPreviews() {\n    this.start = this.images.length - 1 - (<number>this.configPreview.number - 1);\n    this.end = this.images.length;\n  }\n\n  /**\n   * Private method to update both `start` and `end` based on the currentImage.\n   */\n  private setIndexesPreviews() {\n    this.start = getIndex(this.currentImage, this.images) - Math.floor(<number>this.configPreview.number / 2);\n    this.end = getIndex(this.currentImage, this.images) + Math.floor(<number>this.configPreview.number / 2) + 1;\n  }\n\n  /**\n   * Private method to update the visible previews navigating to the right (next).\n   */\n  private next() {\n    // check if nextImage should be blocked\n    if (this.isPreventSliding(this.images.length - 1)) {\n      return;\n    }\n\n    if (this.end === this.images.length) {\n      return;\n    }\n\n    this.start++;\n    this.end = Math.min(this.end + 1, this.images.length);\n\n    this.previews = this.images.filter((img: InternalLibImage, i: number) => i >= this.start && i < this.end);\n  }\n\n  /**\n   * Private method to update the visible previews navigating to the left (previous).\n   */\n  private previous() {\n    // check if prevImage should be blocked\n    if (this.isPreventSliding(0)) {\n      return;\n    }\n\n    if (this.start === 0) {\n      return;\n    }\n\n    this.start = Math.max(this.start - 1, 0);\n    this.end = Math.min(this.end - 1, this.images.length);\n\n    this.previews = this.images.filter((img: InternalLibImage, i: number) => i >= this.start && i < this.end);\n  }\n\n  /**\n   * Private method to block/permit sliding between previews.\n   * @param number boundaryIndex is the first or the last index of `images` input array\n   * @returns boolean if true block sliding, otherwise not\n   */\n  private isPreventSliding(boundaryIndex: number): boolean {\n    return !!this.slideConfig && this.slideConfig.infinite === false && getIndex(this.currentImage, this.images) === boundaryIndex;\n  }\n\n  /**\n   * Private method to handle navigation changing the previews array and other variables.\n   */\n  private updatePreviews(prev: InternalLibImage, current: InternalLibImage) {\n    // to manage infinite sliding I have to reset both `start` and `end` at the beginning\n    // to show again previews from the first image.\n    // This happens when you navigate over the last image to return to the first one\n    let prevIndex: number;\n    let currentIndex: number;\n    try {\n      prevIndex = getIndex(prev, this.images);\n      currentIndex = getIndex(current, this.images);\n    } catch (err) {\n      console.error('Cannot get previous and current image indexes in previews');\n      throw err;\n    }\n    if (prevIndex === this.images.length - 1 && currentIndex === 0) {\n      // first image\n      this.setBeginningIndexesPreviews();\n      this.previews = this.images.filter((img: InternalLibImage, i: number) => i >= this.start && i < this.end);\n      return;\n    }\n    // the same for the opposite case, when you navigate back from the fist image to go to the last one.\n    if (prevIndex === 0 && currentIndex === this.images.length - 1) {\n      // last image\n      this.setEndIndexesPreviews();\n      this.previews = this.images.filter((img: InternalLibImage, i: number) => i >= this.start && i < this.end);\n      return;\n    }\n\n    // otherwise manage standard scenarios\n    if (prevIndex > currentIndex) {\n      this.previous();\n    } else if (prevIndex < currentIndex) {\n      this.next();\n    }\n  }\n}\n","/*\n The MIT License (MIT)\n\n Copyright (c) 2017-2018 Stefano Cappa (Ks89)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NON INFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n */\n\nimport { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\nimport { AccessibilityConfig } from '../../../model/accessibility.interface';\nimport { LoadingConfig, LoadingType } from '../../../model/loading-config.interface';\n\n/**\n * Component with the loading spinner\n */\n@Component({\n  selector: 'ks-loading-spinner',\n  styleUrls: [\n    'style-loading-spinner-standard.css',\n    'style-loading-spinner-dots.css',\n    'style-loading-spinner-bars.css',\n    'style-loading-spinner-circular.css',\n    'style-loading-spinner-cube-flipping.css',\n    'style-loading-spinner-circles.css',\n    'style-loading-spinner-explosing-squares.scss'\n  ],\n  templateUrl: 'loading-spinner.html',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LoadingSpinnerComponent {\n  /**\n   * Object of type `LoadingConfig` exposed to the template.\n   * It contains a field to choose a loading spinner.\n   */\n  @Input()\n  loadingConfig: LoadingConfig;\n  /**\n   * Object of type `AccessibilityConfig` to init custom accessibility features.\n   * For instance, it contains titles, alt texts, aria-labels and so on.\n   */\n  @Input()\n  accessibilityConfig: AccessibilityConfig;\n\n  /**\n   * Enum of type `LoadingType` to choose the standard loading spinner.\n   * Declared here to be used inside the template.\n   */\n  loadingStandard: LoadingType = LoadingType.STANDARD;\n  /**\n   * Enum of type `LoadingType` to choose the bars loading spinner.\n   * Declared here to be used inside the template.\n   */\n  loadingBars: LoadingType = LoadingType.BARS;\n  /**\n   * Enum of type `LoadingType` to choose the circular loading spinner.\n   * Declared here to be used inside the template.\n   */\n  loadingCircular: LoadingType = LoadingType.CIRCULAR;\n  /**\n   * Enum of type `LoadingType` to choose the dots loading spinner.\n   * Declared here to be used inside the template.\n   */\n  loadingDots: LoadingType = LoadingType.DOTS;\n  /**\n   * Enum of type `LoadingType` to choose the cube flipping loading spinner.\n   * Declared here to be used inside the template.\n   */\n  loadingCubeFlipping: LoadingType = LoadingType.CUBE_FLIPPING;\n  /**\n   * Enum of type `LoadingType` to choose the circles loading spinner.\n   * Declared here to be used inside the template.\n   */\n  loadingCircles: LoadingType = LoadingType.CIRCLES;\n  /**\n   * Enum of type `LoadingType` to choose the explosing squares loading spinner.\n   * Declared here to be used inside the template.\n   */\n  loadingExplosingSquares: LoadingType = LoadingType.EXPLOSING_SQUARES;\n}\n","/*\n The MIT License (MIT)\n\n Copyright (c) 2017-2018 Stefano Cappa (Ks89)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NON INFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n */\n\nimport { ChangeDetectionStrategy, Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChange, SimpleChanges } from '@angular/core';\n\nimport { AccessibilityConfig } from '../../model/accessibility.interface';\nimport { Image } from '../../model/image.class';\nimport { Size } from '../../model/size.interface';\nimport { AdvancedLayout, GridLayout, LineLayout, PlainGalleryConfig, PlainGalleryStrategy } from '../../model/plain-gallery-config.interface';\n\nimport { getIndex } from '../../utils/image.util';\n\n/**\n * Component with the gallery of thumbs.\n * In receives an array of Images, a boolean to show/hide\n * the gallery (feature used by imagePointer) and a config\n * object to customize the behaviour of this component.\n * Also, it emits click events as outputs.\n */\n@Component({\n  selector: 'ks-plain-gallery',\n  styleUrls: ['plain-gallery.scss'],\n  templateUrl: 'plain-gallery.html',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PlainGalleryComponent implements OnInit, OnChanges {\n  /**\n   * Array of `Image` that represent the model of this library with all images, thumbs and so on.\n   */\n  @Input()\n  images: Image[];\n  /**\n   * Boolean to show/hide plain gallery. If true the plain gallery will be visible, false otherwise.\n   */\n  @Input()\n  showGallery: boolean;\n  /**\n   * Object of type `PlainGalleryConfig` to configure the plain gallery.\n   */\n  @Input()\n  plainGalleryConfig: PlainGalleryConfig;\n  /**\n   * Object of type `AccessibilityConfig` to init custom accessibility features.\n   * For instance, it contains titles, alt texts, aria-labels and so on.\n   */\n  @Input()\n  accessibilityConfig: AccessibilityConfig;\n\n  /**\n   * Output to emit an event when an image is changed.\n   */\n  @Output()\n  show: EventEmitter<number> = new EventEmitter<number>();\n\n  /**\n   * Object of type `PlainGalleryConfig` to configure this component.\n   */\n  configPlainGallery: PlainGalleryConfig;\n\n  /**\n   * Bi-dimensional array of `Image` object to store images to display as plain gallery.\n   * [] by default.\n   */\n  imageGrid: Image[][] = [];\n  /**\n   * Size object used in the template to resize images.\n   */\n  size: Size;\n  /**\n   * Boolean passed as input to `ks-wrap` directive to configure flex-wrap css property.\n   * However it's not enough, because you need to limit the width using `widthStyle` public variable.\n   * For more info check https://developer.mozilla.org/it/docs/Web/CSS/flex-wrap\n   */\n  wrapStyle = false;\n  /**\n   * String passed as input to `ks-wrap` directive to set width to be able to force overflow.\n   * In this way, `wrapStyle` (flex-wrap css property) will be used as requested.\n   */\n  widthStyle = '';\n  /**\n   * String passed as input to `ks-direction` directive to set the flex-direction css property.\n   * For more info check https://developer.mozilla.org/it/docs/Web/CSS/flex-direction\n   */\n  directionStyle: string;\n  /**\n   * String passed as input to `ks-direction` directive to set the justify-content css property.\n   * For more info check https://developer.mozilla.org/it/docs/Web/CSS/justify-content\n   */\n  justifyStyle: string;\n\n  /**\n   * Default image size object\n   */\n  private defaultSize: Size = { width: '50px', height: 'auto' };\n  /**\n   * Default layout config object\n   * Note that length=-1 means infinity\n   */\n  private defaultLayout: LineLayout = new LineLayout(this.defaultSize, { length: -1, wrap: false }, 'flex-start');\n  /**\n   * Default plain gallery config object\n   */\n  private defaultPlainConfig: PlainGalleryConfig = {\n    strategy: PlainGalleryStrategy.ROW,\n    layout: this.defaultLayout,\n    advanced: { aTags: false, additionalBackground: '50% 50%/cover' }\n  };\n\n  /**\n   * Method Â´ngOnChangesÂ´ to update both `imageGrid` and`configPlainGallery`.\n   * This is an Angular's lifecycle hook, so its called automatically by Angular itself.\n   * In particular, it's called when any data-bound property of a directive changes!!!\n   */\n  ngOnChanges(changes: SimpleChanges) {\n    const imagesChange: SimpleChange = changes.images;\n    const configChange: SimpleChange = changes.plainGalleryConfig;\n\n    // I'm using !change.firstChange because the first time will be called both onInit and onChange and I don't\n    // want to execute initialization two times.\n    if (\n      configChange &&\n      !configChange.firstChange &&\n      (configChange.previousValue !== configChange.currentValue || (!configChange.previousValue && !configChange.currentValue))\n    ) {\n      this.configPlainGallery = this.initPlainGalleryConfig();\n    }\n    if (imagesChange && !imagesChange.firstChange && imagesChange.previousValue !== imagesChange.currentValue) {\n      this.initImageGrid();\n    }\n  }\n\n  /**\n   * Method Â´ngOnInitÂ´ to init both `configPlainGallery` calling `initPlainGalleryConfig()`\n   * and `imageGrid invoking `initImageGrid()`.\n   * This is an Angular's lifecycle hook, so its called automatically by Angular itself.\n   * In particular, it's called only one time!!!\n   */\n  ngOnInit() {\n    this.configPlainGallery = this.initPlainGalleryConfig();\n    this.initImageGrid();\n  }\n\n  /**\n   * Method called when you click on an image of the plain (or inline) gallery.\n   * This will emit the show event with the index number as payload.\n   * @param number index of the clicked image\n   */\n  showModalGallery(index: number) {\n    this.show.emit(index);\n  }\n\n  /**\n   * Method called when you click on an image of the plain (or inline) gallery.\n   * This will emit the show event with the image as payload.\n   * @param Image img is the Image to show\n   */\n  showModalGalleryByImage(img: Image) {\n    const index: number = this.images.findIndex((val: Image) => val && img && val.id === img.id);\n    this.showModalGallery(index);\n  }\n\n  /**\n   * Method to get `alt attribute`.\n   * `alt` specifies an alternate text for an image, if the image cannot be displayed.\n   * @param Image image to get its alt description.\n   * @returns string alt description of the image\n   */\n  getAltPlainDescriptionByImage(image: Image): string {\n    if (!image) {\n      return '';\n    }\n    return image.plain && image.plain.description ? image.plain.description : `Image ${getIndex(image, this.images) + 1}`;\n  }\n\n  /**\n   * Method to get the title for an image.\n   * @param Image image to get its title\n   * @returns string the title of the input image\n   */\n  getTitleDisplay(image: Image): string {\n    let description = '';\n\n    if (image.plain && image.plain.description) {\n      description = image.plain.description;\n    } else if (image.modal && image.modal.description) {\n      description = image.modal.description;\n    }\n\n    const currentIndex: number = getIndex(image, this.images);\n    const prevDescription: string = 'Image ' + (currentIndex + 1) + '/' + this.images.length;\n    let currImgDescription: string = description ? description : '';\n\n    if (currImgDescription !== '') {\n      currImgDescription = ' - ' + currImgDescription;\n    }\n    return prevDescription + currImgDescription;\n  }\n\n  /**\n   * Method used in the template to track ids in ngFor.\n   * @param number index of the array\n   * @param Image item of the array\n   * @returns number the id of the item\n   */\n  trackById(index: number, item: Image): number {\n    return item.id;\n  }\n\n  /**\n   * Private method to build and return a `PlainGalleryConfig` object, proving also default values.\n   * @returns PlainGalleryConfig the plain gallery configuration\n   * @throws an Error if layout and strategy aren't compatible\n   */\n  private initPlainGalleryConfig(): PlainGalleryConfig {\n    const config: PlainGalleryConfig = Object.assign({}, this.defaultPlainConfig, this.plainGalleryConfig);\n\n    if (config.layout instanceof LineLayout) {\n      if (config.strategy !== PlainGalleryStrategy.ROW && config.strategy !== PlainGalleryStrategy.COLUMN) {\n        throw new Error('LineLayout requires either ROW or COLUMN strategy');\n      }\n      if (!config.layout || !config.layout.breakConfig) {\n        throw new Error('Both layout and breakConfig must be valid');\n      }\n    }\n\n    if (config.layout instanceof GridLayout) {\n      if (config.strategy !== PlainGalleryStrategy.GRID) {\n        throw new Error('GridLayout requires GRID strategy');\n      }\n      if (!config.layout || !config.layout.breakConfig) {\n        throw new Error('Both layout and breakConfig must be valid');\n      }\n      // force wrap for grid layout\n      config.layout.breakConfig.wrap = true;\n    }\n\n    if (config.layout instanceof AdvancedLayout) {\n      if (config.strategy !== PlainGalleryStrategy.CUSTOM) {\n        throw new Error('AdvancedLayout requires CUSTOM strategy');\n      }\n    }\n    return config;\n  }\n\n  /**\n   * Private method to init both `imageGrid` and other style variables,\n   * based on the layout type.\n   */\n  private initImageGrid() {\n    const config: PlainGalleryConfig = this.configPlainGallery;\n\n    // reset the array to prevent issues in case of GridLayout\n    this.imageGrid = [];\n\n    if (config.layout instanceof LineLayout) {\n      const layout: LineLayout = config.layout;\n      const row: Image[] = this.images.filter((val: Image, i: number) => i < layout.breakConfig.length || layout.breakConfig.length === -1);\n      this.imageGrid = [row];\n\n      this.size = config.layout.size;\n\n      switch (config.strategy) {\n        case PlainGalleryStrategy.ROW:\n          this.directionStyle = 'row';\n          break;\n        case PlainGalleryStrategy.COLUMN:\n          this.directionStyle = 'column';\n          this.wrapStyle = layout.breakConfig.wrap;\n          break;\n      }\n      this.justifyStyle = layout.justify;\n    }\n\n    if (config.layout instanceof GridLayout) {\n      const layout: GridLayout = config.layout;\n      const count: number = Math.ceil(this.images.length / layout.breakConfig.length);\n      let start = 0;\n      let end: number = layout.breakConfig.length - 1;\n\n      for (let j = 0; j < count; j++) {\n        const row: Image[] = this.images.filter((val: Image, i: number) => i >= start && i <= end);\n        this.imageGrid.push(row);\n        start = end + 1;\n        end = start + layout.breakConfig.length - 1;\n      }\n\n      this.size = config.layout.size;\n\n      const pixels: number = +layout.size.width.replace('px', '');\n\n      this.widthStyle = pixels * layout.breakConfig.length + pixels / 2 + 'px';\n      this.wrapStyle = layout.breakConfig.wrap;\n\n      this.directionStyle = 'row';\n    }\n\n    if (config.layout instanceof AdvancedLayout) {\n      this.imageGrid = [this.images];\n    }\n  }\n}\n","/*\n The MIT License (MIT)\n\n Copyright (c) 2017 Stefano Cappa (Ks89)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NON INFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n */\n\nimport { BackgroundComponent } from './background/background.component';\nimport { ModalGalleryComponent } from './modal-gallery/modal-gallery.component';\nimport { CarouselComponent } from './carousel/carousel.component';\nimport { CarouselPreviewsComponent } from './carousel/carousel-previews/carousel-previews.component';\nimport { UpperButtonsComponent } from './upper-buttons/upper-buttons.component';\nimport { DotsComponent } from './dots/dots.component';\nimport { PreviewsComponent } from './previews/previews.component';\nimport { CurrentImageComponent } from './current-image/current-image.component';\nimport { LoadingSpinnerComponent } from './current-image/loading-spinner/loading-spinner.component';\nimport { AccessibleComponent } from './accessible.component';\nimport { PlainGalleryComponent } from './plain-gallery/plain-gallery.component';\n\nexport { ModalGalleryComponent } from './modal-gallery/modal-gallery.component';\nexport { CarouselComponent } from './carousel/carousel.component';\n\n/**\n * Array of all components.\n */\nexport const COMPONENTS = [\n  BackgroundComponent,\n  PlainGalleryComponent,\n  ModalGalleryComponent,\n  CarouselComponent,\n  CarouselPreviewsComponent,\n  UpperButtonsComponent,\n  DotsComponent,\n  PreviewsComponent,\n  CurrentImageComponent,\n  LoadingSpinnerComponent,\n  AccessibleComponent\n];\n","/*\n The MIT License (MIT)\n\n Copyright (c) 2017-2018 Stefano Cappa (Ks89)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NON INFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n */\n\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { DIRECTIVES } from './directives/directives';\nimport { COMPONENTS, ModalGalleryComponent, CarouselComponent } from './components/components';\nimport { KEYBOARD_CONFIGURATION, KeyboardService } from './services/keyboard.service';\nimport { KeyboardServiceConfig } from './model/keyboard-service-config.interface';\nimport { HAMMER_GESTURE_CONFIG, HammerGestureConfig } from '@angular/platform-browser';\n\n// to prevent bad scrolling behaviour on mobile phone with carousels.\n// From @mohaxspb (https://github.com/Ks89/angular-modal-gallery/pull/187)\nexport class KsHammerGestureConfig extends HammerGestureConfig {\n  buildHammer(element: HTMLElement) {\n    return new Hammer(element, {\n      touchAction: 'pan-y'\n    });\n  }\n}\n\n/**\n * Module to import it in the root module of your application.\n */\n@NgModule({\n  imports: [CommonModule],\n  declarations: [COMPONENTS, DIRECTIVES],\n  exports: [ModalGalleryComponent, CarouselComponent],\n  providers: [\n    {\n      provide: HAMMER_GESTURE_CONFIG,\n      useClass: KsHammerGestureConfig\n    }\n  ]\n})\nexport class GalleryModule {\n  /**\n   * Importing with '.forRoot()' is deprecated. I'll provide a new way to do this in next releases.\n   * Will be removed in 8.0.0 or 9.0.0\n   */\n  static forRoot(config?: KeyboardServiceConfig): ModuleWithProviders<GalleryModule> {\n    return {\n      ngModule: GalleryModule,\n      providers: [\n        {\n          provide: KEYBOARD_CONFIGURATION,\n          useValue: config ? config : {}\n        },\n        {\n          provide: KeyboardService,\n          useFactory: setupKeyboardService,\n          deps: [KEYBOARD_CONFIGURATION]\n        }\n      ]\n    };\n  }\n}\n\n/**\n * Function to setup the keyboard service inside the `forRoot` method.\n * @param KeyboardServiceConfig injector is an interface of type `KeyboardServiceConfig` to pass data to KeyboardService\n * @returns KeyboardService an instance of the `KeyboardService`\n */\nexport function setupKeyboardService(injector: KeyboardServiceConfig): KeyboardService {\n  return new KeyboardService(injector);\n}\n"]}