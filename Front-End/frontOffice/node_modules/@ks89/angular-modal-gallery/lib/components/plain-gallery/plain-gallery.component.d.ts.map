{"version":3,"file":"plain-gallery.component.d.ts","sources":["plain-gallery.component.d.ts"],"names":[],"mappingssourcesContent":["import { EventEmitter, OnChanges, OnInit, SimpleChanges } from '@angular/core';\nimport { AccessibilityConfig } from '../../model/accessibility.interface';\nimport { Image } from '../../model/image.class';\nimport { Size } from '../../model/size.interface';\nimport { PlainGalleryConfig } from '../../model/plain-gallery-config.interface';\n/**\n * Component with the gallery of thumbs.\n * In receives an array of Images, a boolean to show/hide\n * the gallery (feature used by imagePointer) and a config\n * object to customize the behaviour of this component.\n * Also, it emits click events as outputs.\n */\nexport declare class PlainGalleryComponent implements OnInit, OnChanges {\n    /**\n     * Array of `Image` that represent the model of this library with all images, thumbs and so on.\n     */\n    images: Image[];\n    /**\n     * Boolean to show/hide plain gallery. If true the plain gallery will be visible, false otherwise.\n     */\n    showGallery: boolean;\n    /**\n     * Object of type `PlainGalleryConfig` to configure the plain gallery.\n     */\n    plainGalleryConfig: PlainGalleryConfig;\n    /**\n     * Object of type `AccessibilityConfig` to init custom accessibility features.\n     * For instance, it contains titles, alt texts, aria-labels and so on.\n     */\n    accessibilityConfig: AccessibilityConfig;\n    /**\n     * Output to emit an event when an image is changed.\n     */\n    show: EventEmitter<number>;\n    /**\n     * Object of type `PlainGalleryConfig` to configure this component.\n     */\n    configPlainGallery: PlainGalleryConfig;\n    /**\n     * Bi-dimensional array of `Image` object to store images to display as plain gallery.\n     * [] by default.\n     */\n    imageGrid: Image[][];\n    /**\n     * Size object used in the template to resize images.\n     */\n    size: Size;\n    /**\n     * Boolean passed as input to `ks-wrap` directive to configure flex-wrap css property.\n     * However it's not enough, because you need to limit the width using `widthStyle` public variable.\n     * For more info check https://developer.mozilla.org/it/docs/Web/CSS/flex-wrap\n     */\n    wrapStyle: boolean;\n    /**\n     * String passed as input to `ks-wrap` directive to set width to be able to force overflow.\n     * In this way, `wrapStyle` (flex-wrap css property) will be used as requested.\n     */\n    widthStyle: string;\n    /**\n     * String passed as input to `ks-direction` directive to set the flex-direction css property.\n     * For more info check https://developer.mozilla.org/it/docs/Web/CSS/flex-direction\n     */\n    directionStyle: string;\n    /**\n     * String passed as input to `ks-direction` directive to set the justify-content css property.\n     * For more info check https://developer.mozilla.org/it/docs/Web/CSS/justify-content\n     */\n    justifyStyle: string;\n    /**\n     * Default image size object\n     */\n    private defaultSize;\n    /**\n     * Default layout config object\n     * Note that length=-1 means infinity\n     */\n    private defaultLayout;\n    /**\n     * Default plain gallery config object\n     */\n    private defaultPlainConfig;\n    /**\n     * Method ´ngOnChanges´ to update both `imageGrid` and`configPlainGallery`.\n     * This is an Angular's lifecycle hook, so its called automatically by Angular itself.\n     * In particular, it's called when any data-bound property of a directive changes!!!\n     */\n    ngOnChanges(changes: SimpleChanges): void;\n    /**\n     * Method ´ngOnInit´ to init both `configPlainGallery` calling `initPlainGalleryConfig()`\n     * and `imageGrid invoking `initImageGrid()`.\n     * This is an Angular's lifecycle hook, so its called automatically by Angular itself.\n     * In particular, it's called only one time!!!\n     */\n    ngOnInit(): void;\n    /**\n     * Method called when you click on an image of the plain (or inline) gallery.\n     * This will emit the show event with the index number as payload.\n     * @param number index of the clicked image\n     */\n    showModalGallery(index: number): void;\n    /**\n     * Method called when you click on an image of the plain (or inline) gallery.\n     * This will emit the show event with the image as payload.\n     * @param Image img is the Image to show\n     */\n    showModalGalleryByImage(img: Image): void;\n    /**\n     * Method to get `alt attribute`.\n     * `alt` specifies an alternate text for an image, if the image cannot be displayed.\n     * @param Image image to get its alt description.\n     * @returns string alt description of the image\n     */\n    getAltPlainDescriptionByImage(image: Image): string;\n    /**\n     * Method to get the title for an image.\n     * @param Image image to get its title\n     * @returns string the title of the input image\n     */\n    getTitleDisplay(image: Image): string;\n    /**\n     * Method used in the template to track ids in ngFor.\n     * @param number index of the array\n     * @param Image item of the array\n     * @returns number the id of the item\n     */\n    trackById(index: number, item: Image): number;\n    /**\n     * Private method to build and return a `PlainGalleryConfig` object, proving also default values.\n     * @returns PlainGalleryConfig the plain gallery configuration\n     * @throws an Error if layout and strategy aren't compatible\n     */\n    private initPlainGalleryConfig;\n    /**\n     * Private method to init both `imageGrid` and other style variables,\n     * based on the layout type.\n     */\n    private initImageGrid;\n}\n"]}