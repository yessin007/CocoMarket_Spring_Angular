{"version":3,"file":"current-image.component.d.ts","sources":["current-image.component.d.ts"],"names":[],"mappingssourcesContent":["import { AfterContentInit, ChangeDetectorRef, EventEmitter, NgZone, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';\nimport { AccessibleComponent } from '../accessible.component';\nimport { AccessibilityConfig } from '../../model/accessibility.interface';\nimport { Action } from '../../model/action.enum';\nimport { Image, ImageModalEvent } from '../../model/image.class';\nimport { InternalLibImage } from '../../model/image-internal.class';\nimport { KeyboardConfig } from '../../model/keyboard-config.interface';\nimport { SlideConfig } from '../../model/slide-config.interface';\nimport { CurrentImageConfig } from '../../model/current-image-config.interface';\n/**\n * Interface to describe the Load Event, used to\n * emit an event when the image is finally loaded and the spinner has gone.\n */\nexport interface ImageLoadEvent {\n    status: boolean;\n    index: number;\n    id: number;\n}\n/**\n * Component with the current image with some additional elements like arrows and side previews.\n */\nexport declare class CurrentImageComponent extends AccessibleComponent implements OnInit, OnChanges, AfterContentInit, OnDestroy {\n    private _platformId;\n    private _ngZone;\n    private ref;\n    /**\n     * Unique id (>=0) of the current instance of this library. This is useful when you are using\n     * the service to call modal gallery without open it manually.\n     */\n    id: number;\n    /**\n     * Object of type `InternalLibImage` that represent the visible image.\n     */\n    currentImage: InternalLibImage;\n    /**\n     * Array of `InternalLibImage` that represent the model of this library with all images,\n     * thumbs and so on.\n     */\n    images: InternalLibImage[];\n    /**\n     * Boolean that it is true if the modal gallery is visible.\n     * If yes, also this component should be visible.\n     */\n    isOpen: boolean;\n    /**\n     * Interface to configure current image in modal-gallery.\n     * For instance you can disable navigation on click on current image (enabled by default).\n     */\n    currentImageConfig: CurrentImageConfig;\n    /**\n     * Object of type `SlideConfig` to get `infinite sliding`.\n     */\n    slideConfig: SlideConfig;\n    /**\n     * Object of type `AccessibilityConfig` to init custom accessibility features.\n     * For instance, it contains titles, alt texts, aria-labels and so on.\n     */\n    accessibilityConfig: AccessibilityConfig;\n    /**\n     * Object of type `KeyboardConfig` to assign custom keys to both ESC, RIGHT and LEFT keyboard's actions.\n     */\n    keyboardConfig: KeyboardConfig;\n    /**\n     * Output to emit an event when images are loaded. The payload contains an `ImageLoadEvent`.\n     */\n    loadImage: EventEmitter<ImageLoadEvent>;\n    /**\n     * Output to emit any changes of the current image. The payload contains an `ImageModalEvent`.\n     */\n    changeImage: EventEmitter<ImageModalEvent>;\n    /**\n     * Output to emit an event when the modal gallery is closed. The payload contains an `ImageModalEvent`.\n     */\n    close: EventEmitter<ImageModalEvent>;\n    /**\n     * Subject to play modal-gallery.\n     */\n    private start$;\n    /**\n     * Subject to stop modal-gallery.\n     */\n    private stop$;\n    /**\n     * Enum of type `Action` that represents a normal action.\n     * Declared here to be used inside the template.\n     */\n    normalAction: Action;\n    /**\n     * Enum of type `Action` that represents a mouse click on a button.\n     * Declared here to be used inside the template.\n     */\n    clickAction: Action;\n    /**\n     * Enum of type `Action` that represents a keyboard action.\n     * Declared here to be used inside the template.\n     */\n    keyboardAction: Action;\n    /**\n     * Boolean that it's true when you are watching the first image (currently visible).\n     * False by default\n     */\n    isFirstImage: boolean;\n    /**\n     * Boolean that it's true when you are watching the last image (currently visible).\n     * False by default\n     */\n    isLastImage: boolean;\n    /**\n     * Boolean that it's true if an image of the modal gallery is still loading.\n     * True by default\n     */\n    loading: boolean;\n    /**\n     * Object of type `CurrentImageConfig` exposed to the template. This field is initialized\n     * applying transformations, default values and so on to the input of the same type.\n     */\n    configCurrentImage: CurrentImageConfig;\n    configSlide: SlideConfig;\n    /**\n     * Private object without type to define all swipe actions used by hammerjs.\n     */\n    private SWIPE_ACTION;\n    constructor(_platformId: any, _ngZone: NgZone, ref: ChangeDetectorRef);\n    /**\n     * Listener to stop the gallery when the mouse pointer is over the current image.\n     */\n    onMouseEnter(): void;\n    /**\n     * Listener to play the gallery when the mouse pointer leave the current image.\n     */\n    onMouseLeave(): void;\n    /**\n     * Method ´ngOnInit´ to build `configCurrentImage` applying default values.\n     * This is an Angular's lifecycle hook, so its called automatically by Angular itself.\n     * In particular, it's called only one time!!!\n     */\n    ngOnInit(): void;\n    /**\n     * Method ´ngOnChanges´ to update `loading` status and emit events.\n     * If the gallery is open, then it will also manage boundary arrows and sliding.\n     * This is an Angular's lifecycle hook, so its called automatically by Angular itself.\n     * In particular, it's called when any data-bound property of a directive changes!!!\n     */\n    ngOnChanges(changes: SimpleChanges): void;\n    ngAfterContentInit(): void;\n    /**\n     * Method to handle keypress based on the `keyboardConfig` input. It gets the keyCode of\n     * the key that triggered the keypress event to navigate between images or to close the modal gallery.\n     * @param number keyCode of the key that triggered the keypress event\n     */\n    onKeyPress(keyCode: number): void;\n    /**\n     * Method to get the image description based on input params.\n     * If you provide a full description this will be the visible description, otherwise,\n     * it will be built using the `Description` object, concatenating its fields.\n     * @param Image image to get its description. If not provided it will be the current image\n     * @returns String description of the image (or the current image if not provided)\n     * @throws an Error if description isn't available\n     */\n    getDescriptionToDisplay(image?: Image): string;\n    /**\n     * Method to get `alt attribute`.\n     * `alt` specifies an alternate text for an image, if the image cannot be displayed.\n     * @param Image image to get its alt description. If not provided it will be the current image\n     * @returns String alt description of the image (or the current image if not provided)\n     */\n    getAltDescriptionByImage(image?: Image): string;\n    /**\n     * Method to get the title attributes based on descriptions.\n     * This is useful to prevent accessibility issues, because if DescriptionStrategy is ALWAYS_HIDDEN,\n     * it prevents an empty string as title.\n     * @param Image image to get its description. If not provided it will be the current image\n     * @returns String title of the image based on descriptions\n     * @throws an Error if description isn't available\n     */\n    getTitleToDisplay(image?: Image): string;\n    /**\n     * Method to get the left side preview image.\n     * @returns Image the image to show as size preview on the left\n     */\n    getLeftPreviewImage(): Image;\n    /**\n     * Method to get the right side preview image.\n     * @returns Image the image to show as size preview on the right\n     */\n    getRightPreviewImage(): Image;\n    /**\n     * Method called by events from both keyboard and mouse on an image.\n     * This will invoke the nextImage method.\n     * @param KeyboardEvent | MouseEvent event payload\n     * @param Action action that triggered the event or `Action.NORMAL` if not provided\n     */\n    onImageEvent(event: KeyboardEvent | MouseEvent, action?: Action): void;\n    /**\n     * Method called by events from both keyboard and mouse on a navigation arrow.\n     * @param string direction of the navigation that can be either 'next' or 'prev'\n     * @param KeyboardEvent | MouseEvent event payload\n     * @param Action action that triggered the event or `Action.NORMAL` if not provided\n     * @param boolean disable to disable navigation\n     */\n    onNavigationEvent(direction: string, event: KeyboardEvent, action?: Action, disable?: boolean): void;\n    /**\n     * Method to go back to the previous image.\n     * @param action Enum of type `Action` that represents the source\n     *  action that moved back to the previous image. `Action.NORMAL` by default.\n     */\n    prevImage(action?: Action): void;\n    /**\n     * Method to go back to the previous image.\n     * @param action Enum of type `Action` that represents the source\n     *  action that moved to the next image. `Action.NORMAL` by default.\n     */\n    nextImage(action?: Action): void;\n    /**\n     * Method to emit an event as loadImage output to say that the requested image if loaded.\n     * This method is invoked by the javascript's 'load' event on an img tag.\n     * @param Event event that triggered the load\n     */\n    onImageLoad(event: Event): void;\n    /**\n     * Method used by Hammerjs to support touch gestures (you can also invert the swipe direction with configCurrentImage.invertSwipe).\n     * @param action String that represent the direction of the swipe action. 'swiperight' by default.\n     */\n    swipe(action?: string): void;\n    /**\n     * Method used in `modal-gallery.component` to get the index of an image to delete.\n     * @param Image image to get the index, or the visible image, if not passed\n     * @returns number the index of the image\n     */\n    getIndexToDelete(image?: Image): number;\n    /**\n     * Method to play modal gallery.\n     */\n    playCarousel(): void;\n    /**\n     * Stops modal gallery from cycling through items.\n     */\n    stopCarousel(): void;\n    /**\n     * Method to cleanup resources. In fact, this will stop the modal gallery.\n     * This is an Angular's lifecycle hook that is called when this component is destroyed.\n     */\n    ngOnDestroy(): void;\n    /**\n     * Private method to update both `isFirstImage` and `isLastImage` based on\n     * the index of the current image.\n     * @param number currentIndex is the index of the current image\n     */\n    private handleBoundaries;\n    /**\n     * Private method to check if next/prev actions should be blocked.\n     * It checks if configSlide.infinite === false and if the image index is equals to the input parameter.\n     * If yes, it returns true to say that sliding should be blocked, otherwise not.\n     * @param number boundaryIndex that could be either the beginning index (0) or the last index\n     *  of images (this.images.length - 1).\n     * @returns boolean true if configSlide.infinite === false and the current index is\n     *  either the first or the last one.\n     */\n    private isPreventSliding;\n    /**\n     * Private method to get the next index.\n     * This is necessary because at the end, when you call next again, you'll go to the first image.\n     * That happens because all modal images are shown like in a circle.\n     */\n    private getNextImage;\n    /**\n     * Private method to get the previous index.\n     * This is necessary because at index 0, when you call prev again, you'll go to the last image.\n     * That happens because all modal images are shown like in a circle.\n     */\n    private getPrevImage;\n    /**\n     * Private method to build a text description.\n     * This is used also to create titles.\n     * @param Image image to get its description. If not provided it will be the current image.\n     * @param boolean imageWithoutDescription is a boolean that it's true if the image hasn't a 'modal' description.\n     * @returns String description built concatenating image fields with a specific logic.\n     */\n    private buildTextDescription;\n    /**\n     * Private method to call handleBoundaries when ngOnChanges is called.\n     */\n    private updateIndexes;\n}\n"]}