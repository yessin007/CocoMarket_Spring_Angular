{"version":3,"file":"upper-buttons.component.d.ts","sources":["upper-buttons.component.d.ts"],"names":[],"mappingssourcesContent":["import { EventEmitter, OnInit } from '@angular/core';\nimport { AccessibleComponent } from '../accessible.component';\nimport { Action } from '../../model/action.enum';\nimport { Image } from '../../model/image.class';\nimport { ButtonConfig, ButtonEvent, ButtonsConfig } from '../../model/buttons-config.interface';\n/**\n * Internal representation of `ButtonConfig` with an optional `id` field, used by trackId to improve performances.\n */\nexport interface InternalButtonConfig extends ButtonConfig {\n    id?: number;\n}\n/**\n * Component with all upper buttons.\n * Also it emits click events as outputs.\n */\nexport declare class UpperButtonsComponent extends AccessibleComponent implements OnInit {\n    /**\n     * Object of type `Image` that represent the visible image.\n     */\n    currentImage: Image;\n    /**\n     * Object of type `ButtonsConfig` to init UpperButtonsComponent's features.\n     * For instance, it contains an array of buttons.\n     */\n    buttonsConfig: ButtonsConfig;\n    /**\n     * Output to emit clicks on refresh button. The payload contains a `ButtonEvent`.\n     */\n    refresh: EventEmitter<ButtonEvent>;\n    /**\n     * Output to emit clicks on delete button. The payload contains a `ButtonEvent`.\n     */\n    delete: EventEmitter<ButtonEvent>;\n    /**\n     * Output to emit clicks on navigate button. The payload contains a `ButtonEvent`.\n     */\n    navigate: EventEmitter<ButtonEvent>;\n    /**\n     * Output to emit clicks on download button. The payload contains a `ButtonEvent`.\n     */\n    download: EventEmitter<ButtonEvent>;\n    /**\n     * Output to emit clicks on close button. The payload contains a `ButtonEvent`.\n     */\n    close: EventEmitter<ButtonEvent>;\n    /**\n     * Output to emit clicks on full-screen button. The payload contains a `ButtonEvent`.\n     */\n    fullscreen: EventEmitter<ButtonEvent>;\n    /**\n     * Output to emit clicks on all custom buttons. The payload contains a `ButtonEvent`.\n     */\n    customEmit: EventEmitter<ButtonEvent>;\n    /**\n     * Array of `InternalButtonConfig` exposed to the template. This field is initialized\n     * applying transformations, default values and so on to the input of the same type.\n     */\n    buttons: InternalButtonConfig[];\n    /**\n     * Object of type `ButtonsConfig` exposed to the template. This field is initialized\n     * applying transformations, default values and so on to the input of the same type.\n     */\n    configButtons: ButtonsConfig;\n    /**\n     * Default buttons array for standard configuration\n     */\n    private defaultButtonsDefault;\n    /**\n     * Default buttons array for simple configuration\n     */\n    private simpleButtonsDefault;\n    /**\n     * Default buttons array for advanced configuration\n     */\n    private advancedButtonsDefault;\n    /**\n     * Default buttons array for full configuration\n     */\n    private fullButtonsDefault;\n    /**\n     * Method ´ngOnInit´ to build `configButtons` applying a default value and also to\n     * init the `buttons` array.\n     * This is an Angular's lifecycle hook, so its called automatically by Angular itself.\n     * In particular, it's called only one time!!!\n     */\n    ngOnInit(): void;\n    /**\n     * Method called by events from both keyboard and mouse on a button.\n     * This will call a private method to trigger an output with the right payload.\n     * @param InternalButtonConfig button that called this method\n     * @param KeyboardEvent | MouseEvent event payload\n     * @param Action action that triggered the source event or `Action.CLICK` if not specified\n     * @throws an error if the button type is unknown\n     */\n    onEvent(button: InternalButtonConfig, event: KeyboardEvent | MouseEvent, action?: Action): void;\n    /**\n     * Method used in the template to track ids in ngFor.\n     * @param number index of the array\n     * @param Image item of the array\n     * @returns number the id of the item or undefined if the item is not valid\n     */\n    trackById(index: number, item: InternalButtonConfig): number | undefined;\n    /**\n     * Private method to emit an event using the specified output as an `EventEmitter`.\n     * @param EventEmitter<ButtonEvent> emitter is the output to emit the `ButtonEvent`\n     * @param KeyboardEvent | MouseEvent event is the source that triggered this method\n     * @param ButtonEvent dataToEmit payload to emit\n     */\n    private triggerOnMouseAndKeyboard;\n    /**\n     * Private method to add ids to the array of buttons.\n     * It adds ids in a reverse way, to be sure that the last button will always have id = 0.\n     * This is really useful in unit testing to be sure that close button always have id = 0, download 1 and so on...\n     * It's totally transparent to the user.\n     * @param ButtonConfig[] buttons config array\n     * @returns ButtonConfig[] the input array with incremental numeric ids\n     */\n    private addButtonIds;\n    /**\n     * Private method to validate custom buttons received as input.\n     * @param ButtonConfig[] buttons config array\n     * @returns ButtonConfig[] the same input buttons config array\n     * @throws an error is exists a button with an unknown type\n     */\n    private validateCustomButtons;\n}\n"]}