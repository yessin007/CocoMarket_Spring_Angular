{"version":3,"file":"modal-gallery.component.d.ts","sources":["modal-gallery.component.d.ts"],"names":[],"mappingssourcesContent":["import { ChangeDetectorRef, EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';\nimport { ButtonEvent, ButtonsConfig } from '../../model/buttons-config.interface';\nimport { Image, ImageModalEvent } from '../../model/image.class';\nimport { Action } from '../../model/action.enum';\nimport { KeyboardConfig } from '../../model/keyboard-config.interface';\nimport { PreviewConfig } from '../../model/preview-config.interface';\nimport { SlideConfig } from '../../model/slide-config.interface';\nimport { AccessibilityConfig } from '../../model/accessibility.interface';\nimport { KeyboardService } from '../../services/keyboard.service';\nimport { GalleryService } from '../../services/gallery.service';\nimport { DotsConfig } from '../../model/dots-config.interface';\nimport { ImageLoadEvent } from '../current-image/current-image.component';\nimport { InternalLibImage } from '../../model/image-internal.class';\nimport { PlainGalleryConfig } from '../../model/plain-gallery-config.interface';\nimport { CurrentImageConfig } from '../../model/current-image-config.interface';\nimport { IdValidatorService } from '../../services/id-validator.service';\nimport { InteractionEvent } from '../../model/interaction-event.interface';\n/**\n * Main Component of this library with both the plain and modal galleries.\n */\nexport declare class ModalGalleryComponent implements OnInit, OnDestroy, OnChanges {\n    private keyboardService;\n    private galleryService;\n    private platformId;\n    private changeDetectorRef;\n    private idValidatorService;\n    /**\n     * Unique id (>=0) of the current instance of this library. This is useful when you are using\n     * the service to call modal gallery without open it manually.\n     */\n    id: number;\n    /**\n     * Array of `Image` that represent the model of this library with all images, thumbs and so on.\n     */\n    modalImages: Image[];\n    /**\n     * Object of type `ButtonsConfig` to show/hide buttons.\n     */\n    buttonsConfig: ButtonsConfig;\n    /**\n     * Boolean to enable modal-gallery close behaviour when clicking\n     * on the semi-transparent background. Enabled by default.\n     */\n    enableCloseOutside: boolean;\n    /**\n     * Interface to configure current image in modal-gallery.\n     * For instance you can disable navigation on click on current image (enabled by default).\n     */\n    currentImageConfig: CurrentImageConfig;\n    /**\n     * Object of type `DotsConfig` to init DotsComponent's features.\n     * For instance, it contains a param to show/hide dots.\n     */\n    dotsConfig: DotsConfig;\n    /**\n     * Object of type `PreviewConfig` to init PreviewsComponent's features.\n     * For instance, it contains a param to show/hide previews.\n     */\n    previewConfig: PreviewConfig;\n    /**\n     * Object of type `SlideConfig` to init side previews and `infinite sliding`.\n     */\n    slideConfig: SlideConfig;\n    /**\n     * Object of type `AccessibilityConfig` to init custom accessibility features.\n     * For instance, it contains titles, alt texts, aria-labels and so on.\n     */\n    accessibilityConfig: AccessibilityConfig;\n    /**\n     * Object of type `KeyboardConfig` to assign custom keys to ESC, RIGHT and LEFT keyboard's actions.\n     */\n    keyboardConfig: KeyboardConfig;\n    /**\n     * Object of type `PlainGalleryConfig` to configure the plain gallery.\n     */\n    plainGalleryConfig: PlainGalleryConfig;\n    /**\n     * Output to emit an event when the modal gallery is closed.\n     */\n    close: EventEmitter<ImageModalEvent>;\n    /**\n     * Output to emit an event when an image is changed.\n     */\n    show: EventEmitter<ImageModalEvent>;\n    /**\n     * Output to emit an event when the current image is the first one.\n     */\n    firstImage: EventEmitter<ImageModalEvent>;\n    /**\n     * Output to emit an event when the current image is the last one.\n     */\n    lastImage: EventEmitter<ImageModalEvent>;\n    /**\n     * Output to emit an event when the modal gallery is closed.\n     */\n    hasData: EventEmitter<ImageModalEvent>;\n    /**\n     * Output to emit an event when a button is clicked, but before that the action is triggered.\n     */\n    buttonBeforeHook: EventEmitter<ButtonEvent>;\n    /**\n     * Output to emit an event when a button is clicked, but after that the action is triggered.\n     */\n    buttonAfterHook: EventEmitter<ButtonEvent>;\n    /**\n     * Output to emit an event when someone clicks either an arrow of modal gallery or also in previews.\n     */\n    arrow: EventEmitter<InteractionEvent>;\n    /**\n     * Reference to the CurrentImageComponent to invoke methods on it.\n     */\n    currentImageComponent: any;\n    /**\n     * Boolean that it is true if the modal gallery is visible. False by default.\n     */\n    opened: boolean;\n    /**\n     * Boolean to open the modal gallery. False by default.\n     */\n    showGallery: boolean;\n    /**\n     * Array of `InternalLibImage` representing the model of this library with all images, thumbs and so on.\n     */\n    images: InternalLibImage[];\n    /**\n     * `Image` that is visible right now.\n     */\n    currentImage: InternalLibImage;\n    /**\n     * Object of type `SlideConfig` passed to currentImage and used to handle play/stop features. This field is initialized\n     * applying transformations, default values and so on to the input of the same type.\n     */\n    configSlide: SlideConfig;\n    private galleryServiceNavigateSubscription;\n    private galleryServiceCloseSubscription;\n    private galleryServiceUpdateSubscription;\n    private galleryServiceAutoPlaySubscription;\n    /**\n     * HostListener to catch browser's back button and destroy the gallery.\n     * This prevents weired behaviour about scrolling.\n     * Added to fix this issue: https://github.com/Ks89/angular-modal-gallery/issues/159\n     */\n    onPopState(e: Event): void;\n    /**\n     * Constructor with the injection of ´KeyboardService´, an object to support Server-Side Rendering and other useful services.\n     */\n    constructor(keyboardService: KeyboardService, galleryService: GalleryService, platformId: Object, changeDetectorRef: ChangeDetectorRef, idValidatorService: IdValidatorService);\n    /**\n     * Method ´ngOnChanges´ to re-init images if input is changed.\n     * This is an Angular's lifecycle hook, so its called automatically by Angular itself.\n     * In particular, it's called before `ngOnInit()` and whenever one or more data-bound input properties change.\n     * @param changes `SimpleChanges` object of current and previous property values provided by Angular.\n     */\n    ngOnChanges(changes: SimpleChanges): void;\n    /**\n     * Method ´ngOnInit´ to init images calling `initImages()`.\n     * This is an Angular's lifecycle hook, so its called automatically by Angular itself.\n     * In particular, it's called only one time!!!\n     */\n    ngOnInit(): void;\n    /**\n     * Method called by custom upper buttons.\n     * @param ButtonEvent event payload\n     */\n    onCustomEmit(event: ButtonEvent): void;\n    /**\n     * Method called by the full-screen upper button.\n     * @param ButtonEvent event payload\n     */\n    onFullScreen(event: ButtonEvent): void;\n    /**\n     * Method called by the delete upper button.\n     * @param ButtonEvent event payload\n     */\n    onDelete(event: ButtonEvent): void;\n    /**\n     * Method called by the navigate upper button.\n     * @param ButtonEvent event payload\n     */\n    onNavigate(event: ButtonEvent): void;\n    /**\n     * Method called by the download upper button.\n     * @param ButtonEvent event payload\n     */\n    onDownload(event: ButtonEvent): void;\n    /**\n     * Method called by the close upper button.\n     * @param ButtonEvent event payload\n     * @param Action action that triggered the close method. `Action.NORMAL` by default\n     */\n    onCloseGallery(event: ButtonEvent, action?: Action): void;\n    /**\n     * Method to close the modal gallery specifying the action.\n     * It also reset the `keyboardService` to prevent multiple listeners.\n     * @param Action action type. `Action.NORMAL` by default\n     * @param boolean isCalledByService is true if called by gallery.service, otherwise false\n     */\n    closeGallery(action?: Action, isCalledByService?: boolean): void;\n    /**\n     * Method called when you click on an image of your plain (or inline) gallery.\n     * @param number index of the clicked image\n     */\n    onShowModalGallery(index: number): void;\n    /**\n     * Method to show the modal gallery displaying the image with\n     * the index specified as input parameter.\n     * It will also register a new `keyboardService` to catch keyboard's events to download the current\n     * image with keyboard's shortcuts. This service, will be removed either when modal gallery component\n     * will be destroyed or when the gallery is closed invoking the `closeGallery` method.\n     * @param number index of the image to show\n     * @param boolean isCalledByService is true if called by gallery.service, otherwise false\n     */\n    showModalGallery(index: number, isCalledByService?: boolean): void;\n    /**\n     * Method called when the image changes and used to update the `currentImage` object.\n     * @param ImageModalEvent event payload\n     */\n    onChangeCurrentImage(event: ImageModalEvent): void;\n    isPlainGalleryVisible(): boolean;\n    /**\n     * Method called when you click 'outside' (i.e. on the semi-transparent background)\n     * to close the modal gallery if `enableCloseOutside` is true.\n     * @param boolean event payload. True to close the modal gallery, false otherwise\n     */\n    onClickOutside(event: boolean): void;\n    /**\n     * Method called when an image is loaded and the loading spinner has gone.\n     * It sets the previouslyLoaded flag inside the Image to hide loading spinner when displayed again.\n     * @param ImageLoadEvent event payload\n     */\n    onImageLoad(event: ImageLoadEvent): void;\n    /**\n     * Method called when a dot is clicked and used to update the current image.\n     * @param number index of the clicked dot\n     */\n    onClickDot(index: number): void;\n    /**\n     * Method called when an image preview is clicked and used to update the current image.\n     * @param Image preview image\n     */\n    onClickPreview(event: ImageModalEvent): void;\n    /**\n     * Method to download the current image, only if `downloadable` is true.\n     * It contains also a logic to enable downloading features also for IE11.\n     */\n    downloadImage(): void;\n    /**\n     * Method to cleanup resources. In fact, this will reset keyboard's service.\n     * This is an Angular's lifecycle hook that is called when this component is destroyed.\n     */\n    ngOnDestroy(): void;\n    /**\n     * Private method to download the current image for all browsers except for IE11.\n     */\n    private downloadImageAllBrowsers;\n    /**\n     * Private method to download the current image only for IE11 using\n     * custom javascript's methods available only on IE.\n     */\n    private downloadImageOnlyIEorEdge;\n    /**\n     * Private method to get the `ButtonEvent` to emit, merging the input `ButtonEvent`\n     * with the current image.\n     * @param ButtonEvent event payload to return\n     * @returns ButtonEvent event payload with the current image included\n     */\n    private getButtonEventToEmit;\n    /**\n     * Private method to get the file name from an input path.\n     * This is used either to get the image's name from its path or from the Image itself,\n     * if specified as 'downloadFileName' by the user.\n     * @param Image image to extract its file name\n     * @returns string string file name of the input image.\n     */\n    private getFileName;\n    /**\n     * Private method to initialize `images` as array of `Image`s.\n     * Also, it will emit ImageowmodaModalEvent to say that images are loaded.\n     */\n    private initImages;\n    /**\n     * Private method to emit events when either the last or the first image are visible.\n     * @param action Enum of type Action that represents the source of the event that changed the\n     *  current image to the first one or the last one.\n     * @param indexToCheck is the index number of the image (the first or the last one).\n     */\n    private emitBoundaryEvent;\n    /**\n     * Private method to check if this library is running on\n     * Microsoft browsers or not (i.e. it detects both IE11 and Edge)\n     * supporting also Server-Side Rendering.\n     * Inspired by https://msdn.microsoft.com/it-it/library/hh779016(v=vs.85).aspx\n     * @returns any the result\n     */\n    private isIEorEdge;\n}\n"]}