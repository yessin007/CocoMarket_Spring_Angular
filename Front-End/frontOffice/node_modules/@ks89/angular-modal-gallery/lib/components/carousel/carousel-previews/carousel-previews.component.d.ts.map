{"version":3,"file":"carousel-previews.component.d.ts","sources":["carousel-previews.component.d.ts"],"names":[],"mappingssourcesContent":["import { ChangeDetectorRef, EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';\nimport { DomSanitizer, SafeStyle } from '@angular/platform-browser';\nimport { BreakpointObserver } from '@angular/cdk/layout';\nimport { AccessibleComponent } from '../../accessible.component';\nimport { AccessibilityConfig } from '../../../model/accessibility.interface';\nimport { Image, ImageEvent } from '../../../model/image.class';\nimport { InternalLibImage } from '../../../model/image-internal.class';\nimport { CarouselPreviewConfig } from '../../../model/carousel-preview-config.interface';\nimport { CarouselConfig } from '../../../model/carousel-config.interface';\nimport { Action } from '../../../model/action.enum';\n/**\n * Component with image previews for carousel\n */\nexport declare class CarouselPreviewsComponent extends AccessibleComponent implements OnInit, OnChanges, OnDestroy {\n    private ref;\n    private breakpointObserver;\n    private sanitizer;\n    /**\n     * Variable to change the max-width of the host component\n     */\n    hostMaxWidth: string;\n    /**\n     * Variable to set aria-label of the host component\n     */\n    ariaLabel: string;\n    /**\n     * Object of type `CarouselConfig` to init CarouselComponent's features.\n     * For instance, it contains parameters to change the style, how it navigates and so on.\n     */\n    carouselConfig: CarouselConfig;\n    /**\n     * Object of type `InternalLibImage` that represent the visible image.\n     */\n    currentImage: InternalLibImage;\n    /**\n     * Array of `InternalLibImage` that represent the model of this library with all images,\n     * thumbs and so on.\n     */\n    images: InternalLibImage[];\n    /**\n     * Object of type `CarouselPreviewConfig` to init PreviewsComponent's features.\n     * For instance, it contains a param to show/hide this component, sizes.\n     */\n    previewConfig: CarouselPreviewConfig;\n    /**\n     * Object of type `AccessibilityConfig` to init custom accessibility features.\n     * For instance, it contains titles, alt texts, aria-labels and so on.\n     */\n    accessibilityConfig: AccessibilityConfig;\n    /**\n     * Output to emit the clicked preview. The payload contains the `InternalLibImage` associated to the clicked preview.\n     */\n    clickPreview: EventEmitter<ImageEvent>;\n    /**\n     * Enum of type `Action` that represents a mouse click on a button.\n     * Declared here to be used inside the template.\n     */\n    clickAction: Action;\n    /**\n     * Enum of type `Action` that represents a keyboard action.\n     * Declared here to be used inside the template.\n     */\n    keyboardAction: Action;\n    /**\n     * Array of `InternalLibImage` exposed to the template. This field is initialized\n     * applying transformations, default values and so on to the input of the same type.\n     */\n    previews: InternalLibImage[];\n    /**\n     * Object of type `CarouselPreviewConfig` exposed to the template. This field is initialized\n     * applying transformations, default values and so on to the input of the same type.\n     */\n    configPreview: CarouselPreviewConfig;\n    /**\n     * Start index (inclusive) of the input images used to display previews.\n     */\n    start: number;\n    /**\n     * End index (non inclusive) of the input images used to display previews.\n     */\n    end: number;\n    /**\n     * Private property with the default max height of previews.\n     */\n    private defaultMaxHeight;\n    private breakpointSubscription;\n    constructor(ref: ChangeDetectorRef, breakpointObserver: BreakpointObserver, sanitizer: DomSanitizer);\n    /**\n     * Method to update the height of previews, passing the desired height as input.\n     * @param configBreakpointHeight is a number that represent the desired height to set.\n     */\n    private updateHeight;\n    /**\n     * Method ´ngOnInit´ to build `configPreview` applying a default value and also to\n     * init the `previews` array.\n     * This is an Angular's lifecycle hook, so its called automatically by Angular itself.\n     * In particular, it's called only one time!!!\n     */\n    ngOnInit(): void;\n    /**\n     * Method to check if an image is active (i.e. a preview image).\n     * @param InternalLibImage preview is an image to check if it's active or not\n     * @returns boolean true if is active, false otherwise\n     */\n    isActive(preview: InternalLibImage): boolean;\n    /**\n     * Method ´ngOnChanges´ to update `previews` array.\n     * Also, both `start` and `end` local variables will be updated accordingly.\n     * This is an Angular's lifecycle hook, so its called automatically by Angular itself.\n     * In particular, it's called when any data-bound property of a directive changes!!!\n     */\n    ngOnChanges(changes: SimpleChanges): void;\n    /**\n     * Method called by events from both keyboard and mouse on a preview.\n     * This will trigger the `clickpreview` output with the input preview as its payload.\n     * @param InternalLibImage preview that triggered this method\n     * @param KeyboardEvent | MouseEvent event payload\n     * @param Action that triggered this event (Action.NORMAL by default)\n     */\n    onImageEvent(preview: InternalLibImage, event: KeyboardEvent | MouseEvent, action?: Action): void;\n    /**\n     * Method called by events from both keyboard and mouse on a navigation arrow.\n     * @param string direction of the navigation that can be either 'next' or 'prev'\n     * @param KeyboardEvent | MouseEvent event payload\n     */\n    onNavigationEvent(direction: string, event: KeyboardEvent | MouseEvent): void;\n    /**\n     * Method to get aria-label text for a preview image.\n     * @param Image is the preview\n     */\n    getAriaLabel(preview: Image): string;\n    /**\n     * Method to get title text for a preview image.\n     * @param Image is the preview\n     */\n    getTitle(preview: Image): string;\n    /**\n     * Method to get alt text for a preview image.\n     * @param Image is the preview\n     */\n    getAlt(preview: Image): string;\n    /**\n     * Method used in the template to track ids in ngFor.\n     * @param number index of the array\n     * @param Image item of the array\n     * @returns number the id of the item\n     */\n    trackById(index: number, item: Image): number;\n    /**\n     * Method used in template to sanitize an url when you need legacyIE11Mode.\n     * In this way you can set an url as background of a div.\n     * @param unsafeStyle is a string and represents the url to sanitize.\n     * @returns a SafeStyle object that can be used in template without problems.\n     */\n    sanitizeUrlBgStyle(unsafeStyle: string): SafeStyle;\n    /**\n     * Method to get the background-size value when IE11LegacyMode is enabled.\n     * This prevent weired behaviour on IE11 when previews are really small, but original images (.png/.jgp/...) are big.\n     * Using 'cover' it's not enough, because it's causing empty background in some cases.\n     * After some experiments, I decided to use the double of the height and auto as width.\n     */\n    getIE11LegacyBgSize(): string;\n    /**\n     * Method to cleanup resources. In fact, it cleans breakpointSubscription.\n     * This is an Angular's lifecycle hook that is called when this component is destroyed.\n     */\n    ngOnDestroy(): void;\n    /**\n     * Private method to init previews based on the currentImage and the full array of images.\n     * The current image in mandatory to show always the current preview (as highlighted).\n     * @param InternalLibImage currentImage to decide how to show previews, because I always want to see the current image as highlighted\n     * @param InternalLibImage[] images is the array of all images.\n     */\n    private initPreviews;\n    /**\n     * Private method to init both `start` and `end` to the beginning.\n     */\n    private setBeginningIndexesPreviews;\n    /**\n     * Private method to init both `start` and `end` to the end.\n     */\n    private setEndIndexesPreviews;\n    /**\n     * Private method to update the visible previews navigating to the right (next).\n     */\n    private next;\n    /**\n     * Private method to update the visible previews navigating to the left (previous).\n     */\n    private previous;\n    /**\n     * Private method to block/permit sliding between previews.\n     * @param number boundaryIndex is the first or the last index of `images` input array\n     * @returns boolean if true block sliding, otherwise not\n     */\n    private isPreventSliding;\n}\n"]}