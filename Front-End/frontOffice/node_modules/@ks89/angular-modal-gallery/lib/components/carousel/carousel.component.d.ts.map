{"version":3,"file":"carousel.component.d.ts","sources":["carousel.component.d.ts"],"names":[],"mappingssourcesContent":["import { AfterContentInit, ChangeDetectorRef, EventEmitter, NgZone, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';\nimport { AccessibleComponent } from '../accessible.component';\nimport { AccessibilityConfig } from '../../model/accessibility.interface';\nimport { Image, ImageEvent, ImageModalEvent } from '../../model/image.class';\nimport { Action } from '../../model/action.enum';\nimport { DotsConfig } from '../../model/dots-config.interface';\nimport { GalleryService } from '../../services/gallery.service';\nimport { PlainGalleryConfig } from '../../model/plain-gallery-config.interface';\nimport { PlayConfig } from '../../model/play-config.interface';\nimport { CarouselConfig } from '../../model/carousel-config.interface';\nimport { CarouselImageConfig } from '../../model/carousel-image-config.interface';\nimport { DomSanitizer, SafeStyle } from '@angular/platform-browser';\nimport { CarouselPreviewConfig } from '../../model/carousel-preview-config.interface';\n/**\n * Component with configurable inline/plain carousel.\n */\nexport declare class CarouselComponent extends AccessibleComponent implements OnInit, AfterContentInit, OnDestroy, OnChanges {\n    private _platformId;\n    private _ngZone;\n    private galleryService;\n    private ref;\n    private sanitizer;\n    /**\n     * Attribute to set ariaLabel of the host component\n     */\n    ariaLabel: string;\n    /**\n     * Unique id (>=0) of the current instance of the carousel. This is useful when you are using\n     * the carousel's feature to open modal gallery.\n     */\n    id: number;\n    /**\n     * Array of `InternalLibImage` that represent the model of this library with all images,\n     * thumbs and so on.\n     */\n    images: Image[];\n    /**\n     * Object of type `CarouselConfig` to init CarouselComponent's features.\n     * For instance, it contains parameters to change the style, how it navigates and so on.\n     */\n    carouselConfig: CarouselConfig;\n    /**\n     * Object of type `PlayConfig` to init CarouselComponent's features about auto-play.\n     * For instance, it contains parameters to enable/disable autoPlay, interval and so on.\n     */\n    playConfig: PlayConfig;\n    /**\n     * Interface to configure current image in carousel.\n     * For instance you can change the description.\n     */\n    carouselImageConfig: CarouselImageConfig;\n    /**\n     * Object of type `DotsConfig` to init DotsComponent's features.\n     * For instance, it contains a param to show/hide this component.\n     */\n    dotsConfig: DotsConfig;\n    /**\n     * Object of type `CarouselPreviewConfig` to init PreviewsComponent's features.\n     * For instance, it contains a param to show/hide previews, change sizes and so on.\n     */\n    previewConfig: CarouselPreviewConfig;\n    /**\n     * boolean to enable/disable infinite sliding. Enabled by default.\n     */\n    infinite: boolean;\n    /**\n     * Object of type `AccessibilityConfig` to init custom accessibility features.\n     * For instance, it contains titles, alt texts, aria-labels and so on.\n     */\n    accessibilityConfig: AccessibilityConfig;\n    /**\n     * Output to emit an event when an image is changed.\n     */\n    show: EventEmitter<ImageModalEvent>;\n    /**\n     * Output to emit an event when the current image is the first one.\n     */\n    firstImage: EventEmitter<ImageModalEvent>;\n    /**\n     * Output to emit an event when the current image is the last one.\n     */\n    lastImage: EventEmitter<ImageModalEvent>;\n    /**\n     * Enum of type `Action` that represents a mouse click on a button.\n     * Declared here to be used inside the template.\n     */\n    clickAction: Action;\n    /**\n     * Enum of type `Action` that represents a keyboard action.\n     * Declared here to be used inside the template.\n     */\n    keyboardAction: Action;\n    /**\n     * `Image` that is visible right now.\n     */\n    currentImage: Image;\n    /**\n     * Object of type `CarouselConfig` exposed to the template. This field is initialized\n     * applying transformations, default values and so on to the input of the same type.\n     */\n    configCarousel: CarouselConfig;\n    /**\n     * Object of type `PlayConfig` exposed to the template. This field is initialized\n     * applying transformations, default values and so on to the input of the same type.\n     */\n    configPlay: PlayConfig;\n    /**\n     * Object of type `CarouselImageConfig` exposed to the template. This field is initialized\n     * applying transformations, default values and so on to the input of the same type.\n     */\n    configCurrentImageCarousel: CarouselImageConfig;\n    /**\n     * Object of type `DotsConfig` exposed to the template. This field is initialized\n     * applying transformations, default values and so on to the input of the same type.\n     */\n    configDots: DotsConfig;\n    /**\n     * Boolean that it's true when you are watching the first image (currently visible).\n     * False by default\n     */\n    isFirstImage: boolean;\n    /**\n     * Boolean that it's true when you are watching the last image (currently visible).\n     * False by default\n     */\n    isLastImage: boolean;\n    /**\n     * Object of type `PlainGalleryConfig` to force ks-modal-gallery to hide plain-gallery\n     */\n    plainGalleryHidden: PlainGalleryConfig;\n    /**\n     * Subject to play the carousel.\n     */\n    private start$;\n    /**\n     * Subject to stop the carousel.\n     */\n    private stop$;\n    /**\n     * Private object without type to define all swipe actions used by hammerjs.\n     */\n    private SWIPE_ACTION;\n    /**\n     * Listener to stop the gallery when the mouse pointer is over the current image.\n     */\n    onMouseEnter(): void;\n    /**\n     * Listener to play the gallery when the mouse pointer leave the current image.\n     */\n    onMouseLeave(): void;\n    /**\n     * Listener to navigate carousel images with keyboard (left).\n     */\n    onKeyDownLeft(): void;\n    /**\n     * Listener to navigate carousel images with keyboard (right).\n     */\n    onKeyDownLRight(): void;\n    constructor(_platformId: any, _ngZone: NgZone, galleryService: GalleryService, ref: ChangeDetectorRef, sanitizer: DomSanitizer);\n    ngOnChanges(changes: SimpleChanges): void;\n    ngOnInit(): void;\n    ngAfterContentInit(): void;\n    /**\n     * Method used in template to sanitize an url when you need legacyIE11Mode.\n     * In this way you can set an url as background of a div.\n     * @param unsafeStyle is a string and represents the url to sanitize.\n     * @returns a SafeStyle object that can be used in template without problems.\n     */\n    sanitizeUrlBgStyle(unsafeStyle: string): SafeStyle;\n    /**\n     * Method called when a dot is clicked and used to update the current image.\n     * @param number index of the clicked dot\n     */\n    onClickDot(index: number): void;\n    /**\n     * Method called by events from both keyboard and mouse on a navigation arrow.\n     * @param string direction of the navigation that can be either 'next' or 'prev'\n     * @param KeyboardEvent | MouseEvent event payload\n     * @param Action action that triggered the event or `Action.NORMAL` if not provided\n     */\n    onNavigationEvent(direction: string, event: KeyboardEvent, action?: Action): void;\n    /**\n     * Method triggered when you click on the current image.\n     * Also, if modalGalleryEnable is true, you can open the modal-gallery.\n     */\n    onClickCurrentImage(): void;\n    /**\n     * Method to get the image description based on input params.\n     * If you provide a full description this will be the visible description, otherwise,\n     * it will be built using the `Description` object, concatenating its fields.\n     * @param Image image to get its description. If not provided it will be the current image\n     * @returns String description of the image (or the current image if not provided)\n     * @throws an Error if description isn't available\n     */\n    getDescriptionToDisplay(image?: Image): string;\n    /**\n     * Method used by Hammerjs to support touch gestures (you can also invert the swipe direction with configCurrentImage.invertSwipe).\n     * @param action String that represent the direction of the swipe action. 'swiperight' by default.\n     */\n    swipe(action?: string): void;\n    /**\n     * Method to go back to the previous image.\n     * @param action Enum of type `Action` that represents the source\n     *  action that moved back to the previous image. `Action.NORMAL` by default.\n     */\n    prevImage(action?: Action): void;\n    /**\n     * Method to go back to the previous image.\n     * @param action Enum of type `Action` that represents the source\n     *  action that moved to the next image. `Action.NORMAL` by default.\n     */\n    nextImage(action?: Action): void;\n    /**\n     * Method used in the template to track ids in ngFor.\n     * @param number index of the array\n     * @param Image item of the array\n     * @returns number the id of the item\n     */\n    trackById(index: number, item: Image): number;\n    /**\n     * Method called when an image preview is clicked and used to update the current image.\n     * @param event an ImageEvent object with the relative action and the index of the clicked preview.\n     */\n    onClickPreview(event: ImageEvent): void;\n    /**\n     * Method to play carousel.\n     */\n    playCarousel(): void;\n    /**\n     * Stops the carousel from cycling through items.\n     */\n    stopCarousel(): void;\n    /**\n     * Method to get `alt attribute`.\n     * `alt` specifies an alternate text for an image, if the image cannot be displayed.\n     * @param Image image to get its alt description. If not provided it will be the current image\n     * @returns String alt description of the image (or the current image if not provided)\n     */\n    getAltDescriptionByImage(image?: Image): string;\n    /**\n     * Method to get the title attributes based on descriptions.\n     * This is useful to prevent accessibility issues, because if DescriptionStrategy is ALWAYS_HIDDEN,\n     * it prevents an empty string as title.\n     * @param Image image to get its description. If not provided it will be the current image\n     * @returns String title of the image based on descriptions\n     * @throws an Error if description isn't available\n     */\n    getTitleToDisplay(image?: Image): string;\n    /**\n     * Method to reset carousel (force image with index 0 to be the current image and re-init also previews)\n     */\n    /**\n     * Method to cleanup resources. In fact, this will stop the carousel.\n     * This is an Angular's lifecycle hook that is called when this component is destroyed.\n     */\n    ngOnDestroy(): void;\n    /**\n     * Method to change the current image, receiving the new image as input the relative action.\n     * @param image an Image object that represents the new image to set as current.\n     * @param action Enum of type `Action` that represents the source action that triggered the change.\n     */\n    private changeCurrentImage;\n    /**\n     * Private method to get the next index.\n     * This is necessary because at the end, when you call next again, you'll go to the first image.\n     * That happens because all modal images are shown like in a circle.\n     */\n    private getNextImage;\n    /**\n     * Private method to get the previous index.\n     * This is necessary because at index 0, when you call prev again, you'll go to the last image.\n     * That happens because all modal images are shown like in a circle.\n     */\n    private getPrevImage;\n    /**\n     * Private method to build a text description.\n     * This is used also to create titles.\n     * @param Image image to get its description. If not provided it will be the current image.\n     * @param boolean imageWithoutDescription is a boolean that it's true if the image hasn't a 'modal' description.\n     * @returns String description built concatenating image fields with a specific logic.\n     */\n    private buildTextDescription;\n    /**\n     * Private method to update both `isFirstImage` and `isLastImage` based on\n     * the index of the current image.\n     * @param number currentIndex is the index of the current image\n     */\n    private handleBoundaries;\n    /**\n     * Private method to manage boundary arrows and sliding.\n     * This is based on the slideConfig input to enable/disable 'infinite sliding'.\n     * @param number index of the visible image\n     */\n    private manageSlideConfig;\n    /**\n     * Private method to emit events when either the last or the first image are visible.\n     * @param action Enum of type Action that represents the source of the event that changed the\n     *  current image to the first one or the last one.\n     * @param indexToCheck is the index number of the image (the first or the last one).\n     */\n    private emitBoundaryEvent;\n    /**\n     * Private method to check if next/prev actions should be blocked.\n     * It checks if slideConfig.infinite === false and if the image index is equals to the input parameter.\n     * If yes, it returns true to say that sliding should be blocked, otherwise not.\n     * @param number boundaryIndex that could be either the beginning index (0) or the last index\n     *  of images (this.images.length - 1).\n     * @returns boolean true if slideConfig.infinite === false and the current index is\n     *  either the first or the last one.\n     */\n    private isPreventSliding;\n}\n"]}