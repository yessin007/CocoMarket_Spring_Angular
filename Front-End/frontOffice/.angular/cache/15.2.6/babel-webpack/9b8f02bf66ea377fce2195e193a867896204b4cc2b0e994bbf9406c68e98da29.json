{"ast":null,"code":"\"use strict\";\n\nvar root_1 = require('./util/root');\nvar toSubscriber_1 = require('./util/toSubscriber');\nvar observable_1 = require('./symbol/observable');\nvar pipe_1 = require('./util/pipe');\n/**\r\n * A representation of any set of values over any amount of time. This is the most basic building block\r\n * of RxJS.\r\n *\r\n * @class Observable<T>\r\n */\nvar Observable = function () {\n  /**\r\n   * @constructor\r\n   * @param {Function} subscribe the function that is called when the Observable is\r\n   * initially subscribed to. This function is given a Subscriber, to which new values\r\n   * can be `next`ed, or an `error` method can be called to raise an error, or\r\n   * `complete` can be called to notify of a successful completion.\r\n   */\n  function Observable(subscribe) {\n    this._isScalar = false;\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n  /**\r\n   * Creates a new Observable, with this Observable as the source, and the passed\r\n   * operator defined as the new observable's operator.\r\n   * @method lift\r\n   * @param {Operator} operator the operator defining the operation to take on the observable\r\n   * @return {Observable} a new observable with the Operator applied\r\n   */\n  Observable.prototype.lift = function (operator) {\n    var observable = new Observable();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  };\n  /**\r\n   * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\r\n   *\r\n   * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\r\n   *\r\n   * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\r\n   * might be for example a function that you passed to a {@link create} static factory, but most of the time it is\r\n   * a library implementation, which defines what and when will be emitted by an Observable. This means that calling\r\n   * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\r\n   * thought.\r\n   *\r\n   * Apart from starting the execution of an Observable, this method allows you to listen for values\r\n   * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\r\n   * following ways.\r\n   *\r\n   * The first way is creating an object that implements {@link Observer} interface. It should have methods\r\n   * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\r\n   * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\r\n   * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\r\n   * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\r\n   * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will\r\n   * be left uncaught.\r\n   *\r\n   * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\r\n   * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent\r\n   * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,\r\n   * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\r\n   * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\r\n   * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\r\n   *\r\n   * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.\r\n   * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean\r\n   * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\r\n   * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\r\n   *\r\n   * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\r\n   * It is an Observable itself that decides when these functions will be called. For example {@link of}\r\n   * by default emits all its values synchronously. Always check documentation for how given Observable\r\n   * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.\r\n   *\r\n   * @example <caption>Subscribe with an Observer</caption>\r\n   * const sumObserver = {\r\n   *   sum: 0,\r\n   *   next(value) {\r\n   *     console.log('Adding: ' + value);\r\n   *     this.sum = this.sum + value;\r\n   *   },\r\n   *   error() { // We actually could just remove this method,\r\n   *   },        // since we do not really care about errors right now.\r\n   *   complete() {\r\n   *     console.log('Sum equals: ' + this.sum);\r\n   *   }\r\n   * };\r\n   *\r\n   * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\r\n   * .subscribe(sumObserver);\r\n   *\r\n   * // Logs:\r\n   * // \"Adding: 1\"\r\n   * // \"Adding: 2\"\r\n   * // \"Adding: 3\"\r\n   * // \"Sum equals: 6\"\r\n   *\r\n   *\r\n   * @example <caption>Subscribe with functions</caption>\r\n   * let sum = 0;\r\n   *\r\n   * Rx.Observable.of(1, 2, 3)\r\n   * .subscribe(\r\n   *   function(value) {\r\n   *     console.log('Adding: ' + value);\r\n   *     sum = sum + value;\r\n   *   },\r\n   *   undefined,\r\n   *   function() {\r\n   *     console.log('Sum equals: ' + sum);\r\n   *   }\r\n   * );\r\n   *\r\n   * // Logs:\r\n   * // \"Adding: 1\"\r\n   * // \"Adding: 2\"\r\n   * // \"Adding: 3\"\r\n   * // \"Sum equals: 6\"\r\n   *\r\n   *\r\n   * @example <caption>Cancel a subscription</caption>\r\n   * const subscription = Rx.Observable.interval(1000).subscribe(\r\n   *   num => console.log(num),\r\n   *   undefined,\r\n   *   () => console.log('completed!') // Will not be called, even\r\n   * );                                // when cancelling subscription\r\n   *\r\n   *\r\n   * setTimeout(() => {\r\n   *   subscription.unsubscribe();\r\n   *   console.log('unsubscribed!');\r\n   * }, 2500);\r\n   *\r\n   * // Logs:\r\n   * // 0 after 1s\r\n   * // 1 after 2s\r\n   * // \"unsubscribed!\" after 2.5s\r\n   *\r\n   *\r\n   * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\r\n   *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\r\n   *  Observable.\r\n   * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\r\n   *  the error will be thrown as unhandled.\r\n   * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\r\n   * @return {ISubscription} a subscription reference to the registered handlers\r\n   * @method subscribe\r\n   */\n  Observable.prototype.subscribe = function (observerOrNext, error, complete) {\n    var operator = this.operator;\n    var sink = toSubscriber_1.toSubscriber(observerOrNext, error, complete);\n    if (operator) {\n      operator.call(sink, this.source);\n    } else {\n      sink.add(this.source || !sink.syncErrorThrowable ? this._subscribe(sink) : this._trySubscribe(sink));\n    }\n    if (sink.syncErrorThrowable) {\n      sink.syncErrorThrowable = false;\n      if (sink.syncErrorThrown) {\n        throw sink.syncErrorValue;\n      }\n    }\n    return sink;\n  };\n  Observable.prototype._trySubscribe = function (sink) {\n    try {\n      return this._subscribe(sink);\n    } catch (err) {\n      sink.syncErrorThrown = true;\n      sink.syncErrorValue = err;\n      sink.error(err);\n    }\n  };\n  /**\r\n   * @method forEach\r\n   * @param {Function} next a handler for each value emitted by the observable\r\n   * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\r\n   * @return {Promise} a promise that either resolves on observable completion or\r\n   *  rejects with the handled error\r\n   */\n  Observable.prototype.forEach = function (next, PromiseCtor) {\n    var _this = this;\n    if (!PromiseCtor) {\n      if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {\n        PromiseCtor = root_1.root.Rx.config.Promise;\n      } else if (root_1.root.Promise) {\n        PromiseCtor = root_1.root.Promise;\n      }\n    }\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n    return new PromiseCtor(function (resolve, reject) {\n      // Must be declared in a separate statement to avoid a RefernceError when\n      // accessing subscription below in the closure due to Temporal Dead Zone.\n      var subscription;\n      subscription = _this.subscribe(function (value) {\n        if (subscription) {\n          // if there is a subscription, then we can surmise\n          // the next handling is asynchronous. Any errors thrown\n          // need to be rejected explicitly and unsubscribe must be\n          // called manually\n          try {\n            next(value);\n          } catch (err) {\n            reject(err);\n            subscription.unsubscribe();\n          }\n        } else {\n          // if there is NO subscription, then we're getting a nexted\n          // value synchronously during subscription. We can just call it.\n          // If it errors, Observable's `subscribe` will ensure the\n          // unsubscription logic is called, then synchronously rethrow the error.\n          // After that, Promise will trap the error and send it\n          // down the rejection path.\n          next(value);\n        }\n      }, reject, resolve);\n    });\n  };\n  /** @deprecated internal use only */\n  Observable.prototype._subscribe = function (subscriber) {\n    return this.source.subscribe(subscriber);\n  };\n  /**\r\n   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\r\n   * @method Symbol.observable\r\n   * @return {Observable} this instance of the observable\r\n   */\n  Observable.prototype[observable_1.observable] = function () {\n    return this;\n  };\n  /* tslint:enable:max-line-length */\n  /**\r\n   * Used to stitch together functional operators into a chain.\r\n   * @method pipe\r\n   * @return {Observable} the Observable result of all of the operators having\r\n   * been called in the order they were passed in.\r\n   *\r\n   * @example\r\n   *\r\n   * import { map, filter, scan } from 'rxjs/operators';\r\n   *\r\n   * Rx.Observable.interval(1000)\r\n   *   .pipe(\r\n   *     filter(x => x % 2 === 0),\r\n   *     map(x => x + x),\r\n   *     scan((acc, x) => acc + x)\r\n   *   )\r\n   *   .subscribe(x => console.log(x))\r\n   */\n  Observable.prototype.pipe = function () {\n    var operations = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      operations[_i - 0] = arguments[_i];\n    }\n    if (operations.length === 0) {\n      return this;\n    }\n    return pipe_1.pipeFromArray(operations)(this);\n  };\n  /* tslint:enable:max-line-length */\n  Observable.prototype.toPromise = function (PromiseCtor) {\n    var _this = this;\n    if (!PromiseCtor) {\n      if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {\n        PromiseCtor = root_1.root.Rx.config.Promise;\n      } else if (root_1.root.Promise) {\n        PromiseCtor = root_1.root.Promise;\n      }\n    }\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n    return new PromiseCtor(function (resolve, reject) {\n      var value;\n      _this.subscribe(function (x) {\n        return value = x;\n      }, function (err) {\n        return reject(err);\n      }, function () {\n        return resolve(value);\n      });\n    });\n  };\n  // HACK: Since TypeScript inherits static properties too, we have to\n  // fight against TypeScript here so Subject can have a different static create signature\n  /**\r\n   * Creates a new cold Observable by calling the Observable constructor\r\n   * @static true\r\n   * @owner Observable\r\n   * @method create\r\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\r\n   * @return {Observable} a new cold observable\r\n   */\n  Observable.create = function (subscribe) {\n    return new Observable(subscribe);\n  };\n  return Observable;\n}();\nexports.Observable = Observable;","map":{"version":3,"names":["root_1","require","toSubscriber_1","observable_1","pipe_1","Observable","subscribe","_isScalar","_subscribe","prototype","lift","operator","observable","source","observerOrNext","error","complete","sink","toSubscriber","call","add","syncErrorThrowable","_trySubscribe","syncErrorThrown","syncErrorValue","err","forEach","next","PromiseCtor","_this","root","Rx","config","Promise","Error","resolve","reject","subscription","value","unsubscribe","subscriber","pipe","operations","_i","arguments","length","pipeFromArray","toPromise","x","create","exports"],"sources":["C:/Users/HP/Desktop/4SE3/PidevSym/PiDev_Spring_Angular/Front-End/frontOffice/node_modules/ng5-slider/node_modules/rxjs/Observable.js"],"sourcesContent":["\"use strict\";\r\nvar root_1 = require('./util/root');\r\nvar toSubscriber_1 = require('./util/toSubscriber');\r\nvar observable_1 = require('./symbol/observable');\r\nvar pipe_1 = require('./util/pipe');\r\n/**\r\n * A representation of any set of values over any amount of time. This is the most basic building block\r\n * of RxJS.\r\n *\r\n * @class Observable<T>\r\n */\r\nvar Observable = (function () {\r\n    /**\r\n     * @constructor\r\n     * @param {Function} subscribe the function that is called when the Observable is\r\n     * initially subscribed to. This function is given a Subscriber, to which new values\r\n     * can be `next`ed, or an `error` method can be called to raise an error, or\r\n     * `complete` can be called to notify of a successful completion.\r\n     */\r\n    function Observable(subscribe) {\r\n        this._isScalar = false;\r\n        if (subscribe) {\r\n            this._subscribe = subscribe;\r\n        }\r\n    }\r\n    /**\r\n     * Creates a new Observable, with this Observable as the source, and the passed\r\n     * operator defined as the new observable's operator.\r\n     * @method lift\r\n     * @param {Operator} operator the operator defining the operation to take on the observable\r\n     * @return {Observable} a new observable with the Operator applied\r\n     */\r\n    Observable.prototype.lift = function (operator) {\r\n        var observable = new Observable();\r\n        observable.source = this;\r\n        observable.operator = operator;\r\n        return observable;\r\n    };\r\n    /**\r\n     * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\r\n     *\r\n     * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\r\n     *\r\n     * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\r\n     * might be for example a function that you passed to a {@link create} static factory, but most of the time it is\r\n     * a library implementation, which defines what and when will be emitted by an Observable. This means that calling\r\n     * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\r\n     * thought.\r\n     *\r\n     * Apart from starting the execution of an Observable, this method allows you to listen for values\r\n     * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\r\n     * following ways.\r\n     *\r\n     * The first way is creating an object that implements {@link Observer} interface. It should have methods\r\n     * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\r\n     * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\r\n     * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\r\n     * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\r\n     * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will\r\n     * be left uncaught.\r\n     *\r\n     * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\r\n     * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent\r\n     * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,\r\n     * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\r\n     * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\r\n     * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\r\n     *\r\n     * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.\r\n     * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean\r\n     * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\r\n     * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\r\n     *\r\n     * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\r\n     * It is an Observable itself that decides when these functions will be called. For example {@link of}\r\n     * by default emits all its values synchronously. Always check documentation for how given Observable\r\n     * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.\r\n     *\r\n     * @example <caption>Subscribe with an Observer</caption>\r\n     * const sumObserver = {\r\n     *   sum: 0,\r\n     *   next(value) {\r\n     *     console.log('Adding: ' + value);\r\n     *     this.sum = this.sum + value;\r\n     *   },\r\n     *   error() { // We actually could just remove this method,\r\n     *   },        // since we do not really care about errors right now.\r\n     *   complete() {\r\n     *     console.log('Sum equals: ' + this.sum);\r\n     *   }\r\n     * };\r\n     *\r\n     * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\r\n     * .subscribe(sumObserver);\r\n     *\r\n     * // Logs:\r\n     * // \"Adding: 1\"\r\n     * // \"Adding: 2\"\r\n     * // \"Adding: 3\"\r\n     * // \"Sum equals: 6\"\r\n     *\r\n     *\r\n     * @example <caption>Subscribe with functions</caption>\r\n     * let sum = 0;\r\n     *\r\n     * Rx.Observable.of(1, 2, 3)\r\n     * .subscribe(\r\n     *   function(value) {\r\n     *     console.log('Adding: ' + value);\r\n     *     sum = sum + value;\r\n     *   },\r\n     *   undefined,\r\n     *   function() {\r\n     *     console.log('Sum equals: ' + sum);\r\n     *   }\r\n     * );\r\n     *\r\n     * // Logs:\r\n     * // \"Adding: 1\"\r\n     * // \"Adding: 2\"\r\n     * // \"Adding: 3\"\r\n     * // \"Sum equals: 6\"\r\n     *\r\n     *\r\n     * @example <caption>Cancel a subscription</caption>\r\n     * const subscription = Rx.Observable.interval(1000).subscribe(\r\n     *   num => console.log(num),\r\n     *   undefined,\r\n     *   () => console.log('completed!') // Will not be called, even\r\n     * );                                // when cancelling subscription\r\n     *\r\n     *\r\n     * setTimeout(() => {\r\n     *   subscription.unsubscribe();\r\n     *   console.log('unsubscribed!');\r\n     * }, 2500);\r\n     *\r\n     * // Logs:\r\n     * // 0 after 1s\r\n     * // 1 after 2s\r\n     * // \"unsubscribed!\" after 2.5s\r\n     *\r\n     *\r\n     * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\r\n     *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\r\n     *  Observable.\r\n     * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\r\n     *  the error will be thrown as unhandled.\r\n     * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\r\n     * @return {ISubscription} a subscription reference to the registered handlers\r\n     * @method subscribe\r\n     */\r\n    Observable.prototype.subscribe = function (observerOrNext, error, complete) {\r\n        var operator = this.operator;\r\n        var sink = toSubscriber_1.toSubscriber(observerOrNext, error, complete);\r\n        if (operator) {\r\n            operator.call(sink, this.source);\r\n        }\r\n        else {\r\n            sink.add(this.source || !sink.syncErrorThrowable ? this._subscribe(sink) : this._trySubscribe(sink));\r\n        }\r\n        if (sink.syncErrorThrowable) {\r\n            sink.syncErrorThrowable = false;\r\n            if (sink.syncErrorThrown) {\r\n                throw sink.syncErrorValue;\r\n            }\r\n        }\r\n        return sink;\r\n    };\r\n    Observable.prototype._trySubscribe = function (sink) {\r\n        try {\r\n            return this._subscribe(sink);\r\n        }\r\n        catch (err) {\r\n            sink.syncErrorThrown = true;\r\n            sink.syncErrorValue = err;\r\n            sink.error(err);\r\n        }\r\n    };\r\n    /**\r\n     * @method forEach\r\n     * @param {Function} next a handler for each value emitted by the observable\r\n     * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\r\n     * @return {Promise} a promise that either resolves on observable completion or\r\n     *  rejects with the handled error\r\n     */\r\n    Observable.prototype.forEach = function (next, PromiseCtor) {\r\n        var _this = this;\r\n        if (!PromiseCtor) {\r\n            if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {\r\n                PromiseCtor = root_1.root.Rx.config.Promise;\r\n            }\r\n            else if (root_1.root.Promise) {\r\n                PromiseCtor = root_1.root.Promise;\r\n            }\r\n        }\r\n        if (!PromiseCtor) {\r\n            throw new Error('no Promise impl found');\r\n        }\r\n        return new PromiseCtor(function (resolve, reject) {\r\n            // Must be declared in a separate statement to avoid a RefernceError when\r\n            // accessing subscription below in the closure due to Temporal Dead Zone.\r\n            var subscription;\r\n            subscription = _this.subscribe(function (value) {\r\n                if (subscription) {\r\n                    // if there is a subscription, then we can surmise\r\n                    // the next handling is asynchronous. Any errors thrown\r\n                    // need to be rejected explicitly and unsubscribe must be\r\n                    // called manually\r\n                    try {\r\n                        next(value);\r\n                    }\r\n                    catch (err) {\r\n                        reject(err);\r\n                        subscription.unsubscribe();\r\n                    }\r\n                }\r\n                else {\r\n                    // if there is NO subscription, then we're getting a nexted\r\n                    // value synchronously during subscription. We can just call it.\r\n                    // If it errors, Observable's `subscribe` will ensure the\r\n                    // unsubscription logic is called, then synchronously rethrow the error.\r\n                    // After that, Promise will trap the error and send it\r\n                    // down the rejection path.\r\n                    next(value);\r\n                }\r\n            }, reject, resolve);\r\n        });\r\n    };\r\n    /** @deprecated internal use only */ Observable.prototype._subscribe = function (subscriber) {\r\n        return this.source.subscribe(subscriber);\r\n    };\r\n    /**\r\n     * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\r\n     * @method Symbol.observable\r\n     * @return {Observable} this instance of the observable\r\n     */\r\n    Observable.prototype[observable_1.observable] = function () {\r\n        return this;\r\n    };\r\n    /* tslint:enable:max-line-length */\r\n    /**\r\n     * Used to stitch together functional operators into a chain.\r\n     * @method pipe\r\n     * @return {Observable} the Observable result of all of the operators having\r\n     * been called in the order they were passed in.\r\n     *\r\n     * @example\r\n     *\r\n     * import { map, filter, scan } from 'rxjs/operators';\r\n     *\r\n     * Rx.Observable.interval(1000)\r\n     *   .pipe(\r\n     *     filter(x => x % 2 === 0),\r\n     *     map(x => x + x),\r\n     *     scan((acc, x) => acc + x)\r\n     *   )\r\n     *   .subscribe(x => console.log(x))\r\n     */\r\n    Observable.prototype.pipe = function () {\r\n        var operations = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            operations[_i - 0] = arguments[_i];\r\n        }\r\n        if (operations.length === 0) {\r\n            return this;\r\n        }\r\n        return pipe_1.pipeFromArray(operations)(this);\r\n    };\r\n    /* tslint:enable:max-line-length */\r\n    Observable.prototype.toPromise = function (PromiseCtor) {\r\n        var _this = this;\r\n        if (!PromiseCtor) {\r\n            if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {\r\n                PromiseCtor = root_1.root.Rx.config.Promise;\r\n            }\r\n            else if (root_1.root.Promise) {\r\n                PromiseCtor = root_1.root.Promise;\r\n            }\r\n        }\r\n        if (!PromiseCtor) {\r\n            throw new Error('no Promise impl found');\r\n        }\r\n        return new PromiseCtor(function (resolve, reject) {\r\n            var value;\r\n            _this.subscribe(function (x) { return value = x; }, function (err) { return reject(err); }, function () { return resolve(value); });\r\n        });\r\n    };\r\n    // HACK: Since TypeScript inherits static properties too, we have to\r\n    // fight against TypeScript here so Subject can have a different static create signature\r\n    /**\r\n     * Creates a new cold Observable by calling the Observable constructor\r\n     * @static true\r\n     * @owner Observable\r\n     * @method create\r\n     * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\r\n     * @return {Observable} a new cold observable\r\n     */\r\n    Observable.create = function (subscribe) {\r\n        return new Observable(subscribe);\r\n    };\r\n    return Observable;\r\n}());\r\nexports.Observable = Observable;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}