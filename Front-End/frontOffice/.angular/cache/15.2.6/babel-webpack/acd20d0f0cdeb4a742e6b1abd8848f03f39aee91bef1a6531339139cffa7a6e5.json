{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('../Subject');\nvar Subscription_1 = require('../Subscription');\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\r\n * Branch out the source Observable values as a nested Observable starting from\r\n * an emission from `openings` and ending when the output of `closingSelector`\r\n * emits.\r\n *\r\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\r\n * Observable instead of an array.</span>\r\n *\r\n * <img src=\"./img/windowToggle.png\" width=\"100%\">\r\n *\r\n * Returns an Observable that emits windows of items it collects from the source\r\n * Observable. The output Observable emits windows that contain those items\r\n * emitted by the source Observable between the time when the `openings`\r\n * Observable emits an item and when the Observable returned by\r\n * `closingSelector` emits an item.\r\n *\r\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var openings = Rx.Observable.interval(1000);\r\n * var result = clicks.windowToggle(openings, i =>\r\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\r\n * ).mergeAll();\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * @see {@link window}\r\n * @see {@link windowCount}\r\n * @see {@link windowTime}\r\n * @see {@link windowWhen}\r\n * @see {@link bufferToggle}\r\n *\r\n * @param {Observable<O>} openings An observable of notifications to start new\r\n * windows.\r\n * @param {function(value: O): Observable} closingSelector A function that takes\r\n * the value emitted by the `openings` observable and returns an Observable,\r\n * which, when it emits (either `next` or `complete`), signals that the\r\n * associated window should complete.\r\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\r\n * are Observables.\r\n * @method windowToggle\r\n * @owner Observable\r\n */\nfunction windowToggle(openings, closingSelector) {\n  return function (source) {\n    return source.lift(new WindowToggleOperator(openings, closingSelector));\n  };\n}\nexports.windowToggle = windowToggle;\nvar WindowToggleOperator = function () {\n  function WindowToggleOperator(openings, closingSelector) {\n    this.openings = openings;\n    this.closingSelector = closingSelector;\n  }\n  WindowToggleOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new WindowToggleSubscriber(subscriber, this.openings, this.closingSelector));\n  };\n  return WindowToggleOperator;\n}();\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\nvar WindowToggleSubscriber = function (_super) {\n  __extends(WindowToggleSubscriber, _super);\n  function WindowToggleSubscriber(destination, openings, closingSelector) {\n    _super.call(this, destination);\n    this.openings = openings;\n    this.closingSelector = closingSelector;\n    this.contexts = [];\n    this.add(this.openSubscription = subscribeToResult_1.subscribeToResult(this, openings, openings));\n  }\n  WindowToggleSubscriber.prototype._next = function (value) {\n    var contexts = this.contexts;\n    if (contexts) {\n      var len = contexts.length;\n      for (var i = 0; i < len; i++) {\n        contexts[i].window.next(value);\n      }\n    }\n  };\n  WindowToggleSubscriber.prototype._error = function (err) {\n    var contexts = this.contexts;\n    this.contexts = null;\n    if (contexts) {\n      var len = contexts.length;\n      var index = -1;\n      while (++index < len) {\n        var context = contexts[index];\n        context.window.error(err);\n        context.subscription.unsubscribe();\n      }\n    }\n    _super.prototype._error.call(this, err);\n  };\n  WindowToggleSubscriber.prototype._complete = function () {\n    var contexts = this.contexts;\n    this.contexts = null;\n    if (contexts) {\n      var len = contexts.length;\n      var index = -1;\n      while (++index < len) {\n        var context = contexts[index];\n        context.window.complete();\n        context.subscription.unsubscribe();\n      }\n    }\n    _super.prototype._complete.call(this);\n  };\n  /** @deprecated internal use only */\n  WindowToggleSubscriber.prototype._unsubscribe = function () {\n    var contexts = this.contexts;\n    this.contexts = null;\n    if (contexts) {\n      var len = contexts.length;\n      var index = -1;\n      while (++index < len) {\n        var context = contexts[index];\n        context.window.unsubscribe();\n        context.subscription.unsubscribe();\n      }\n    }\n  };\n  WindowToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n    if (outerValue === this.openings) {\n      var closingSelector = this.closingSelector;\n      var closingNotifier = tryCatch_1.tryCatch(closingSelector)(innerValue);\n      if (closingNotifier === errorObject_1.errorObject) {\n        return this.error(errorObject_1.errorObject.e);\n      } else {\n        var window_1 = new Subject_1.Subject();\n        var subscription = new Subscription_1.Subscription();\n        var context = {\n          window: window_1,\n          subscription: subscription\n        };\n        this.contexts.push(context);\n        var innerSubscription = subscribeToResult_1.subscribeToResult(this, closingNotifier, context);\n        if (innerSubscription.closed) {\n          this.closeWindow(this.contexts.length - 1);\n        } else {\n          innerSubscription.context = context;\n          subscription.add(innerSubscription);\n        }\n        this.destination.next(window_1);\n      }\n    } else {\n      this.closeWindow(this.contexts.indexOf(outerValue));\n    }\n  };\n  WindowToggleSubscriber.prototype.notifyError = function (err) {\n    this.error(err);\n  };\n  WindowToggleSubscriber.prototype.notifyComplete = function (inner) {\n    if (inner !== this.openSubscription) {\n      this.closeWindow(this.contexts.indexOf(inner.context));\n    }\n  };\n  WindowToggleSubscriber.prototype.closeWindow = function (index) {\n    if (index === -1) {\n      return;\n    }\n    var contexts = this.contexts;\n    var context = contexts[index];\n    var window = context.window,\n      subscription = context.subscription;\n    contexts.splice(index, 1);\n    window.complete();\n    subscription.unsubscribe();\n  };\n  return WindowToggleSubscriber;\n}(OuterSubscriber_1.OuterSubscriber);","map":{"version":3,"names":["__extends","d","b","p","hasOwnProperty","__","constructor","prototype","Object","create","Subject_1","require","Subscription_1","tryCatch_1","errorObject_1","OuterSubscriber_1","subscribeToResult_1","windowToggle","openings","closingSelector","source","lift","WindowToggleOperator","exports","call","subscriber","subscribe","WindowToggleSubscriber","_super","destination","contexts","add","openSubscription","subscribeToResult","_next","value","len","length","i","window","next","_error","err","index","context","error","subscription","unsubscribe","_complete","complete","_unsubscribe","notifyNext","outerValue","innerValue","outerIndex","innerIndex","innerSub","closingNotifier","tryCatch","errorObject","e","window_1","Subject","Subscription","push","innerSubscription","closed","closeWindow","indexOf","notifyError","notifyComplete","inner","splice","OuterSubscriber"],"sources":["C:/Users/HP/Desktop/4SE3/PidevSym/PiDev_Spring_Angular/Front-End/frontOffice/node_modules/ng5-slider/node_modules/rxjs/operators/windowToggle.js"],"sourcesContent":["\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar Subject_1 = require('../Subject');\r\nvar Subscription_1 = require('../Subscription');\r\nvar tryCatch_1 = require('../util/tryCatch');\r\nvar errorObject_1 = require('../util/errorObject');\r\nvar OuterSubscriber_1 = require('../OuterSubscriber');\r\nvar subscribeToResult_1 = require('../util/subscribeToResult');\r\n/**\r\n * Branch out the source Observable values as a nested Observable starting from\r\n * an emission from `openings` and ending when the output of `closingSelector`\r\n * emits.\r\n *\r\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\r\n * Observable instead of an array.</span>\r\n *\r\n * <img src=\"./img/windowToggle.png\" width=\"100%\">\r\n *\r\n * Returns an Observable that emits windows of items it collects from the source\r\n * Observable. The output Observable emits windows that contain those items\r\n * emitted by the source Observable between the time when the `openings`\r\n * Observable emits an item and when the Observable returned by\r\n * `closingSelector` emits an item.\r\n *\r\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var openings = Rx.Observable.interval(1000);\r\n * var result = clicks.windowToggle(openings, i =>\r\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\r\n * ).mergeAll();\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * @see {@link window}\r\n * @see {@link windowCount}\r\n * @see {@link windowTime}\r\n * @see {@link windowWhen}\r\n * @see {@link bufferToggle}\r\n *\r\n * @param {Observable<O>} openings An observable of notifications to start new\r\n * windows.\r\n * @param {function(value: O): Observable} closingSelector A function that takes\r\n * the value emitted by the `openings` observable and returns an Observable,\r\n * which, when it emits (either `next` or `complete`), signals that the\r\n * associated window should complete.\r\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\r\n * are Observables.\r\n * @method windowToggle\r\n * @owner Observable\r\n */\r\nfunction windowToggle(openings, closingSelector) {\r\n    return function (source) { return source.lift(new WindowToggleOperator(openings, closingSelector)); };\r\n}\r\nexports.windowToggle = windowToggle;\r\nvar WindowToggleOperator = (function () {\r\n    function WindowToggleOperator(openings, closingSelector) {\r\n        this.openings = openings;\r\n        this.closingSelector = closingSelector;\r\n    }\r\n    WindowToggleOperator.prototype.call = function (subscriber, source) {\r\n        return source.subscribe(new WindowToggleSubscriber(subscriber, this.openings, this.closingSelector));\r\n    };\r\n    return WindowToggleOperator;\r\n}());\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nvar WindowToggleSubscriber = (function (_super) {\r\n    __extends(WindowToggleSubscriber, _super);\r\n    function WindowToggleSubscriber(destination, openings, closingSelector) {\r\n        _super.call(this, destination);\r\n        this.openings = openings;\r\n        this.closingSelector = closingSelector;\r\n        this.contexts = [];\r\n        this.add(this.openSubscription = subscribeToResult_1.subscribeToResult(this, openings, openings));\r\n    }\r\n    WindowToggleSubscriber.prototype._next = function (value) {\r\n        var contexts = this.contexts;\r\n        if (contexts) {\r\n            var len = contexts.length;\r\n            for (var i = 0; i < len; i++) {\r\n                contexts[i].window.next(value);\r\n            }\r\n        }\r\n    };\r\n    WindowToggleSubscriber.prototype._error = function (err) {\r\n        var contexts = this.contexts;\r\n        this.contexts = null;\r\n        if (contexts) {\r\n            var len = contexts.length;\r\n            var index = -1;\r\n            while (++index < len) {\r\n                var context = contexts[index];\r\n                context.window.error(err);\r\n                context.subscription.unsubscribe();\r\n            }\r\n        }\r\n        _super.prototype._error.call(this, err);\r\n    };\r\n    WindowToggleSubscriber.prototype._complete = function () {\r\n        var contexts = this.contexts;\r\n        this.contexts = null;\r\n        if (contexts) {\r\n            var len = contexts.length;\r\n            var index = -1;\r\n            while (++index < len) {\r\n                var context = contexts[index];\r\n                context.window.complete();\r\n                context.subscription.unsubscribe();\r\n            }\r\n        }\r\n        _super.prototype._complete.call(this);\r\n    };\r\n    /** @deprecated internal use only */ WindowToggleSubscriber.prototype._unsubscribe = function () {\r\n        var contexts = this.contexts;\r\n        this.contexts = null;\r\n        if (contexts) {\r\n            var len = contexts.length;\r\n            var index = -1;\r\n            while (++index < len) {\r\n                var context = contexts[index];\r\n                context.window.unsubscribe();\r\n                context.subscription.unsubscribe();\r\n            }\r\n        }\r\n    };\r\n    WindowToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\r\n        if (outerValue === this.openings) {\r\n            var closingSelector = this.closingSelector;\r\n            var closingNotifier = tryCatch_1.tryCatch(closingSelector)(innerValue);\r\n            if (closingNotifier === errorObject_1.errorObject) {\r\n                return this.error(errorObject_1.errorObject.e);\r\n            }\r\n            else {\r\n                var window_1 = new Subject_1.Subject();\r\n                var subscription = new Subscription_1.Subscription();\r\n                var context = { window: window_1, subscription: subscription };\r\n                this.contexts.push(context);\r\n                var innerSubscription = subscribeToResult_1.subscribeToResult(this, closingNotifier, context);\r\n                if (innerSubscription.closed) {\r\n                    this.closeWindow(this.contexts.length - 1);\r\n                }\r\n                else {\r\n                    innerSubscription.context = context;\r\n                    subscription.add(innerSubscription);\r\n                }\r\n                this.destination.next(window_1);\r\n            }\r\n        }\r\n        else {\r\n            this.closeWindow(this.contexts.indexOf(outerValue));\r\n        }\r\n    };\r\n    WindowToggleSubscriber.prototype.notifyError = function (err) {\r\n        this.error(err);\r\n    };\r\n    WindowToggleSubscriber.prototype.notifyComplete = function (inner) {\r\n        if (inner !== this.openSubscription) {\r\n            this.closeWindow(this.contexts.indexOf(inner.context));\r\n        }\r\n    };\r\n    WindowToggleSubscriber.prototype.closeWindow = function (index) {\r\n        if (index === -1) {\r\n            return;\r\n        }\r\n        var contexts = this.contexts;\r\n        var context = contexts[index];\r\n        var window = context.window, subscription = context.subscription;\r\n        contexts.splice(index, 1);\r\n        window.complete();\r\n        subscription.unsubscribe();\r\n    };\r\n    return WindowToggleSubscriber;\r\n}(OuterSubscriber_1.OuterSubscriber));\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}