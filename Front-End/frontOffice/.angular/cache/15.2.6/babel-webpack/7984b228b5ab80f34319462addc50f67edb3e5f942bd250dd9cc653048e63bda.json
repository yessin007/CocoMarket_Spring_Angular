{"ast":null,"code":"\"use strict\";\n\nvar mergeMap_1 = require('./mergeMap');\n/* tslint:enable:max-line-length */\n/**\r\n * Projects each source value to an Observable which is merged in the output\r\n * Observable, in a serialized fashion waiting for each one to complete before\r\n * merging the next.\r\n *\r\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\r\n * these inner Observables using {@link concatAll}.</span>\r\n *\r\n * <img src=\"./img/concatMap.png\" width=\"100%\">\r\n *\r\n * Returns an Observable that emits items based on applying a function that you\r\n * supply to each item emitted by the source Observable, where that function\r\n * returns an (so-called \"inner\") Observable. Each new inner Observable is\r\n * concatenated with the previous inner Observable.\r\n *\r\n * __Warning:__ if source values arrive endlessly and faster than their\r\n * corresponding inner Observables can complete, it will result in memory issues\r\n * as inner Observables amass in an unbounded buffer waiting for their turn to\r\n * be subscribed to.\r\n *\r\n * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set\r\n * to `1`.\r\n *\r\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * // Results in the following:\r\n * // (results are not concurrent)\r\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\r\n * // on a 1000ms interval\r\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\r\n *\r\n * @see {@link concat}\r\n * @see {@link concatAll}\r\n * @see {@link concatMapTo}\r\n * @see {@link exhaustMap}\r\n * @see {@link mergeMap}\r\n * @see {@link switchMap}\r\n *\r\n * @param {function(value: T, ?index: number): ObservableInput} project A function\r\n * that, when applied to an item emitted by the source Observable, returns an\r\n * Observable.\r\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\r\n * A function to produce the value on the output Observable based on the values\r\n * and the indices of the source (outer) emission and the inner Observable\r\n * emission. The arguments passed to this function are:\r\n * - `outerValue`: the value that came from the source\r\n * - `innerValue`: the value that came from the projected Observable\r\n * - `outerIndex`: the \"index\" of the value that came from the source\r\n * - `innerIndex`: the \"index\" of the value from the projected Observable\r\n * @return {Observable} An Observable that emits the result of applying the\r\n * projection function (and the optional `resultSelector`) to each item emitted\r\n * by the source Observable and taking values from each projected inner\r\n * Observable sequentially.\r\n * @method concatMap\r\n * @owner Observable\r\n */\nfunction concatMap(project, resultSelector) {\n  return mergeMap_1.mergeMap(project, resultSelector, 1);\n}\nexports.concatMap = concatMap;","map":{"version":3,"names":["mergeMap_1","require","concatMap","project","resultSelector","mergeMap","exports"],"sources":["C:/Users/HP/Desktop/4SE3/PidevSym/PiDev_Spring_Angular/Front-End/frontOffice/node_modules/ng5-slider/node_modules/rxjs/operators/concatMap.js"],"sourcesContent":["\"use strict\";\r\nvar mergeMap_1 = require('./mergeMap');\r\n/* tslint:enable:max-line-length */\r\n/**\r\n * Projects each source value to an Observable which is merged in the output\r\n * Observable, in a serialized fashion waiting for each one to complete before\r\n * merging the next.\r\n *\r\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\r\n * these inner Observables using {@link concatAll}.</span>\r\n *\r\n * <img src=\"./img/concatMap.png\" width=\"100%\">\r\n *\r\n * Returns an Observable that emits items based on applying a function that you\r\n * supply to each item emitted by the source Observable, where that function\r\n * returns an (so-called \"inner\") Observable. Each new inner Observable is\r\n * concatenated with the previous inner Observable.\r\n *\r\n * __Warning:__ if source values arrive endlessly and faster than their\r\n * corresponding inner Observables can complete, it will result in memory issues\r\n * as inner Observables amass in an unbounded buffer waiting for their turn to\r\n * be subscribed to.\r\n *\r\n * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set\r\n * to `1`.\r\n *\r\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * // Results in the following:\r\n * // (results are not concurrent)\r\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\r\n * // on a 1000ms interval\r\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\r\n *\r\n * @see {@link concat}\r\n * @see {@link concatAll}\r\n * @see {@link concatMapTo}\r\n * @see {@link exhaustMap}\r\n * @see {@link mergeMap}\r\n * @see {@link switchMap}\r\n *\r\n * @param {function(value: T, ?index: number): ObservableInput} project A function\r\n * that, when applied to an item emitted by the source Observable, returns an\r\n * Observable.\r\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\r\n * A function to produce the value on the output Observable based on the values\r\n * and the indices of the source (outer) emission and the inner Observable\r\n * emission. The arguments passed to this function are:\r\n * - `outerValue`: the value that came from the source\r\n * - `innerValue`: the value that came from the projected Observable\r\n * - `outerIndex`: the \"index\" of the value that came from the source\r\n * - `innerIndex`: the \"index\" of the value from the projected Observable\r\n * @return {Observable} An Observable that emits the result of applying the\r\n * projection function (and the optional `resultSelector`) to each item emitted\r\n * by the source Observable and taking values from each projected inner\r\n * Observable sequentially.\r\n * @method concatMap\r\n * @owner Observable\r\n */\r\nfunction concatMap(project, resultSelector) {\r\n    return mergeMap_1.mergeMap(project, resultSelector, 1);\r\n}\r\nexports.concatMap = concatMap;\r\n"],"mappings":"AAAA,YAAY;;AACZ,IAAIA,UAAU,GAAGC,OAAO,CAAC,YAAY,CAAC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,SAAS,CAACC,OAAO,EAAEC,cAAc,EAAE;EACxC,OAAOJ,UAAU,CAACK,QAAQ,CAACF,OAAO,EAAEC,cAAc,EAAE,CAAC,CAAC;AAC1D;AACAE,OAAO,CAACJ,SAAS,GAAGA,SAAS"},"metadata":{},"sourceType":"script","externalDependencies":[]}