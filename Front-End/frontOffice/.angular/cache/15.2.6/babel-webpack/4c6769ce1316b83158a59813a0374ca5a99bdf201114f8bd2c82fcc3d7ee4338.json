{"ast":null,"code":"import { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { inject, APP_ID, Injectable, Inject, QueryList, Directive, Input, InjectionToken, Optional, EventEmitter, Output, NgModule } from '@angular/core';\nimport * as i1 from '@angular/cdk/platform';\nimport { _getFocusedElementPierceShadowDom, normalizePassiveListenerOptions, _getEventTarget, _getShadowRoot } from '@angular/cdk/platform';\nimport { Subject, Subscription, BehaviorSubject, of } from 'rxjs';\nimport { hasModifierKey, A, Z, ZERO, NINE, END, HOME, LEFT_ARROW, RIGHT_ARROW, UP_ARROW, DOWN_ARROW, TAB, ALT, CONTROL, MAC_META, META, SHIFT } from '@angular/cdk/keycodes';\nimport { tap, debounceTime, filter, map, take, skip, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { coerceBooleanProperty, coerceElement } from '@angular/cdk/coercion';\nimport * as i1$1 from '@angular/cdk/observers';\nimport { ObserversModule } from '@angular/cdk/observers';\nimport { BreakpointObserver } from '@angular/cdk/layout';\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n/** IDs are delimited by an empty space, as per the spec. */\nconst ID_DELIMITER = ' ';\n/**\r\n * Adds the given ID to the specified ARIA attribute on an element.\r\n * Used for attributes such as aria-labelledby, aria-owns, etc.\r\n */\nfunction addAriaReferencedId(el, attr, id) {\n  const ids = getAriaReferenceIds(el, attr);\n  if (ids.some(existingId => existingId.trim() == id.trim())) {\n    return;\n  }\n  ids.push(id.trim());\n  el.setAttribute(attr, ids.join(ID_DELIMITER));\n}\n/**\r\n * Removes the given ID from the specified ARIA attribute on an element.\r\n * Used for attributes such as aria-labelledby, aria-owns, etc.\r\n */\nfunction removeAriaReferencedId(el, attr, id) {\n  const ids = getAriaReferenceIds(el, attr);\n  const filteredIds = ids.filter(val => val != id.trim());\n  if (filteredIds.length) {\n    el.setAttribute(attr, filteredIds.join(ID_DELIMITER));\n  } else {\n    el.removeAttribute(attr);\n  }\n}\n/**\r\n * Gets the list of IDs referenced by the given ARIA attribute on an element.\r\n * Used for attributes such as aria-labelledby, aria-owns, etc.\r\n */\nfunction getAriaReferenceIds(el, attr) {\n  // Get string array of all individual ids (whitespace delimited) in the attribute value\n  return (el.getAttribute(attr) || '').match(/\\S+/g) || [];\n}\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n/**\r\n * ID used for the body container where all messages are appended.\r\n * @deprecated No longer being used. To be removed.\r\n * @breaking-change 14.0.0\r\n */\nconst MESSAGES_CONTAINER_ID = 'cdk-describedby-message-container';\n/**\r\n * ID prefix used for each created message element.\r\n * @deprecated To be turned into a private variable.\r\n * @breaking-change 14.0.0\r\n */\nconst CDK_DESCRIBEDBY_ID_PREFIX = 'cdk-describedby-message';\n/**\r\n * Attribute given to each host element that is described by a message element.\r\n * @deprecated To be turned into a private variable.\r\n * @breaking-change 14.0.0\r\n */\nconst CDK_DESCRIBEDBY_HOST_ATTRIBUTE = 'cdk-describedby-host';\n/** Global incremental identifier for each registered message element. */\nlet nextId = 0;\n/**\r\n * Utility that creates visually hidden elements with a message content. Useful for elements that\r\n * want to use aria-describedby to further describe themselves without adding additional visual\r\n * content.\r\n */\nclass AriaDescriber {\n  constructor(_document,\n  /**\r\n   * @deprecated To be turned into a required parameter.\r\n   * @breaking-change 14.0.0\r\n   */\n  _platform) {\n    this._platform = _platform;\n    /** Map of all registered message elements that have been placed into the document. */\n    this._messageRegistry = new Map();\n    /** Container for all registered messages. */\n    this._messagesContainer = null;\n    /** Unique ID for the service. */\n    this._id = `${nextId++}`;\n    this._document = _document;\n    this._id = inject(APP_ID) + '-' + nextId++;\n  }\n  describe(hostElement, message, role) {\n    if (!this._canBeDescribed(hostElement, message)) {\n      return;\n    }\n    const key = getKey(message, role);\n    if (typeof message !== 'string') {\n      // We need to ensure that the element has an ID.\n      setMessageId(message, this._id);\n      this._messageRegistry.set(key, {\n        messageElement: message,\n        referenceCount: 0\n      });\n    } else if (!this._messageRegistry.has(key)) {\n      this._createMessageElement(message, role);\n    }\n    if (!this._isElementDescribedByMessage(hostElement, key)) {\n      this._addMessageReference(hostElement, key);\n    }\n  }\n  removeDescription(hostElement, message, role) {\n    if (!message || !this._isElementNode(hostElement)) {\n      return;\n    }\n    const key = getKey(message, role);\n    if (this._isElementDescribedByMessage(hostElement, key)) {\n      this._removeMessageReference(hostElement, key);\n    }\n    // If the message is a string, it means that it's one that we created for the\n    // consumer so we can remove it safely, otherwise we should leave it in place.\n    if (typeof message === 'string') {\n      const registeredMessage = this._messageRegistry.get(key);\n      if (registeredMessage && registeredMessage.referenceCount === 0) {\n        this._deleteMessageElement(key);\n      }\n    }\n    if (this._messagesContainer?.childNodes.length === 0) {\n      this._messagesContainer.remove();\n      this._messagesContainer = null;\n    }\n  }\n  /** Unregisters all created message elements and removes the message container. */\n  ngOnDestroy() {\n    const describedElements = this._document.querySelectorAll(`[${CDK_DESCRIBEDBY_HOST_ATTRIBUTE}=\"${this._id}\"]`);\n    for (let i = 0; i < describedElements.length; i++) {\n      this._removeCdkDescribedByReferenceIds(describedElements[i]);\n      describedElements[i].removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n    }\n    this._messagesContainer?.remove();\n    this._messagesContainer = null;\n    this._messageRegistry.clear();\n  }\n  /**\r\n   * Creates a new element in the visually hidden message container element with the message\r\n   * as its content and adds it to the message registry.\r\n   */\n  _createMessageElement(message, role) {\n    const messageElement = this._document.createElement('div');\n    setMessageId(messageElement, this._id);\n    messageElement.textContent = message;\n    if (role) {\n      messageElement.setAttribute('role', role);\n    }\n    this._createMessagesContainer();\n    this._messagesContainer.appendChild(messageElement);\n    this._messageRegistry.set(getKey(message, role), {\n      messageElement,\n      referenceCount: 0\n    });\n  }\n  /** Deletes the message element from the global messages container. */\n  _deleteMessageElement(key) {\n    this._messageRegistry.get(key)?.messageElement?.remove();\n    this._messageRegistry.delete(key);\n  }\n  /** Creates the global container for all aria-describedby messages. */\n  _createMessagesContainer() {\n    if (this._messagesContainer) {\n      return;\n    }\n    const containerClassName = 'cdk-describedby-message-container';\n    const serverContainers = this._document.querySelectorAll(`.${containerClassName}[platform=\"server\"]`);\n    for (let i = 0; i < serverContainers.length; i++) {\n      // When going from the server to the client, we may end up in a situation where there's\n      // already a container on the page, but we don't have a reference to it. Clear the\n      // old container so we don't get duplicates. Doing this, instead of emptying the previous\n      // container, should be slightly faster.\n      serverContainers[i].remove();\n    }\n    const messagesContainer = this._document.createElement('div');\n    // We add `visibility: hidden` in order to prevent text in this container from\n    // being searchable by the browser's Ctrl + F functionality.\n    // Screen-readers will still read the description for elements with aria-describedby even\n    // when the description element is not visible.\n    messagesContainer.style.visibility = 'hidden';\n    // Even though we use `visibility: hidden`, we still apply `cdk-visually-hidden` so that\n    // the description element doesn't impact page layout.\n    messagesContainer.classList.add(containerClassName);\n    messagesContainer.classList.add('cdk-visually-hidden');\n    // @breaking-change 14.0.0 Remove null check for `_platform`.\n    if (this._platform && !this._platform.isBrowser) {\n      messagesContainer.setAttribute('platform', 'server');\n    }\n    this._document.body.appendChild(messagesContainer);\n    this._messagesContainer = messagesContainer;\n  }\n  /** Removes all cdk-describedby messages that are hosted through the element. */\n  _removeCdkDescribedByReferenceIds(element) {\n    // Remove all aria-describedby reference IDs that are prefixed by CDK_DESCRIBEDBY_ID_PREFIX\n    const originalReferenceIds = getAriaReferenceIds(element, 'aria-describedby').filter(id => id.indexOf(CDK_DESCRIBEDBY_ID_PREFIX) != 0);\n    element.setAttribute('aria-describedby', originalReferenceIds.join(' '));\n  }\n  /**\r\n   * Adds a message reference to the element using aria-describedby and increments the registered\r\n   * message's reference count.\r\n   */\n  _addMessageReference(element, key) {\n    const registeredMessage = this._messageRegistry.get(key);\n    // Add the aria-describedby reference and set the\n    // describedby_host attribute to mark the element.\n    addAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n    element.setAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE, this._id);\n    registeredMessage.referenceCount++;\n  }\n  /**\r\n   * Removes a message reference from the element using aria-describedby\r\n   * and decrements the registered message's reference count.\r\n   */\n  _removeMessageReference(element, key) {\n    const registeredMessage = this._messageRegistry.get(key);\n    registeredMessage.referenceCount--;\n    removeAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n    element.removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n  }\n  /** Returns true if the element has been described by the provided message ID. */\n  _isElementDescribedByMessage(element, key) {\n    const referenceIds = getAriaReferenceIds(element, 'aria-describedby');\n    const registeredMessage = this._messageRegistry.get(key);\n    const messageId = registeredMessage && registeredMessage.messageElement.id;\n    return !!messageId && referenceIds.indexOf(messageId) != -1;\n  }\n  /** Determines whether a message can be described on a particular element. */\n  _canBeDescribed(element, message) {\n    if (!this._isElementNode(element)) {\n      return false;\n    }\n    if (message && typeof message === 'object') {\n      // We'd have to make some assumptions about the description element's text, if the consumer\n      // passed in an element. Assume that if an element is passed in, the consumer has verified\n      // that it can be used as a description.\n      return true;\n    }\n    const trimmedMessage = message == null ? '' : `${message}`.trim();\n    const ariaLabel = element.getAttribute('aria-label');\n    // We shouldn't set descriptions if they're exactly the same as the `aria-label` of the\n    // element, because screen readers will end up reading out the same text twice in a row.\n    return trimmedMessage ? !ariaLabel || ariaLabel.trim() !== trimmedMessage : false;\n  }\n  /** Checks whether a node is an Element node. */\n  _isElementNode(element) {\n    return element.nodeType === this._document.ELEMENT_NODE;\n  }\n}\nAriaDescriber.ɵfac = function AriaDescriber_Factory(t) {\n  return new (t || AriaDescriber)(i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(i1.Platform));\n};\nAriaDescriber.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: AriaDescriber,\n  factory: AriaDescriber.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AriaDescriber, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: i1.Platform\n    }];\n  }, null);\n})();\n/** Gets a key that can be used to look messages up in the registry. */\nfunction getKey(message, role) {\n  return typeof message === 'string' ? `${role || ''}/${message}` : message;\n}\n/** Assigns a unique ID to an element, if it doesn't have one already. */\nfunction setMessageId(element, serviceId) {\n  if (!element.id) {\n    element.id = `${CDK_DESCRIBEDBY_ID_PREFIX}-${serviceId}-${nextId++}`;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n/**\r\n * This class manages keyboard events for selectable lists. If you pass it a query list\r\n * of items, it will set the active item correctly when arrow events occur.\r\n */\nclass ListKeyManager {\n  constructor(_items) {\n    this._items = _items;\n    this._activeItemIndex = -1;\n    this._activeItem = null;\n    this._wrap = false;\n    this._letterKeyStream = new Subject();\n    this._typeaheadSubscription = Subscription.EMPTY;\n    this._vertical = true;\n    this._allowedModifierKeys = [];\n    this._homeAndEnd = false;\n    /**\r\n     * Predicate function that can be used to check whether an item should be skipped\r\n     * by the key manager. By default, disabled items are skipped.\r\n     */\n    this._skipPredicateFn = item => item.disabled;\n    // Buffer for the letters that the user has pressed when the typeahead option is turned on.\n    this._pressedLetters = [];\n    /**\r\n     * Stream that emits any time the TAB key is pressed, so components can react\r\n     * when focus is shifted off of the list.\r\n     */\n    this.tabOut = new Subject();\n    /** Stream that emits whenever the active item of the list manager changes. */\n    this.change = new Subject();\n    // We allow for the items to be an array because, in some cases, the consumer may\n    // not have access to a QueryList of the items they want to manage (e.g. when the\n    // items aren't being collected via `ViewChildren` or `ContentChildren`).\n    if (_items instanceof QueryList) {\n      _items.changes.subscribe(newItems => {\n        if (this._activeItem) {\n          const itemArray = newItems.toArray();\n          const newIndex = itemArray.indexOf(this._activeItem);\n          if (newIndex > -1 && newIndex !== this._activeItemIndex) {\n            this._activeItemIndex = newIndex;\n          }\n        }\n      });\n    }\n  }\n  /**\r\n   * Sets the predicate function that determines which items should be skipped by the\r\n   * list key manager.\r\n   * @param predicate Function that determines whether the given item should be skipped.\r\n   */\n  skipPredicate(predicate) {\n    this._skipPredicateFn = predicate;\n    return this;\n  }\n  /**\r\n   * Configures wrapping mode, which determines whether the active item will wrap to\r\n   * the other end of list when there are no more items in the given direction.\r\n   * @param shouldWrap Whether the list should wrap when reaching the end.\r\n   */\n  withWrap(shouldWrap = true) {\n    this._wrap = shouldWrap;\n    return this;\n  }\n  /**\r\n   * Configures whether the key manager should be able to move the selection vertically.\r\n   * @param enabled Whether vertical selection should be enabled.\r\n   */\n  withVerticalOrientation(enabled = true) {\n    this._vertical = enabled;\n    return this;\n  }\n  /**\r\n   * Configures the key manager to move the selection horizontally.\r\n   * Passing in `null` will disable horizontal movement.\r\n   * @param direction Direction in which the selection can be moved.\r\n   */\n  withHorizontalOrientation(direction) {\n    this._horizontal = direction;\n    return this;\n  }\n  /**\r\n   * Modifier keys which are allowed to be held down and whose default actions will be prevented\r\n   * as the user is pressing the arrow keys. Defaults to not allowing any modifier keys.\r\n   */\n  withAllowedModifierKeys(keys) {\n    this._allowedModifierKeys = keys;\n    return this;\n  }\n  /**\r\n   * Turns on typeahead mode which allows users to set the active item by typing.\r\n   * @param debounceInterval Time to wait after the last keystroke before setting the active item.\r\n   */\n  withTypeAhead(debounceInterval = 200) {\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && this._items.length && this._items.some(item => typeof item.getLabel !== 'function')) {\n      throw Error('ListKeyManager items in typeahead mode must implement the `getLabel` method.');\n    }\n    this._typeaheadSubscription.unsubscribe();\n    // Debounce the presses of non-navigational keys, collect the ones that correspond to letters\n    // and convert those letters back into a string. Afterwards find the first item that starts\n    // with that string and select it.\n    this._typeaheadSubscription = this._letterKeyStream.pipe(tap(letter => this._pressedLetters.push(letter)), debounceTime(debounceInterval), filter(() => this._pressedLetters.length > 0), map(() => this._pressedLetters.join(''))).subscribe(inputString => {\n      const items = this._getItemsArray();\n      // Start at 1 because we want to start searching at the item immediately\n      // following the current active item.\n      for (let i = 1; i < items.length + 1; i++) {\n        const index = (this._activeItemIndex + i) % items.length;\n        const item = items[index];\n        if (!this._skipPredicateFn(item) && item.getLabel().toUpperCase().trim().indexOf(inputString) === 0) {\n          this.setActiveItem(index);\n          break;\n        }\n      }\n      this._pressedLetters = [];\n    });\n    return this;\n  }\n  /**\r\n   * Configures the key manager to activate the first and last items\r\n   * respectively when the Home or End key is pressed.\r\n   * @param enabled Whether pressing the Home or End key activates the first/last item.\r\n   */\n  withHomeAndEnd(enabled = true) {\n    this._homeAndEnd = enabled;\n    return this;\n  }\n  setActiveItem(item) {\n    const previousActiveItem = this._activeItem;\n    this.updateActiveItem(item);\n    if (this._activeItem !== previousActiveItem) {\n      this.change.next(this._activeItemIndex);\n    }\n  }\n  /**\r\n   * Sets the active item depending on the key event passed in.\r\n   * @param event Keyboard event to be used for determining which element should be active.\r\n   */\n  onKeydown(event) {\n    const keyCode = event.keyCode;\n    const modifiers = ['altKey', 'ctrlKey', 'metaKey', 'shiftKey'];\n    const isModifierAllowed = modifiers.every(modifier => {\n      return !event[modifier] || this._allowedModifierKeys.indexOf(modifier) > -1;\n    });\n    switch (keyCode) {\n      case TAB:\n        this.tabOut.next();\n        return;\n      case DOWN_ARROW:\n        if (this._vertical && isModifierAllowed) {\n          this.setNextItemActive();\n          break;\n        } else {\n          return;\n        }\n      case UP_ARROW:\n        if (this._vertical && isModifierAllowed) {\n          this.setPreviousItemActive();\n          break;\n        } else {\n          return;\n        }\n      case RIGHT_ARROW:\n        if (this._horizontal && isModifierAllowed) {\n          this._horizontal === 'rtl' ? this.setPreviousItemActive() : this.setNextItemActive();\n          break;\n        } else {\n          return;\n        }\n      case LEFT_ARROW:\n        if (this._horizontal && isModifierAllowed) {\n          this._horizontal === 'rtl' ? this.setNextItemActive() : this.setPreviousItemActive();\n          break;\n        } else {\n          return;\n        }\n      case HOME:\n        if (this._homeAndEnd && isModifierAllowed) {\n          this.setFirstItemActive();\n          break;\n        } else {\n          return;\n        }\n      case END:\n        if (this._homeAndEnd && isModifierAllowed) {\n          this.setLastItemActive();\n          break;\n        } else {\n          return;\n        }\n      default:\n        if (isModifierAllowed || hasModifierKey(event, 'shiftKey')) {\n          // Attempt to use the `event.key` which also maps it to the user's keyboard language,\n          // otherwise fall back to resolving alphanumeric characters via the keyCode.\n          if (event.key && event.key.length === 1) {\n            this._letterKeyStream.next(event.key.toLocaleUpperCase());\n          } else if (keyCode >= A && keyCode <= Z || keyCode >= ZERO && keyCode <= NINE) {\n            this._letterKeyStream.next(String.fromCharCode(keyCode));\n          }\n        }\n        // Note that we return here, in order to avoid preventing\n        // the default action of non-navigational keys.\n        return;\n    }\n    this._pressedLetters = [];\n    event.preventDefault();\n  }\n  /** Index of the currently active item. */\n  get activeItemIndex() {\n    return this._activeItemIndex;\n  }\n  /** The active item. */\n  get activeItem() {\n    return this._activeItem;\n  }\n  /** Gets whether the user is currently typing into the manager using the typeahead feature. */\n  isTyping() {\n    return this._pressedLetters.length > 0;\n  }\n  /** Sets the active item to the first enabled item in the list. */\n  setFirstItemActive() {\n    this._setActiveItemByIndex(0, 1);\n  }\n  /** Sets the active item to the last enabled item in the list. */\n  setLastItemActive() {\n    this._setActiveItemByIndex(this._items.length - 1, -1);\n  }\n  /** Sets the active item to the next enabled item in the list. */\n  setNextItemActive() {\n    this._activeItemIndex < 0 ? this.setFirstItemActive() : this._setActiveItemByDelta(1);\n  }\n  /** Sets the active item to a previous enabled item in the list. */\n  setPreviousItemActive() {\n    this._activeItemIndex < 0 && this._wrap ? this.setLastItemActive() : this._setActiveItemByDelta(-1);\n  }\n  updateActiveItem(item) {\n    const itemArray = this._getItemsArray();\n    const index = typeof item === 'number' ? item : itemArray.indexOf(item);\n    const activeItem = itemArray[index];\n    // Explicitly check for `null` and `undefined` because other falsy values are valid.\n    this._activeItem = activeItem == null ? null : activeItem;\n    this._activeItemIndex = index;\n  }\n  /**\r\n   * This method sets the active item, given a list of items and the delta between the\r\n   * currently active item and the new active item. It will calculate differently\r\n   * depending on whether wrap mode is turned on.\r\n   */\n  _setActiveItemByDelta(delta) {\n    this._wrap ? this._setActiveInWrapMode(delta) : this._setActiveInDefaultMode(delta);\n  }\n  /**\r\n   * Sets the active item properly given \"wrap\" mode. In other words, it will continue to move\r\n   * down the list until it finds an item that is not disabled, and it will wrap if it\r\n   * encounters either end of the list.\r\n   */\n  _setActiveInWrapMode(delta) {\n    const items = this._getItemsArray();\n    for (let i = 1; i <= items.length; i++) {\n      const index = (this._activeItemIndex + delta * i + items.length) % items.length;\n      const item = items[index];\n      if (!this._skipPredicateFn(item)) {\n        this.setActiveItem(index);\n        return;\n      }\n    }\n  }\n  /**\r\n   * Sets the active item properly given the default mode. In other words, it will\r\n   * continue to move down the list until it finds an item that is not disabled. If\r\n   * it encounters either end of the list, it will stop and not wrap.\r\n   */\n  _setActiveInDefaultMode(delta) {\n    this._setActiveItemByIndex(this._activeItemIndex + delta, delta);\n  }\n  /**\r\n   * Sets the active item to the first enabled item starting at the index specified. If the\r\n   * item is disabled, it will move in the fallbackDelta direction until it either\r\n   * finds an enabled item or encounters the end of the list.\r\n   */\n  _setActiveItemByIndex(index, fallbackDelta) {\n    const items = this._getItemsArray();\n    if (!items[index]) {\n      return;\n    }\n    while (this._skipPredicateFn(items[index])) {\n      index += fallbackDelta;\n      if (!items[index]) {\n        return;\n      }\n    }\n    this.setActiveItem(index);\n  }\n  /** Returns the items as an array. */\n  _getItemsArray() {\n    return this._items instanceof QueryList ? this._items.toArray() : this._items;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\nclass ActiveDescendantKeyManager extends ListKeyManager {\n  setActiveItem(index) {\n    if (this.activeItem) {\n      this.activeItem.setInactiveStyles();\n    }\n    super.setActiveItem(index);\n    if (this.activeItem) {\n      this.activeItem.setActiveStyles();\n    }\n  }\n}\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\nclass FocusKeyManager extends ListKeyManager {\n  constructor() {\n    super(...arguments);\n    this._origin = 'program';\n  }\n  /**\r\n   * Sets the focus origin that will be passed in to the items for any subsequent `focus` calls.\r\n   * @param origin Focus origin to be used when focusing items.\r\n   */\n  setFocusOrigin(origin) {\n    this._origin = origin;\n    return this;\n  }\n  setActiveItem(item) {\n    super.setActiveItem(item);\n    if (this.activeItem) {\n      this.activeItem.focus(this._origin);\n    }\n  }\n}\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n/**\r\n * Configuration for the isFocusable method.\r\n */\nclass IsFocusableConfig {\n  constructor() {\n    /**\r\n     * Whether to count an element as focusable even if it is not currently visible.\r\n     */\n    this.ignoreVisibility = false;\n  }\n}\n// The InteractivityChecker leans heavily on the ally.js accessibility utilities.\n// Methods like `isTabbable` are only covering specific edge-cases for the browsers which are\n// supported.\n/**\r\n * Utility for checking the interactivity of an element, such as whether is is focusable or\r\n * tabbable.\r\n */\nclass InteractivityChecker {\n  constructor(_platform) {\n    this._platform = _platform;\n  }\n  /**\r\n   * Gets whether an element is disabled.\r\n   *\r\n   * @param element Element to be checked.\r\n   * @returns Whether the element is disabled.\r\n   */\n  isDisabled(element) {\n    // This does not capture some cases, such as a non-form control with a disabled attribute or\n    // a form control inside of a disabled form, but should capture the most common cases.\n    return element.hasAttribute('disabled');\n  }\n  /**\r\n   * Gets whether an element is visible for the purposes of interactivity.\r\n   *\r\n   * This will capture states like `display: none` and `visibility: hidden`, but not things like\r\n   * being clipped by an `overflow: hidden` parent or being outside the viewport.\r\n   *\r\n   * @returns Whether the element is visible.\r\n   */\n  isVisible(element) {\n    return hasGeometry(element) && getComputedStyle(element).visibility === 'visible';\n  }\n  /**\r\n   * Gets whether an element can be reached via Tab key.\r\n   * Assumes that the element has already been checked with isFocusable.\r\n   *\r\n   * @param element Element to be checked.\r\n   * @returns Whether the element is tabbable.\r\n   */\n  isTabbable(element) {\n    // Nothing is tabbable on the server 😎\n    if (!this._platform.isBrowser) {\n      return false;\n    }\n    const frameElement = getFrameElement(getWindow(element));\n    if (frameElement) {\n      // Frame elements inherit their tabindex onto all child elements.\n      if (getTabIndexValue(frameElement) === -1) {\n        return false;\n      }\n      // Browsers disable tabbing to an element inside of an invisible frame.\n      if (!this.isVisible(frameElement)) {\n        return false;\n      }\n    }\n    let nodeName = element.nodeName.toLowerCase();\n    let tabIndexValue = getTabIndexValue(element);\n    if (element.hasAttribute('contenteditable')) {\n      return tabIndexValue !== -1;\n    }\n    if (nodeName === 'iframe' || nodeName === 'object') {\n      // The frame or object's content may be tabbable depending on the content, but it's\n      // not possibly to reliably detect the content of the frames. We always consider such\n      // elements as non-tabbable.\n      return false;\n    }\n    // In iOS, the browser only considers some specific elements as tabbable.\n    if (this._platform.WEBKIT && this._platform.IOS && !isPotentiallyTabbableIOS(element)) {\n      return false;\n    }\n    if (nodeName === 'audio') {\n      // Audio elements without controls enabled are never tabbable, regardless\n      // of the tabindex attribute explicitly being set.\n      if (!element.hasAttribute('controls')) {\n        return false;\n      }\n      // Audio elements with controls are by default tabbable unless the\n      // tabindex attribute is set to `-1` explicitly.\n      return tabIndexValue !== -1;\n    }\n    if (nodeName === 'video') {\n      // For all video elements, if the tabindex attribute is set to `-1`, the video\n      // is not tabbable. Note: We cannot rely on the default `HTMLElement.tabIndex`\n      // property as that one is set to `-1` in Chrome, Edge and Safari v13.1. The\n      // tabindex attribute is the source of truth here.\n      if (tabIndexValue === -1) {\n        return false;\n      }\n      // If the tabindex is explicitly set, and not `-1` (as per check before), the\n      // video element is always tabbable (regardless of whether it has controls or not).\n      if (tabIndexValue !== null) {\n        return true;\n      }\n      // Otherwise (when no explicit tabindex is set), a video is only tabbable if it\n      // has controls enabled. Firefox is special as videos are always tabbable regardless\n      // of whether there are controls or not.\n      return this._platform.FIREFOX || element.hasAttribute('controls');\n    }\n    return element.tabIndex >= 0;\n  }\n  /**\r\n   * Gets whether an element can be focused by the user.\r\n   *\r\n   * @param element Element to be checked.\r\n   * @param config The config object with options to customize this method's behavior\r\n   * @returns Whether the element is focusable.\r\n   */\n  isFocusable(element, config) {\n    // Perform checks in order of left to most expensive.\n    // Again, naive approach that does not capture many edge cases and browser quirks.\n    return isPotentiallyFocusable(element) && !this.isDisabled(element) && (config?.ignoreVisibility || this.isVisible(element));\n  }\n}\nInteractivityChecker.ɵfac = function InteractivityChecker_Factory(t) {\n  return new (t || InteractivityChecker)(i0.ɵɵinject(i1.Platform));\n};\nInteractivityChecker.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: InteractivityChecker,\n  factory: InteractivityChecker.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(InteractivityChecker, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.Platform\n    }];\n  }, null);\n})();\n/**\r\n * Returns the frame element from a window object. Since browsers like MS Edge throw errors if\r\n * the frameElement property is being accessed from a different host address, this property\r\n * should be accessed carefully.\r\n */\nfunction getFrameElement(window) {\n  try {\n    return window.frameElement;\n  } catch {\n    return null;\n  }\n}\n/** Checks whether the specified element has any geometry / rectangles. */\nfunction hasGeometry(element) {\n  // Use logic from jQuery to check for an invisible element.\n  // See https://github.com/jquery/jquery/blob/master/src/css/hiddenVisibleSelectors.js#L12\n  return !!(element.offsetWidth || element.offsetHeight || typeof element.getClientRects === 'function' && element.getClientRects().length);\n}\n/** Gets whether an element's  */\nfunction isNativeFormElement(element) {\n  let nodeName = element.nodeName.toLowerCase();\n  return nodeName === 'input' || nodeName === 'select' || nodeName === 'button' || nodeName === 'textarea';\n}\n/** Gets whether an element is an `<input type=\"hidden\">`. */\nfunction isHiddenInput(element) {\n  return isInputElement(element) && element.type == 'hidden';\n}\n/** Gets whether an element is an anchor that has an href attribute. */\nfunction isAnchorWithHref(element) {\n  return isAnchorElement(element) && element.hasAttribute('href');\n}\n/** Gets whether an element is an input element. */\nfunction isInputElement(element) {\n  return element.nodeName.toLowerCase() == 'input';\n}\n/** Gets whether an element is an anchor element. */\nfunction isAnchorElement(element) {\n  return element.nodeName.toLowerCase() == 'a';\n}\n/** Gets whether an element has a valid tabindex. */\nfunction hasValidTabIndex(element) {\n  if (!element.hasAttribute('tabindex') || element.tabIndex === undefined) {\n    return false;\n  }\n  let tabIndex = element.getAttribute('tabindex');\n  return !!(tabIndex && !isNaN(parseInt(tabIndex, 10)));\n}\n/**\r\n * Returns the parsed tabindex from the element attributes instead of returning the\r\n * evaluated tabindex from the browsers defaults.\r\n */\nfunction getTabIndexValue(element) {\n  if (!hasValidTabIndex(element)) {\n    return null;\n  }\n  // See browser issue in Gecko https://bugzilla.mozilla.org/show_bug.cgi?id=1128054\n  const tabIndex = parseInt(element.getAttribute('tabindex') || '', 10);\n  return isNaN(tabIndex) ? -1 : tabIndex;\n}\n/** Checks whether the specified element is potentially tabbable on iOS */\nfunction isPotentiallyTabbableIOS(element) {\n  let nodeName = element.nodeName.toLowerCase();\n  let inputType = nodeName === 'input' && element.type;\n  return inputType === 'text' || inputType === 'password' || nodeName === 'select' || nodeName === 'textarea';\n}\n/**\r\n * Gets whether an element is potentially focusable without taking current visible/disabled state\r\n * into account.\r\n */\nfunction isPotentiallyFocusable(element) {\n  // Inputs are potentially focusable *unless* they're type=\"hidden\".\n  if (isHiddenInput(element)) {\n    return false;\n  }\n  return isNativeFormElement(element) || isAnchorWithHref(element) || element.hasAttribute('contenteditable') || hasValidTabIndex(element);\n}\n/** Gets the parent window of a DOM node with regards of being inside of an iframe. */\nfunction getWindow(node) {\n  // ownerDocument is null if `node` itself *is* a document.\n  return node.ownerDocument && node.ownerDocument.defaultView || window;\n}\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n/**\r\n * Class that allows for trapping focus within a DOM element.\r\n *\r\n * This class currently uses a relatively simple approach to focus trapping.\r\n * It assumes that the tab order is the same as DOM order, which is not necessarily true.\r\n * Things like `tabIndex > 0`, flex `order`, and shadow roots can cause the two to be misaligned.\r\n *\r\n * @deprecated Use `ConfigurableFocusTrap` instead.\r\n * @breaking-change 11.0.0\r\n */\nclass FocusTrap {\n  constructor(_element, _checker, _ngZone, _document, deferAnchors = false) {\n    this._element = _element;\n    this._checker = _checker;\n    this._ngZone = _ngZone;\n    this._document = _document;\n    this._hasAttached = false;\n    // Event listeners for the anchors. Need to be regular functions so that we can unbind them later.\n    this.startAnchorListener = () => this.focusLastTabbableElement();\n    this.endAnchorListener = () => this.focusFirstTabbableElement();\n    this._enabled = true;\n    if (!deferAnchors) {\n      this.attachAnchors();\n    }\n  }\n  /** Whether the focus trap is active. */\n  get enabled() {\n    return this._enabled;\n  }\n  set enabled(value) {\n    this._enabled = value;\n    if (this._startAnchor && this._endAnchor) {\n      this._toggleAnchorTabIndex(value, this._startAnchor);\n      this._toggleAnchorTabIndex(value, this._endAnchor);\n    }\n  }\n  /** Destroys the focus trap by cleaning up the anchors. */\n  destroy() {\n    const startAnchor = this._startAnchor;\n    const endAnchor = this._endAnchor;\n    if (startAnchor) {\n      startAnchor.removeEventListener('focus', this.startAnchorListener);\n      startAnchor.remove();\n    }\n    if (endAnchor) {\n      endAnchor.removeEventListener('focus', this.endAnchorListener);\n      endAnchor.remove();\n    }\n    this._startAnchor = this._endAnchor = null;\n    this._hasAttached = false;\n  }\n  /**\r\n   * Inserts the anchors into the DOM. This is usually done automatically\r\n   * in the constructor, but can be deferred for cases like directives with `*ngIf`.\r\n   * @returns Whether the focus trap managed to attach successfully. This may not be the case\r\n   * if the target element isn't currently in the DOM.\r\n   */\n  attachAnchors() {\n    // If we're not on the browser, there can be no focus to trap.\n    if (this._hasAttached) {\n      return true;\n    }\n    this._ngZone.runOutsideAngular(() => {\n      if (!this._startAnchor) {\n        this._startAnchor = this._createAnchor();\n        this._startAnchor.addEventListener('focus', this.startAnchorListener);\n      }\n      if (!this._endAnchor) {\n        this._endAnchor = this._createAnchor();\n        this._endAnchor.addEventListener('focus', this.endAnchorListener);\n      }\n    });\n    if (this._element.parentNode) {\n      this._element.parentNode.insertBefore(this._startAnchor, this._element);\n      this._element.parentNode.insertBefore(this._endAnchor, this._element.nextSibling);\n      this._hasAttached = true;\n    }\n    return this._hasAttached;\n  }\n  /**\r\n   * Waits for the zone to stabilize, then focuses the first tabbable element.\r\n   * @returns Returns a promise that resolves with a boolean, depending\r\n   * on whether focus was moved successfully.\r\n   */\n  focusInitialElementWhenReady(options) {\n    return new Promise(resolve => {\n      this._executeOnStable(() => resolve(this.focusInitialElement(options)));\n    });\n  }\n  /**\r\n   * Waits for the zone to stabilize, then focuses\r\n   * the first tabbable element within the focus trap region.\r\n   * @returns Returns a promise that resolves with a boolean, depending\r\n   * on whether focus was moved successfully.\r\n   */\n  focusFirstTabbableElementWhenReady(options) {\n    return new Promise(resolve => {\n      this._executeOnStable(() => resolve(this.focusFirstTabbableElement(options)));\n    });\n  }\n  /**\r\n   * Waits for the zone to stabilize, then focuses\r\n   * the last tabbable element within the focus trap region.\r\n   * @returns Returns a promise that resolves with a boolean, depending\r\n   * on whether focus was moved successfully.\r\n   */\n  focusLastTabbableElementWhenReady(options) {\n    return new Promise(resolve => {\n      this._executeOnStable(() => resolve(this.focusLastTabbableElement(options)));\n    });\n  }\n  /**\r\n   * Get the specified boundary element of the trapped region.\r\n   * @param bound The boundary to get (start or end of trapped region).\r\n   * @returns The boundary element.\r\n   */\n  _getRegionBoundary(bound) {\n    // Contains the deprecated version of selector, for temporary backwards comparability.\n    const markers = this._element.querySelectorAll(`[cdk-focus-region-${bound}], ` + `[cdkFocusRegion${bound}], ` + `[cdk-focus-${bound}]`);\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      for (let i = 0; i < markers.length; i++) {\n        // @breaking-change 8.0.0\n        if (markers[i].hasAttribute(`cdk-focus-${bound}`)) {\n          console.warn(`Found use of deprecated attribute 'cdk-focus-${bound}', ` + `use 'cdkFocusRegion${bound}' instead. The deprecated ` + `attribute will be removed in 8.0.0.`, markers[i]);\n        } else if (markers[i].hasAttribute(`cdk-focus-region-${bound}`)) {\n          console.warn(`Found use of deprecated attribute 'cdk-focus-region-${bound}', ` + `use 'cdkFocusRegion${bound}' instead. The deprecated attribute ` + `will be removed in 8.0.0.`, markers[i]);\n        }\n      }\n    }\n    if (bound == 'start') {\n      return markers.length ? markers[0] : this._getFirstTabbableElement(this._element);\n    }\n    return markers.length ? markers[markers.length - 1] : this._getLastTabbableElement(this._element);\n  }\n  /**\r\n   * Focuses the element that should be focused when the focus trap is initialized.\r\n   * @returns Whether focus was moved successfully.\r\n   */\n  focusInitialElement(options) {\n    // Contains the deprecated version of selector, for temporary backwards comparability.\n    const redirectToElement = this._element.querySelector(`[cdk-focus-initial], ` + `[cdkFocusInitial]`);\n    if (redirectToElement) {\n      // @breaking-change 8.0.0\n      if ((typeof ngDevMode === 'undefined' || ngDevMode) && redirectToElement.hasAttribute(`cdk-focus-initial`)) {\n        console.warn(`Found use of deprecated attribute 'cdk-focus-initial', ` + `use 'cdkFocusInitial' instead. The deprecated attribute ` + `will be removed in 8.0.0`, redirectToElement);\n      }\n      // Warn the consumer if the element they've pointed to\n      // isn't focusable, when not in production mode.\n      if ((typeof ngDevMode === 'undefined' || ngDevMode) && !this._checker.isFocusable(redirectToElement)) {\n        console.warn(`Element matching '[cdkFocusInitial]' is not focusable.`, redirectToElement);\n      }\n      if (!this._checker.isFocusable(redirectToElement)) {\n        const focusableChild = this._getFirstTabbableElement(redirectToElement);\n        focusableChild?.focus(options);\n        return !!focusableChild;\n      }\n      redirectToElement.focus(options);\n      return true;\n    }\n    return this.focusFirstTabbableElement(options);\n  }\n  /**\r\n   * Focuses the first tabbable element within the focus trap region.\r\n   * @returns Whether focus was moved successfully.\r\n   */\n  focusFirstTabbableElement(options) {\n    const redirectToElement = this._getRegionBoundary('start');\n    if (redirectToElement) {\n      redirectToElement.focus(options);\n    }\n    return !!redirectToElement;\n  }\n  /**\r\n   * Focuses the last tabbable element within the focus trap region.\r\n   * @returns Whether focus was moved successfully.\r\n   */\n  focusLastTabbableElement(options) {\n    const redirectToElement = this._getRegionBoundary('end');\n    if (redirectToElement) {\n      redirectToElement.focus(options);\n    }\n    return !!redirectToElement;\n  }\n  /**\r\n   * Checks whether the focus trap has successfully been attached.\r\n   */\n  hasAttached() {\n    return this._hasAttached;\n  }\n  /** Get the first tabbable element from a DOM subtree (inclusive). */\n  _getFirstTabbableElement(root) {\n    if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n      return root;\n    }\n    const children = root.children;\n    for (let i = 0; i < children.length; i++) {\n      const tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ? this._getFirstTabbableElement(children[i]) : null;\n      if (tabbableChild) {\n        return tabbableChild;\n      }\n    }\n    return null;\n  }\n  /** Get the last tabbable element from a DOM subtree (inclusive). */\n  _getLastTabbableElement(root) {\n    if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n      return root;\n    }\n    // Iterate in reverse DOM order.\n    const children = root.children;\n    for (let i = children.length - 1; i >= 0; i--) {\n      const tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ? this._getLastTabbableElement(children[i]) : null;\n      if (tabbableChild) {\n        return tabbableChild;\n      }\n    }\n    return null;\n  }\n  /** Creates an anchor element. */\n  _createAnchor() {\n    const anchor = this._document.createElement('div');\n    this._toggleAnchorTabIndex(this._enabled, anchor);\n    anchor.classList.add('cdk-visually-hidden');\n    anchor.classList.add('cdk-focus-trap-anchor');\n    anchor.setAttribute('aria-hidden', 'true');\n    return anchor;\n  }\n  /**\r\n   * Toggles the `tabindex` of an anchor, based on the enabled state of the focus trap.\r\n   * @param isEnabled Whether the focus trap is enabled.\r\n   * @param anchor Anchor on which to toggle the tabindex.\r\n   */\n  _toggleAnchorTabIndex(isEnabled, anchor) {\n    // Remove the tabindex completely, rather than setting it to -1, because if the\n    // element has a tabindex, the user might still hit it when navigating with the arrow keys.\n    isEnabled ? anchor.setAttribute('tabindex', '0') : anchor.removeAttribute('tabindex');\n  }\n  /**\r\n   * Toggles the`tabindex` of both anchors to either trap Tab focus or allow it to escape.\r\n   * @param enabled: Whether the anchors should trap Tab.\r\n   */\n  toggleAnchors(enabled) {\n    if (this._startAnchor && this._endAnchor) {\n      this._toggleAnchorTabIndex(enabled, this._startAnchor);\n      this._toggleAnchorTabIndex(enabled, this._endAnchor);\n    }\n  }\n  /** Executes a function when the zone is stable. */\n  _executeOnStable(fn) {\n    if (this._ngZone.isStable) {\n      fn();\n    } else {\n      this._ngZone.onStable.pipe(take(1)).subscribe(fn);\n    }\n  }\n}\n/**\r\n * Factory that allows easy instantiation of focus traps.\r\n * @deprecated Use `ConfigurableFocusTrapFactory` instead.\r\n * @breaking-change 11.0.0\r\n */\nclass FocusTrapFactory {\n  constructor(_checker, _ngZone, _document) {\n    this._checker = _checker;\n    this._ngZone = _ngZone;\n    this._document = _document;\n  }\n  /**\r\n   * Creates a focus-trapped region around the given element.\r\n   * @param element The element around which focus will be trapped.\r\n   * @param deferCaptureElements Defers the creation of focus-capturing elements to be done\r\n   *     manually by the user.\r\n   * @returns The created focus trap instance.\r\n   */\n  create(element, deferCaptureElements = false) {\n    return new FocusTrap(element, this._checker, this._ngZone, this._document, deferCaptureElements);\n  }\n}\nFocusTrapFactory.ɵfac = function FocusTrapFactory_Factory(t) {\n  return new (t || FocusTrapFactory)(i0.ɵɵinject(InteractivityChecker), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(DOCUMENT));\n};\nFocusTrapFactory.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: FocusTrapFactory,\n  factory: FocusTrapFactory.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FocusTrapFactory, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: InteractivityChecker\n    }, {\n      type: i0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/** Directive for trapping focus within a region. */\nclass CdkTrapFocus {\n  constructor(_elementRef, _focusTrapFactory,\n  /**\r\n   * @deprecated No longer being used. To be removed.\r\n   * @breaking-change 13.0.0\r\n   */\n  _document) {\n    this._elementRef = _elementRef;\n    this._focusTrapFactory = _focusTrapFactory;\n    /** Previously focused element to restore focus to upon destroy when using autoCapture. */\n    this._previouslyFocusedElement = null;\n    this.focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement, true);\n  }\n  /** Whether the focus trap is active. */\n  get enabled() {\n    return this.focusTrap.enabled;\n  }\n  set enabled(value) {\n    this.focusTrap.enabled = coerceBooleanProperty(value);\n  }\n  /**\r\n   * Whether the directive should automatically move focus into the trapped region upon\r\n   * initialization and return focus to the previous activeElement upon destruction.\r\n   */\n  get autoCapture() {\n    return this._autoCapture;\n  }\n  set autoCapture(value) {\n    this._autoCapture = coerceBooleanProperty(value);\n  }\n  ngOnDestroy() {\n    this.focusTrap.destroy();\n    // If we stored a previously focused element when using autoCapture, return focus to that\n    // element now that the trapped region is being destroyed.\n    if (this._previouslyFocusedElement) {\n      this._previouslyFocusedElement.focus();\n      this._previouslyFocusedElement = null;\n    }\n  }\n  ngAfterContentInit() {\n    this.focusTrap.attachAnchors();\n    if (this.autoCapture) {\n      this._captureFocus();\n    }\n  }\n  ngDoCheck() {\n    if (!this.focusTrap.hasAttached()) {\n      this.focusTrap.attachAnchors();\n    }\n  }\n  ngOnChanges(changes) {\n    const autoCaptureChange = changes['autoCapture'];\n    if (autoCaptureChange && !autoCaptureChange.firstChange && this.autoCapture && this.focusTrap.hasAttached()) {\n      this._captureFocus();\n    }\n  }\n  _captureFocus() {\n    this._previouslyFocusedElement = _getFocusedElementPierceShadowDom();\n    this.focusTrap.focusInitialElementWhenReady();\n  }\n}\nCdkTrapFocus.ɵfac = function CdkTrapFocus_Factory(t) {\n  return new (t || CdkTrapFocus)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(FocusTrapFactory), i0.ɵɵdirectiveInject(DOCUMENT));\n};\nCdkTrapFocus.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkTrapFocus,\n  selectors: [[\"\", \"cdkTrapFocus\", \"\"]],\n  inputs: {\n    enabled: [\"cdkTrapFocus\", \"enabled\"],\n    autoCapture: [\"cdkTrapFocusAutoCapture\", \"autoCapture\"]\n  },\n  exportAs: [\"cdkTrapFocus\"],\n  features: [i0.ɵɵNgOnChangesFeature]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkTrapFocus, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkTrapFocus]',\n      exportAs: 'cdkTrapFocus'\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: FocusTrapFactory\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, {\n    enabled: [{\n      type: Input,\n      args: ['cdkTrapFocus']\n    }],\n    autoCapture: [{\n      type: Input,\n      args: ['cdkTrapFocusAutoCapture']\n    }]\n  });\n})();\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n/**\r\n * Class that allows for trapping focus within a DOM element.\r\n *\r\n * This class uses a strategy pattern that determines how it traps focus.\r\n * See FocusTrapInertStrategy.\r\n */\nclass ConfigurableFocusTrap extends FocusTrap {\n  constructor(_element, _checker, _ngZone, _document, _focusTrapManager, _inertStrategy, config) {\n    super(_element, _checker, _ngZone, _document, config.defer);\n    this._focusTrapManager = _focusTrapManager;\n    this._inertStrategy = _inertStrategy;\n    this._focusTrapManager.register(this);\n  }\n  /** Whether the FocusTrap is enabled. */\n  get enabled() {\n    return this._enabled;\n  }\n  set enabled(value) {\n    this._enabled = value;\n    if (this._enabled) {\n      this._focusTrapManager.register(this);\n    } else {\n      this._focusTrapManager.deregister(this);\n    }\n  }\n  /** Notifies the FocusTrapManager that this FocusTrap will be destroyed. */\n  destroy() {\n    this._focusTrapManager.deregister(this);\n    super.destroy();\n  }\n  /** @docs-private Implemented as part of ManagedFocusTrap. */\n  _enable() {\n    this._inertStrategy.preventFocus(this);\n    this.toggleAnchors(true);\n  }\n  /** @docs-private Implemented as part of ManagedFocusTrap. */\n  _disable() {\n    this._inertStrategy.allowFocus(this);\n    this.toggleAnchors(false);\n  }\n}\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n/** The injection token used to specify the inert strategy. */\nconst FOCUS_TRAP_INERT_STRATEGY = new InjectionToken('FOCUS_TRAP_INERT_STRATEGY');\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n/**\r\n * Lightweight FocusTrapInertStrategy that adds a document focus event\r\n * listener to redirect focus back inside the FocusTrap.\r\n */\nclass EventListenerFocusTrapInertStrategy {\n  constructor() {\n    /** Focus event handler. */\n    this._listener = null;\n  }\n  /** Adds a document event listener that keeps focus inside the FocusTrap. */\n  preventFocus(focusTrap) {\n    // Ensure there's only one listener per document\n    if (this._listener) {\n      focusTrap._document.removeEventListener('focus', this._listener, true);\n    }\n    this._listener = e => this._trapFocus(focusTrap, e);\n    focusTrap._ngZone.runOutsideAngular(() => {\n      focusTrap._document.addEventListener('focus', this._listener, true);\n    });\n  }\n  /** Removes the event listener added in preventFocus. */\n  allowFocus(focusTrap) {\n    if (!this._listener) {\n      return;\n    }\n    focusTrap._document.removeEventListener('focus', this._listener, true);\n    this._listener = null;\n  }\n  /**\r\n   * Refocuses the first element in the FocusTrap if the focus event target was outside\r\n   * the FocusTrap.\r\n   *\r\n   * This is an event listener callback. The event listener is added in runOutsideAngular,\r\n   * so all this code runs outside Angular as well.\r\n   */\n  _trapFocus(focusTrap, event) {\n    const target = event.target;\n    const focusTrapRoot = focusTrap._element;\n    // Don't refocus if target was in an overlay, because the overlay might be associated\n    // with an element inside the FocusTrap, ex. mat-select.\n    if (target && !focusTrapRoot.contains(target) && !target.closest?.('div.cdk-overlay-pane')) {\n      // Some legacy FocusTrap usages have logic that focuses some element on the page\n      // just before FocusTrap is destroyed. For backwards compatibility, wait\n      // to be sure FocusTrap is still enabled before refocusing.\n      setTimeout(() => {\n        // Check whether focus wasn't put back into the focus trap while the timeout was pending.\n        if (focusTrap.enabled && !focusTrapRoot.contains(focusTrap._document.activeElement)) {\n          focusTrap.focusFirstTabbableElement();\n        }\n      });\n    }\n  }\n}\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n/** Injectable that ensures only the most recently enabled FocusTrap is active. */\nclass FocusTrapManager {\n  constructor() {\n    // A stack of the FocusTraps on the page. Only the FocusTrap at the\n    // top of the stack is active.\n    this._focusTrapStack = [];\n  }\n  /**\r\n   * Disables the FocusTrap at the top of the stack, and then pushes\r\n   * the new FocusTrap onto the stack.\r\n   */\n  register(focusTrap) {\n    // Dedupe focusTraps that register multiple times.\n    this._focusTrapStack = this._focusTrapStack.filter(ft => ft !== focusTrap);\n    let stack = this._focusTrapStack;\n    if (stack.length) {\n      stack[stack.length - 1]._disable();\n    }\n    stack.push(focusTrap);\n    focusTrap._enable();\n  }\n  /**\r\n   * Removes the FocusTrap from the stack, and activates the\r\n   * FocusTrap that is the new top of the stack.\r\n   */\n  deregister(focusTrap) {\n    focusTrap._disable();\n    const stack = this._focusTrapStack;\n    const i = stack.indexOf(focusTrap);\n    if (i !== -1) {\n      stack.splice(i, 1);\n      if (stack.length) {\n        stack[stack.length - 1]._enable();\n      }\n    }\n  }\n}\nFocusTrapManager.ɵfac = function FocusTrapManager_Factory(t) {\n  return new (t || FocusTrapManager)();\n};\nFocusTrapManager.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: FocusTrapManager,\n  factory: FocusTrapManager.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FocusTrapManager, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n/** Factory that allows easy instantiation of configurable focus traps. */\nclass ConfigurableFocusTrapFactory {\n  constructor(_checker, _ngZone, _focusTrapManager, _document, _inertStrategy) {\n    this._checker = _checker;\n    this._ngZone = _ngZone;\n    this._focusTrapManager = _focusTrapManager;\n    this._document = _document;\n    // TODO split up the strategies into different modules, similar to DateAdapter.\n    this._inertStrategy = _inertStrategy || new EventListenerFocusTrapInertStrategy();\n  }\n  create(element, config = {\n    defer: false\n  }) {\n    let configObject;\n    if (typeof config === 'boolean') {\n      configObject = {\n        defer: config\n      };\n    } else {\n      configObject = config;\n    }\n    return new ConfigurableFocusTrap(element, this._checker, this._ngZone, this._document, this._focusTrapManager, this._inertStrategy, configObject);\n  }\n}\nConfigurableFocusTrapFactory.ɵfac = function ConfigurableFocusTrapFactory_Factory(t) {\n  return new (t || ConfigurableFocusTrapFactory)(i0.ɵɵinject(InteractivityChecker), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(FocusTrapManager), i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(FOCUS_TRAP_INERT_STRATEGY, 8));\n};\nConfigurableFocusTrapFactory.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ConfigurableFocusTrapFactory,\n  factory: ConfigurableFocusTrapFactory.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ConfigurableFocusTrapFactory, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: InteractivityChecker\n    }, {\n      type: i0.NgZone\n    }, {\n      type: FocusTrapManager\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [FOCUS_TRAP_INERT_STRATEGY]\n      }]\n    }];\n  }, null);\n})();\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n/** Gets whether an event could be a faked `mousedown` event dispatched by a screen reader. */\nfunction isFakeMousedownFromScreenReader(event) {\n  // Some screen readers will dispatch a fake `mousedown` event when pressing enter or space on\n  // a clickable element. We can distinguish these events when both `offsetX` and `offsetY` are\n  // zero or `event.buttons` is zero, depending on the browser:\n  // - `event.buttons` works on Firefox, but fails on Chrome.\n  // - `offsetX` and `offsetY` work on Chrome, but fail on Firefox.\n  // Note that there's an edge case where the user could click the 0x0 spot of the\n  // screen themselves, but that is unlikely to contain interactive elements.\n  return event.buttons === 0 || event.offsetX === 0 && event.offsetY === 0;\n}\n/** Gets whether an event could be a faked `touchstart` event dispatched by a screen reader. */\nfunction isFakeTouchstartFromScreenReader(event) {\n  const touch = event.touches && event.touches[0] || event.changedTouches && event.changedTouches[0];\n  // A fake `touchstart` can be distinguished from a real one by looking at the `identifier`\n  // which is typically >= 0 on a real device versus -1 from a screen reader. Just to be safe,\n  // we can also look at `radiusX` and `radiusY`. This behavior was observed against a Windows 10\n  // device with a touch screen running NVDA v2020.4 and Firefox 85 or Chrome 88.\n  return !!touch && touch.identifier === -1 && (touch.radiusX == null || touch.radiusX === 1) && (touch.radiusY == null || touch.radiusY === 1);\n}\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n/**\r\n * Injectable options for the InputModalityDetector. These are shallowly merged with the default\r\n * options.\r\n */\nconst INPUT_MODALITY_DETECTOR_OPTIONS = new InjectionToken('cdk-input-modality-detector-options');\n/**\r\n * Default options for the InputModalityDetector.\r\n *\r\n * Modifier keys are ignored by default (i.e. when pressed won't cause the service to detect\r\n * keyboard input modality) for two reasons:\r\n *\r\n * 1. Modifier keys are commonly used with mouse to perform actions such as 'right click' or 'open\r\n *    in new tab', and are thus less representative of actual keyboard interaction.\r\n * 2. VoiceOver triggers some keyboard events when linearly navigating with Control + Option (but\r\n *    confusingly not with Caps Lock). Thus, to have parity with other screen readers, we ignore\r\n *    these keys so as to not update the input modality.\r\n *\r\n * Note that we do not by default ignore the right Meta key on Safari because it has the same key\r\n * code as the ContextMenu key on other browsers. When we switch to using event.key, we can\r\n * distinguish between the two.\r\n */\nconst INPUT_MODALITY_DETECTOR_DEFAULT_OPTIONS = {\n  ignoreKeys: [ALT, CONTROL, MAC_META, META, SHIFT]\n};\n/**\r\n * The amount of time needed to pass after a touchstart event in order for a subsequent mousedown\r\n * event to be attributed as mouse and not touch.\r\n *\r\n * This is the value used by AngularJS Material. Through trial and error (on iPhone 6S) they found\r\n * that a value of around 650ms seems appropriate.\r\n */\nconst TOUCH_BUFFER_MS = 650;\n/**\r\n * Event listener options that enable capturing and also mark the listener as passive if the browser\r\n * supports it.\r\n */\nconst modalityEventListenerOptions = normalizePassiveListenerOptions({\n  passive: true,\n  capture: true\n});\n/**\r\n * Service that detects the user's input modality.\r\n *\r\n * This service does not update the input modality when a user navigates with a screen reader\r\n * (e.g. linear navigation with VoiceOver, object navigation / browse mode with NVDA, virtual PC\r\n * cursor mode with JAWS). This is in part due to technical limitations (i.e. keyboard events do not\r\n * fire as expected in these modes) but is also arguably the correct behavior. Navigating with a\r\n * screen reader is akin to visually scanning a page, and should not be interpreted as actual user\r\n * input interaction.\r\n *\r\n * When a user is not navigating but *interacting* with a screen reader, this service attempts to\r\n * update the input modality to keyboard, but in general this service's behavior is largely\r\n * undefined.\r\n */\nclass InputModalityDetector {\n  constructor(_platform, ngZone, document, options) {\n    this._platform = _platform;\n    /**\r\n     * The most recently detected input modality event target. Is null if no input modality has been\r\n     * detected or if the associated event target is null for some unknown reason.\r\n     */\n    this._mostRecentTarget = null;\n    /** The underlying BehaviorSubject that emits whenever an input modality is detected. */\n    this._modality = new BehaviorSubject(null);\n    /**\r\n     * The timestamp of the last touch input modality. Used to determine whether mousedown events\r\n     * should be attributed to mouse or touch.\r\n     */\n    this._lastTouchMs = 0;\n    /**\r\n     * Handles keydown events. Must be an arrow function in order to preserve the context when it gets\r\n     * bound.\r\n     */\n    this._onKeydown = event => {\n      // If this is one of the keys we should ignore, then ignore it and don't update the input\n      // modality to keyboard.\n      if (this._options?.ignoreKeys?.some(keyCode => keyCode === event.keyCode)) {\n        return;\n      }\n      this._modality.next('keyboard');\n      this._mostRecentTarget = _getEventTarget(event);\n    };\n    /**\r\n     * Handles mousedown events. Must be an arrow function in order to preserve the context when it\r\n     * gets bound.\r\n     */\n    this._onMousedown = event => {\n      // Touches trigger both touch and mouse events, so we need to distinguish between mouse events\n      // that were triggered via mouse vs touch. To do so, check if the mouse event occurs closely\n      // after the previous touch event.\n      if (Date.now() - this._lastTouchMs < TOUCH_BUFFER_MS) {\n        return;\n      }\n      // Fake mousedown events are fired by some screen readers when controls are activated by the\n      // screen reader. Attribute them to keyboard input modality.\n      this._modality.next(isFakeMousedownFromScreenReader(event) ? 'keyboard' : 'mouse');\n      this._mostRecentTarget = _getEventTarget(event);\n    };\n    /**\r\n     * Handles touchstart events. Must be an arrow function in order to preserve the context when it\r\n     * gets bound.\r\n     */\n    this._onTouchstart = event => {\n      // Same scenario as mentioned in _onMousedown, but on touch screen devices, fake touchstart\n      // events are fired. Again, attribute to keyboard input modality.\n      if (isFakeTouchstartFromScreenReader(event)) {\n        this._modality.next('keyboard');\n        return;\n      }\n      // Store the timestamp of this touch event, as it's used to distinguish between mouse events\n      // triggered via mouse vs touch.\n      this._lastTouchMs = Date.now();\n      this._modality.next('touch');\n      this._mostRecentTarget = _getEventTarget(event);\n    };\n    this._options = {\n      ...INPUT_MODALITY_DETECTOR_DEFAULT_OPTIONS,\n      ...options\n    };\n    // Skip the first emission as it's null.\n    this.modalityDetected = this._modality.pipe(skip(1));\n    this.modalityChanged = this.modalityDetected.pipe(distinctUntilChanged());\n    // If we're not in a browser, this service should do nothing, as there's no relevant input\n    // modality to detect.\n    if (_platform.isBrowser) {\n      ngZone.runOutsideAngular(() => {\n        document.addEventListener('keydown', this._onKeydown, modalityEventListenerOptions);\n        document.addEventListener('mousedown', this._onMousedown, modalityEventListenerOptions);\n        document.addEventListener('touchstart', this._onTouchstart, modalityEventListenerOptions);\n      });\n    }\n  }\n  /** The most recently detected input modality. */\n  get mostRecentModality() {\n    return this._modality.value;\n  }\n  ngOnDestroy() {\n    this._modality.complete();\n    if (this._platform.isBrowser) {\n      document.removeEventListener('keydown', this._onKeydown, modalityEventListenerOptions);\n      document.removeEventListener('mousedown', this._onMousedown, modalityEventListenerOptions);\n      document.removeEventListener('touchstart', this._onTouchstart, modalityEventListenerOptions);\n    }\n  }\n}\nInputModalityDetector.ɵfac = function InputModalityDetector_Factory(t) {\n  return new (t || InputModalityDetector)(i0.ɵɵinject(i1.Platform), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(INPUT_MODALITY_DETECTOR_OPTIONS, 8));\n};\nInputModalityDetector.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: InputModalityDetector,\n  factory: InputModalityDetector.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(InputModalityDetector, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.Platform\n    }, {\n      type: i0.NgZone\n    }, {\n      type: Document,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [INPUT_MODALITY_DETECTOR_OPTIONS]\n      }]\n    }];\n  }, null);\n})();\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\nconst LIVE_ANNOUNCER_ELEMENT_TOKEN = new InjectionToken('liveAnnouncerElement', {\n  providedIn: 'root',\n  factory: LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY\n});\n/** @docs-private */\nfunction LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY() {\n  return null;\n}\n/** Injection token that can be used to configure the default options for the LiveAnnouncer. */\nconst LIVE_ANNOUNCER_DEFAULT_OPTIONS = new InjectionToken('LIVE_ANNOUNCER_DEFAULT_OPTIONS');\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\nclass LiveAnnouncer {\n  constructor(elementToken, _ngZone, _document, _defaultOptions) {\n    this._ngZone = _ngZone;\n    this._defaultOptions = _defaultOptions;\n    // We inject the live element and document as `any` because the constructor signature cannot\n    // reference browser globals (HTMLElement, Document) on non-browser environments, since having\n    // a class decorator causes TypeScript to preserve the constructor signature types.\n    this._document = _document;\n    this._liveElement = elementToken || this._createLiveElement();\n  }\n  announce(message, ...args) {\n    const defaultOptions = this._defaultOptions;\n    let politeness;\n    let duration;\n    if (args.length === 1 && typeof args[0] === 'number') {\n      duration = args[0];\n    } else {\n      [politeness, duration] = args;\n    }\n    this.clear();\n    clearTimeout(this._previousTimeout);\n    if (!politeness) {\n      politeness = defaultOptions && defaultOptions.politeness ? defaultOptions.politeness : 'polite';\n    }\n    if (duration == null && defaultOptions) {\n      duration = defaultOptions.duration;\n    }\n    // TODO: ensure changing the politeness works on all environments we support.\n    this._liveElement.setAttribute('aria-live', politeness);\n    // This 100ms timeout is necessary for some browser + screen-reader combinations:\n    // - Both JAWS and NVDA over IE11 will not announce anything without a non-zero timeout.\n    // - With Chrome and IE11 with NVDA or JAWS, a repeated (identical) message won't be read a\n    //   second time without clearing and then using a non-zero delay.\n    // (using JAWS 17 at time of this writing).\n    return this._ngZone.runOutsideAngular(() => {\n      if (!this._currentPromise) {\n        this._currentPromise = new Promise(resolve => this._currentResolve = resolve);\n      }\n      clearTimeout(this._previousTimeout);\n      this._previousTimeout = setTimeout(() => {\n        this._liveElement.textContent = message;\n        if (typeof duration === 'number') {\n          this._previousTimeout = setTimeout(() => this.clear(), duration);\n        }\n        this._currentResolve();\n        this._currentPromise = this._currentResolve = undefined;\n      }, 100);\n      return this._currentPromise;\n    });\n  }\n  /**\r\n   * Clears the current text from the announcer element. Can be used to prevent\r\n   * screen readers from reading the text out again while the user is going\r\n   * through the page landmarks.\r\n   */\n  clear() {\n    if (this._liveElement) {\n      this._liveElement.textContent = '';\n    }\n  }\n  ngOnDestroy() {\n    clearTimeout(this._previousTimeout);\n    this._liveElement?.remove();\n    this._liveElement = null;\n    this._currentResolve?.();\n    this._currentPromise = this._currentResolve = undefined;\n  }\n  _createLiveElement() {\n    const elementClass = 'cdk-live-announcer-element';\n    const previousElements = this._document.getElementsByClassName(elementClass);\n    const liveEl = this._document.createElement('div');\n    // Remove any old containers. This can happen when coming in from a server-side-rendered page.\n    for (let i = 0; i < previousElements.length; i++) {\n      previousElements[i].remove();\n    }\n    liveEl.classList.add(elementClass);\n    liveEl.classList.add('cdk-visually-hidden');\n    liveEl.setAttribute('aria-atomic', 'true');\n    liveEl.setAttribute('aria-live', 'polite');\n    this._document.body.appendChild(liveEl);\n    return liveEl;\n  }\n}\nLiveAnnouncer.ɵfac = function LiveAnnouncer_Factory(t) {\n  return new (t || LiveAnnouncer)(i0.ɵɵinject(LIVE_ANNOUNCER_ELEMENT_TOKEN, 8), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(LIVE_ANNOUNCER_DEFAULT_OPTIONS, 8));\n};\nLiveAnnouncer.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: LiveAnnouncer,\n  factory: LiveAnnouncer.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LiveAnnouncer, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [LIVE_ANNOUNCER_ELEMENT_TOKEN]\n      }]\n    }, {\n      type: i0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [LIVE_ANNOUNCER_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, null);\n})();\n/**\r\n * A directive that works similarly to aria-live, but uses the LiveAnnouncer to ensure compatibility\r\n * with a wider range of browsers and screen readers.\r\n */\nclass CdkAriaLive {\n  constructor(_elementRef, _liveAnnouncer, _contentObserver, _ngZone) {\n    this._elementRef = _elementRef;\n    this._liveAnnouncer = _liveAnnouncer;\n    this._contentObserver = _contentObserver;\n    this._ngZone = _ngZone;\n    this._politeness = 'polite';\n  }\n  /** The aria-live politeness level to use when announcing messages. */\n  get politeness() {\n    return this._politeness;\n  }\n  set politeness(value) {\n    this._politeness = value === 'off' || value === 'assertive' ? value : 'polite';\n    if (this._politeness === 'off') {\n      if (this._subscription) {\n        this._subscription.unsubscribe();\n        this._subscription = null;\n      }\n    } else if (!this._subscription) {\n      this._subscription = this._ngZone.runOutsideAngular(() => {\n        return this._contentObserver.observe(this._elementRef).subscribe(() => {\n          // Note that we use textContent here, rather than innerText, in order to avoid a reflow.\n          const elementText = this._elementRef.nativeElement.textContent;\n          // The `MutationObserver` fires also for attribute\n          // changes which we don't want to announce.\n          if (elementText !== this._previousAnnouncedText) {\n            this._liveAnnouncer.announce(elementText, this._politeness, this.duration);\n            this._previousAnnouncedText = elementText;\n          }\n        });\n      });\n    }\n  }\n  ngOnDestroy() {\n    if (this._subscription) {\n      this._subscription.unsubscribe();\n    }\n  }\n}\nCdkAriaLive.ɵfac = function CdkAriaLive_Factory(t) {\n  return new (t || CdkAriaLive)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(LiveAnnouncer), i0.ɵɵdirectiveInject(i1$1.ContentObserver), i0.ɵɵdirectiveInject(i0.NgZone));\n};\nCdkAriaLive.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkAriaLive,\n  selectors: [[\"\", \"cdkAriaLive\", \"\"]],\n  inputs: {\n    politeness: [\"cdkAriaLive\", \"politeness\"],\n    duration: [\"cdkAriaLiveDuration\", \"duration\"]\n  },\n  exportAs: [\"cdkAriaLive\"]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkAriaLive, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkAriaLive]',\n      exportAs: 'cdkAriaLive'\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: LiveAnnouncer\n    }, {\n      type: i1$1.ContentObserver\n    }, {\n      type: i0.NgZone\n    }];\n  }, {\n    politeness: [{\n      type: Input,\n      args: ['cdkAriaLive']\n    }],\n    duration: [{\n      type: Input,\n      args: ['cdkAriaLiveDuration']\n    }]\n  });\n})();\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n/** InjectionToken for FocusMonitorOptions. */\nconst FOCUS_MONITOR_DEFAULT_OPTIONS = new InjectionToken('cdk-focus-monitor-default-options');\n/**\r\n * Event listener options that enable capturing and also\r\n * mark the listener as passive if the browser supports it.\r\n */\nconst captureEventListenerOptions = normalizePassiveListenerOptions({\n  passive: true,\n  capture: true\n});\n/** Monitors mouse and keyboard events to determine the cause of focus events. */\nclass FocusMonitor {\n  constructor(_ngZone, _platform, _inputModalityDetector, /** @breaking-change 11.0.0 make document required */\n  document, options) {\n    this._ngZone = _ngZone;\n    this._platform = _platform;\n    this._inputModalityDetector = _inputModalityDetector;\n    /** The focus origin that the next focus event is a result of. */\n    this._origin = null;\n    /** Whether the window has just been focused. */\n    this._windowFocused = false;\n    /**\r\n     * Whether the origin was determined via a touch interaction. Necessary as properly attributing\r\n     * focus events to touch interactions requires special logic.\r\n     */\n    this._originFromTouchInteraction = false;\n    /** Map of elements being monitored to their info. */\n    this._elementInfo = new Map();\n    /** The number of elements currently being monitored. */\n    this._monitoredElementCount = 0;\n    /**\r\n     * Keeps track of the root nodes to which we've currently bound a focus/blur handler,\r\n     * as well as the number of monitored elements that they contain. We have to treat focus/blur\r\n     * handlers differently from the rest of the events, because the browser won't emit events\r\n     * to the document when focus moves inside of a shadow root.\r\n     */\n    this._rootNodeFocusListenerCount = new Map();\n    /**\r\n     * Event listener for `focus` events on the window.\r\n     * Needs to be an arrow function in order to preserve the context when it gets bound.\r\n     */\n    this._windowFocusListener = () => {\n      // Make a note of when the window regains focus, so we can\n      // restore the origin info for the focused element.\n      this._windowFocused = true;\n      this._windowFocusTimeoutId = window.setTimeout(() => this._windowFocused = false);\n    };\n    /** Subject for stopping our InputModalityDetector subscription. */\n    this._stopInputModalityDetector = new Subject();\n    /**\r\n     * Event listener for `focus` and 'blur' events on the document.\r\n     * Needs to be an arrow function in order to preserve the context when it gets bound.\r\n     */\n    this._rootNodeFocusAndBlurListener = event => {\n      const target = _getEventTarget(event);\n      // We need to walk up the ancestor chain in order to support `checkChildren`.\n      for (let element = target; element; element = element.parentElement) {\n        if (event.type === 'focus') {\n          this._onFocus(event, element);\n        } else {\n          this._onBlur(event, element);\n        }\n      }\n    };\n    this._document = document;\n    this._detectionMode = options?.detectionMode || 0 /* FocusMonitorDetectionMode.IMMEDIATE */;\n  }\n\n  monitor(element, checkChildren = false) {\n    const nativeElement = coerceElement(element);\n    // Do nothing if we're not on the browser platform or the passed in node isn't an element.\n    if (!this._platform.isBrowser || nativeElement.nodeType !== 1) {\n      return of(null);\n    }\n    // If the element is inside the shadow DOM, we need to bind our focus/blur listeners to\n    // the shadow root, rather than the `document`, because the browser won't emit focus events\n    // to the `document`, if focus is moving within the same shadow root.\n    const rootNode = _getShadowRoot(nativeElement) || this._getDocument();\n    const cachedInfo = this._elementInfo.get(nativeElement);\n    // Check if we're already monitoring this element.\n    if (cachedInfo) {\n      if (checkChildren) {\n        // TODO(COMP-318): this can be problematic, because it'll turn all non-checkChildren\n        // observers into ones that behave as if `checkChildren` was turned on. We need a more\n        // robust solution.\n        cachedInfo.checkChildren = true;\n      }\n      return cachedInfo.subject;\n    }\n    // Create monitored element info.\n    const info = {\n      checkChildren: checkChildren,\n      subject: new Subject(),\n      rootNode\n    };\n    this._elementInfo.set(nativeElement, info);\n    this._registerGlobalListeners(info);\n    return info.subject;\n  }\n  stopMonitoring(element) {\n    const nativeElement = coerceElement(element);\n    const elementInfo = this._elementInfo.get(nativeElement);\n    if (elementInfo) {\n      elementInfo.subject.complete();\n      this._setClasses(nativeElement);\n      this._elementInfo.delete(nativeElement);\n      this._removeGlobalListeners(elementInfo);\n    }\n  }\n  focusVia(element, origin, options) {\n    const nativeElement = coerceElement(element);\n    const focusedElement = this._getDocument().activeElement;\n    // If the element is focused already, calling `focus` again won't trigger the event listener\n    // which means that the focus classes won't be updated. If that's the case, update the classes\n    // directly without waiting for an event.\n    if (nativeElement === focusedElement) {\n      this._getClosestElementsInfo(nativeElement).forEach(([currentElement, info]) => this._originChanged(currentElement, origin, info));\n    } else {\n      this._setOrigin(origin);\n      // `focus` isn't available on the server\n      if (typeof nativeElement.focus === 'function') {\n        nativeElement.focus(options);\n      }\n    }\n  }\n  ngOnDestroy() {\n    this._elementInfo.forEach((_info, element) => this.stopMonitoring(element));\n  }\n  /** Access injected document if available or fallback to global document reference */\n  _getDocument() {\n    return this._document || document;\n  }\n  /** Use defaultView of injected document if available or fallback to global window reference */\n  _getWindow() {\n    const doc = this._getDocument();\n    return doc.defaultView || window;\n  }\n  _getFocusOrigin(focusEventTarget) {\n    if (this._origin) {\n      // If the origin was realized via a touch interaction, we need to perform additional checks\n      // to determine whether the focus origin should be attributed to touch or program.\n      if (this._originFromTouchInteraction) {\n        return this._shouldBeAttributedToTouch(focusEventTarget) ? 'touch' : 'program';\n      } else {\n        return this._origin;\n      }\n    }\n    // If the window has just regained focus, we can restore the most recent origin from before the\n    // window blurred. Otherwise, we've reached the point where we can't identify the source of the\n    // focus. This typically means one of two things happened:\n    //\n    // 1) The element was programmatically focused, or\n    // 2) The element was focused via screen reader navigation (which generally doesn't fire\n    //    events).\n    //\n    // Because we can't distinguish between these two cases, we default to setting `program`.\n    if (this._windowFocused && this._lastFocusOrigin) {\n      return this._lastFocusOrigin;\n    }\n    // If the interaction is coming from an input label, we consider it a mouse interactions.\n    // This is a special case where focus moves on `click`, rather than `mousedown` which breaks\n    // our detection, because all our assumptions are for `mousedown`. We need to handle this\n    // special case, because it's very common for checkboxes and radio buttons.\n    if (focusEventTarget && this._isLastInteractionFromInputLabel(focusEventTarget)) {\n      return 'mouse';\n    }\n    return 'program';\n  }\n  /**\r\n   * Returns whether the focus event should be attributed to touch. Recall that in IMMEDIATE mode, a\r\n   * touch origin isn't immediately reset at the next tick (see _setOrigin). This means that when we\r\n   * handle a focus event following a touch interaction, we need to determine whether (1) the focus\r\n   * event was directly caused by the touch interaction or (2) the focus event was caused by a\r\n   * subsequent programmatic focus call triggered by the touch interaction.\r\n   * @param focusEventTarget The target of the focus event under examination.\r\n   */\n  _shouldBeAttributedToTouch(focusEventTarget) {\n    // Please note that this check is not perfect. Consider the following edge case:\n    //\n    // <div #parent tabindex=\"0\">\n    //   <div #child tabindex=\"0\" (click)=\"#parent.focus()\"></div>\n    // </div>\n    //\n    // Suppose there is a FocusMonitor in IMMEDIATE mode attached to #parent. When the user touches\n    // #child, #parent is programmatically focused. This code will attribute the focus to touch\n    // instead of program. This is a relatively minor edge-case that can be worked around by using\n    // focusVia(parent, 'program') to focus #parent.\n    return this._detectionMode === 1 /* FocusMonitorDetectionMode.EVENTUAL */ || !!focusEventTarget?.contains(this._inputModalityDetector._mostRecentTarget);\n  }\n  /**\r\n   * Sets the focus classes on the element based on the given focus origin.\r\n   * @param element The element to update the classes on.\r\n   * @param origin The focus origin.\r\n   */\n  _setClasses(element, origin) {\n    element.classList.toggle('cdk-focused', !!origin);\n    element.classList.toggle('cdk-touch-focused', origin === 'touch');\n    element.classList.toggle('cdk-keyboard-focused', origin === 'keyboard');\n    element.classList.toggle('cdk-mouse-focused', origin === 'mouse');\n    element.classList.toggle('cdk-program-focused', origin === 'program');\n  }\n  /**\r\n   * Updates the focus origin. If we're using immediate detection mode, we schedule an async\r\n   * function to clear the origin at the end of a timeout. The duration of the timeout depends on\r\n   * the origin being set.\r\n   * @param origin The origin to set.\r\n   * @param isFromInteraction Whether we are setting the origin from an interaction event.\r\n   */\n  _setOrigin(origin, isFromInteraction = false) {\n    this._ngZone.runOutsideAngular(() => {\n      this._origin = origin;\n      this._originFromTouchInteraction = origin === 'touch' && isFromInteraction;\n      // If we're in IMMEDIATE mode, reset the origin at the next tick (or in `TOUCH_BUFFER_MS` ms\n      // for a touch event). We reset the origin at the next tick because Firefox focuses one tick\n      // after the interaction event. We wait `TOUCH_BUFFER_MS` ms before resetting the origin for\n      // a touch event because when a touch event is fired, the associated focus event isn't yet in\n      // the event queue. Before doing so, clear any pending timeouts.\n      if (this._detectionMode === 0 /* FocusMonitorDetectionMode.IMMEDIATE */) {\n        clearTimeout(this._originTimeoutId);\n        const ms = this._originFromTouchInteraction ? TOUCH_BUFFER_MS : 1;\n        this._originTimeoutId = setTimeout(() => this._origin = null, ms);\n      }\n    });\n  }\n  /**\r\n   * Handles focus events on a registered element.\r\n   * @param event The focus event.\r\n   * @param element The monitored element.\r\n   */\n  _onFocus(event, element) {\n    // NOTE(mmalerba): We currently set the classes based on the focus origin of the most recent\n    // focus event affecting the monitored element. If we want to use the origin of the first event\n    // instead we should check for the cdk-focused class here and return if the element already has\n    // it. (This only matters for elements that have includesChildren = true).\n    // If we are not counting child-element-focus as focused, make sure that the event target is the\n    // monitored element itself.\n    const elementInfo = this._elementInfo.get(element);\n    const focusEventTarget = _getEventTarget(event);\n    if (!elementInfo || !elementInfo.checkChildren && element !== focusEventTarget) {\n      return;\n    }\n    this._originChanged(element, this._getFocusOrigin(focusEventTarget), elementInfo);\n  }\n  /**\r\n   * Handles blur events on a registered element.\r\n   * @param event The blur event.\r\n   * @param element The monitored element.\r\n   */\n  _onBlur(event, element) {\n    // If we are counting child-element-focus as focused, make sure that we aren't just blurring in\n    // order to focus another child of the monitored element.\n    const elementInfo = this._elementInfo.get(element);\n    if (!elementInfo || elementInfo.checkChildren && event.relatedTarget instanceof Node && element.contains(event.relatedTarget)) {\n      return;\n    }\n    this._setClasses(element);\n    this._emitOrigin(elementInfo, null);\n  }\n  _emitOrigin(info, origin) {\n    if (info.subject.observers.length) {\n      this._ngZone.run(() => info.subject.next(origin));\n    }\n  }\n  _registerGlobalListeners(elementInfo) {\n    if (!this._platform.isBrowser) {\n      return;\n    }\n    const rootNode = elementInfo.rootNode;\n    const rootNodeFocusListeners = this._rootNodeFocusListenerCount.get(rootNode) || 0;\n    if (!rootNodeFocusListeners) {\n      this._ngZone.runOutsideAngular(() => {\n        rootNode.addEventListener('focus', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\n        rootNode.addEventListener('blur', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\n      });\n    }\n    this._rootNodeFocusListenerCount.set(rootNode, rootNodeFocusListeners + 1);\n    // Register global listeners when first element is monitored.\n    if (++this._monitoredElementCount === 1) {\n      // Note: we listen to events in the capture phase so we\n      // can detect them even if the user stops propagation.\n      this._ngZone.runOutsideAngular(() => {\n        const window = this._getWindow();\n        window.addEventListener('focus', this._windowFocusListener);\n      });\n      // The InputModalityDetector is also just a collection of global listeners.\n      this._inputModalityDetector.modalityDetected.pipe(takeUntil(this._stopInputModalityDetector)).subscribe(modality => {\n        this._setOrigin(modality, true /* isFromInteraction */);\n      });\n    }\n  }\n\n  _removeGlobalListeners(elementInfo) {\n    const rootNode = elementInfo.rootNode;\n    if (this._rootNodeFocusListenerCount.has(rootNode)) {\n      const rootNodeFocusListeners = this._rootNodeFocusListenerCount.get(rootNode);\n      if (rootNodeFocusListeners > 1) {\n        this._rootNodeFocusListenerCount.set(rootNode, rootNodeFocusListeners - 1);\n      } else {\n        rootNode.removeEventListener('focus', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\n        rootNode.removeEventListener('blur', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\n        this._rootNodeFocusListenerCount.delete(rootNode);\n      }\n    }\n    // Unregister global listeners when last element is unmonitored.\n    if (! --this._monitoredElementCount) {\n      const window = this._getWindow();\n      window.removeEventListener('focus', this._windowFocusListener);\n      // Equivalently, stop our InputModalityDetector subscription.\n      this._stopInputModalityDetector.next();\n      // Clear timeouts for all potentially pending timeouts to prevent the leaks.\n      clearTimeout(this._windowFocusTimeoutId);\n      clearTimeout(this._originTimeoutId);\n    }\n  }\n  /** Updates all the state on an element once its focus origin has changed. */\n  _originChanged(element, origin, elementInfo) {\n    this._setClasses(element, origin);\n    this._emitOrigin(elementInfo, origin);\n    this._lastFocusOrigin = origin;\n  }\n  /**\r\n   * Collects the `MonitoredElementInfo` of a particular element and\r\n   * all of its ancestors that have enabled `checkChildren`.\r\n   * @param element Element from which to start the search.\r\n   */\n  _getClosestElementsInfo(element) {\n    const results = [];\n    this._elementInfo.forEach((info, currentElement) => {\n      if (currentElement === element || info.checkChildren && currentElement.contains(element)) {\n        results.push([currentElement, info]);\n      }\n    });\n    return results;\n  }\n  /**\r\n   * Returns whether an interaction is likely to have come from the user clicking the `label` of\r\n   * an `input` or `textarea` in order to focus it.\r\n   * @param focusEventTarget Target currently receiving focus.\r\n   */\n  _isLastInteractionFromInputLabel(focusEventTarget) {\n    const {\n      _mostRecentTarget: mostRecentTarget,\n      mostRecentModality\n    } = this._inputModalityDetector;\n    // If the last interaction used the mouse on an element contained by one of the labels\n    // of an `input`/`textarea` that is currently focused, it is very likely that the\n    // user redirected focus using the label.\n    if (mostRecentModality !== 'mouse' || !mostRecentTarget || mostRecentTarget === focusEventTarget || focusEventTarget.nodeName !== 'INPUT' && focusEventTarget.nodeName !== 'TEXTAREA' || focusEventTarget.disabled) {\n      return false;\n    }\n    const labels = focusEventTarget.labels;\n    if (labels) {\n      for (let i = 0; i < labels.length; i++) {\n        if (labels[i].contains(mostRecentTarget)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n}\nFocusMonitor.ɵfac = function FocusMonitor_Factory(t) {\n  return new (t || FocusMonitor)(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i1.Platform), i0.ɵɵinject(InputModalityDetector), i0.ɵɵinject(DOCUMENT, 8), i0.ɵɵinject(FOCUS_MONITOR_DEFAULT_OPTIONS, 8));\n};\nFocusMonitor.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: FocusMonitor,\n  factory: FocusMonitor.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FocusMonitor, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i0.NgZone\n    }, {\n      type: i1.Platform\n    }, {\n      type: InputModalityDetector\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [FOCUS_MONITOR_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, null);\n})();\n/**\r\n * Directive that determines how a particular element was focused (via keyboard, mouse, touch, or\r\n * programmatically) and adds corresponding classes to the element.\r\n *\r\n * There are two variants of this directive:\r\n * 1) cdkMonitorElementFocus: does not consider an element to be focused if one of its children is\r\n *    focused.\r\n * 2) cdkMonitorSubtreeFocus: considers an element focused if it or any of its children are focused.\r\n */\nclass CdkMonitorFocus {\n  constructor(_elementRef, _focusMonitor) {\n    this._elementRef = _elementRef;\n    this._focusMonitor = _focusMonitor;\n    this._focusOrigin = null;\n    this.cdkFocusChange = new EventEmitter();\n  }\n  get focusOrigin() {\n    return this._focusOrigin;\n  }\n  ngAfterViewInit() {\n    const element = this._elementRef.nativeElement;\n    this._monitorSubscription = this._focusMonitor.monitor(element, element.nodeType === 1 && element.hasAttribute('cdkMonitorSubtreeFocus')).subscribe(origin => {\n      this._focusOrigin = origin;\n      this.cdkFocusChange.emit(origin);\n    });\n  }\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    if (this._monitorSubscription) {\n      this._monitorSubscription.unsubscribe();\n    }\n  }\n}\nCdkMonitorFocus.ɵfac = function CdkMonitorFocus_Factory(t) {\n  return new (t || CdkMonitorFocus)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(FocusMonitor));\n};\nCdkMonitorFocus.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkMonitorFocus,\n  selectors: [[\"\", \"cdkMonitorElementFocus\", \"\"], [\"\", \"cdkMonitorSubtreeFocus\", \"\"]],\n  outputs: {\n    cdkFocusChange: \"cdkFocusChange\"\n  },\n  exportAs: [\"cdkMonitorFocus\"]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkMonitorFocus, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]',\n      exportAs: 'cdkMonitorFocus'\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: FocusMonitor\n    }];\n  }, {\n    cdkFocusChange: [{\n      type: Output\n    }]\n  });\n})();\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n/** CSS class applied to the document body when in black-on-white high-contrast mode. */\nconst BLACK_ON_WHITE_CSS_CLASS = 'cdk-high-contrast-black-on-white';\n/** CSS class applied to the document body when in white-on-black high-contrast mode. */\nconst WHITE_ON_BLACK_CSS_CLASS = 'cdk-high-contrast-white-on-black';\n/** CSS class applied to the document body when in high-contrast mode. */\nconst HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS = 'cdk-high-contrast-active';\n/**\r\n * Service to determine whether the browser is currently in a high-contrast-mode environment.\r\n *\r\n * Microsoft Windows supports an accessibility feature called \"High Contrast Mode\". This mode\r\n * changes the appearance of all applications, including web applications, to dramatically increase\r\n * contrast.\r\n *\r\n * IE, Edge, and Firefox currently support this mode. Chrome does not support Windows High Contrast\r\n * Mode. This service does not detect high-contrast mode as added by the Chrome \"High Contrast\"\r\n * browser extension.\r\n */\nclass HighContrastModeDetector {\n  constructor(_platform, document) {\n    this._platform = _platform;\n    this._document = document;\n    this._breakpointSubscription = inject(BreakpointObserver).observe('(forced-colors: active)').subscribe(() => {\n      if (this._hasCheckedHighContrastMode) {\n        this._hasCheckedHighContrastMode = false;\n        this._applyBodyHighContrastModeCssClasses();\n      }\n    });\n  }\n  /** Gets the current high-contrast-mode for the page. */\n  getHighContrastMode() {\n    if (!this._platform.isBrowser) {\n      return 0 /* HighContrastMode.NONE */;\n    }\n    // Create a test element with an arbitrary background-color that is neither black nor\n    // white; high-contrast mode will coerce the color to either black or white. Also ensure that\n    // appending the test element to the DOM does not affect layout by absolutely positioning it\n    const testElement = this._document.createElement('div');\n    testElement.style.backgroundColor = 'rgb(1,2,3)';\n    testElement.style.position = 'absolute';\n    this._document.body.appendChild(testElement);\n    // Get the computed style for the background color, collapsing spaces to normalize between\n    // browsers. Once we get this color, we no longer need the test element. Access the `window`\n    // via the document so we can fake it in tests. Note that we have extra null checks, because\n    // this logic will likely run during app bootstrap and throwing can break the entire app.\n    const documentWindow = this._document.defaultView || window;\n    const computedStyle = documentWindow && documentWindow.getComputedStyle ? documentWindow.getComputedStyle(testElement) : null;\n    const computedColor = (computedStyle && computedStyle.backgroundColor || '').replace(/ /g, '');\n    testElement.remove();\n    switch (computedColor) {\n      // Pre Windows 11 dark theme.\n      case 'rgb(0,0,0)':\n      // Windows 11 dark themes.\n      case 'rgb(45,50,54)':\n      case 'rgb(32,32,32)':\n        return 2 /* HighContrastMode.WHITE_ON_BLACK */;\n      // Pre Windows 11 light theme.\n      case 'rgb(255,255,255)':\n      // Windows 11 light theme.\n      case 'rgb(255,250,239)':\n        return 1 /* HighContrastMode.BLACK_ON_WHITE */;\n    }\n\n    return 0 /* HighContrastMode.NONE */;\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n  }\n  /** Applies CSS classes indicating high-contrast mode to document body (browser-only). */\n  _applyBodyHighContrastModeCssClasses() {\n    if (!this._hasCheckedHighContrastMode && this._platform.isBrowser && this._document.body) {\n      const bodyClasses = this._document.body.classList;\n      bodyClasses.remove(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS, BLACK_ON_WHITE_CSS_CLASS, WHITE_ON_BLACK_CSS_CLASS);\n      this._hasCheckedHighContrastMode = true;\n      const mode = this.getHighContrastMode();\n      if (mode === 1 /* HighContrastMode.BLACK_ON_WHITE */) {\n        bodyClasses.add(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS, BLACK_ON_WHITE_CSS_CLASS);\n      } else if (mode === 2 /* HighContrastMode.WHITE_ON_BLACK */) {\n        bodyClasses.add(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS, WHITE_ON_BLACK_CSS_CLASS);\n      }\n    }\n  }\n}\nHighContrastModeDetector.ɵfac = function HighContrastModeDetector_Factory(t) {\n  return new (t || HighContrastModeDetector)(i0.ɵɵinject(i1.Platform), i0.ɵɵinject(DOCUMENT));\n};\nHighContrastModeDetector.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: HighContrastModeDetector,\n  factory: HighContrastModeDetector.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(HighContrastModeDetector, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.Platform\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\nclass A11yModule {\n  constructor(highContrastModeDetector) {\n    highContrastModeDetector._applyBodyHighContrastModeCssClasses();\n  }\n}\nA11yModule.ɵfac = function A11yModule_Factory(t) {\n  return new (t || A11yModule)(i0.ɵɵinject(HighContrastModeDetector));\n};\nA11yModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: A11yModule\n});\nA11yModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [ObserversModule]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(A11yModule, [{\n    type: NgModule,\n    args: [{\n      imports: [ObserversModule],\n      declarations: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus],\n      exports: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus]\n    }]\n  }], function () {\n    return [{\n      type: HighContrastModeDetector\n    }];\n  }, null);\n})();\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { A11yModule, ActiveDescendantKeyManager, AriaDescriber, CDK_DESCRIBEDBY_HOST_ATTRIBUTE, CDK_DESCRIBEDBY_ID_PREFIX, CdkAriaLive, CdkMonitorFocus, CdkTrapFocus, ConfigurableFocusTrap, ConfigurableFocusTrapFactory, EventListenerFocusTrapInertStrategy, FOCUS_MONITOR_DEFAULT_OPTIONS, FOCUS_TRAP_INERT_STRATEGY, FocusKeyManager, FocusMonitor, FocusTrap, FocusTrapFactory, HighContrastModeDetector, INPUT_MODALITY_DETECTOR_DEFAULT_OPTIONS, INPUT_MODALITY_DETECTOR_OPTIONS, InputModalityDetector, InteractivityChecker, IsFocusableConfig, LIVE_ANNOUNCER_DEFAULT_OPTIONS, LIVE_ANNOUNCER_ELEMENT_TOKEN, LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY, ListKeyManager, LiveAnnouncer, MESSAGES_CONTAINER_ID, isFakeMousedownFromScreenReader, isFakeTouchstartFromScreenReader };","map":{"version":3,"names":["DOCUMENT","i0","inject","APP_ID","Injectable","Inject","QueryList","Directive","Input","InjectionToken","Optional","EventEmitter","Output","NgModule","i1","_getFocusedElementPierceShadowDom","normalizePassiveListenerOptions","_getEventTarget","_getShadowRoot","Subject","Subscription","BehaviorSubject","of","hasModifierKey","A","Z","ZERO","NINE","END","HOME","LEFT_ARROW","RIGHT_ARROW","UP_ARROW","DOWN_ARROW","TAB","ALT","CONTROL","MAC_META","META","SHIFT","tap","debounceTime","filter","map","take","skip","distinctUntilChanged","takeUntil","coerceBooleanProperty","coerceElement","i1$1","ObserversModule","BreakpointObserver","ID_DELIMITER","addAriaReferencedId","el","attr","id","ids","getAriaReferenceIds","some","existingId","trim","push","setAttribute","join","removeAriaReferencedId","filteredIds","val","length","removeAttribute","getAttribute","match","MESSAGES_CONTAINER_ID","CDK_DESCRIBEDBY_ID_PREFIX","CDK_DESCRIBEDBY_HOST_ATTRIBUTE","nextId","AriaDescriber","constructor","_document","_platform","_messageRegistry","Map","_messagesContainer","_id","describe","hostElement","message","role","_canBeDescribed","key","getKey","setMessageId","set","messageElement","referenceCount","has","_createMessageElement","_isElementDescribedByMessage","_addMessageReference","removeDescription","_isElementNode","_removeMessageReference","registeredMessage","get","_deleteMessageElement","childNodes","remove","ngOnDestroy","describedElements","querySelectorAll","i","_removeCdkDescribedByReferenceIds","clear","createElement","textContent","_createMessagesContainer","appendChild","delete","containerClassName","serverContainers","messagesContainer","style","visibility","classList","add","isBrowser","body","element","originalReferenceIds","indexOf","referenceIds","messageId","trimmedMessage","ariaLabel","nodeType","ELEMENT_NODE","ɵfac","Platform","ɵprov","type","args","providedIn","undefined","decorators","serviceId","ListKeyManager","_items","_activeItemIndex","_activeItem","_wrap","_letterKeyStream","_typeaheadSubscription","EMPTY","_vertical","_allowedModifierKeys","_homeAndEnd","_skipPredicateFn","item","disabled","_pressedLetters","tabOut","change","changes","subscribe","newItems","itemArray","toArray","newIndex","skipPredicate","predicate","withWrap","shouldWrap","withVerticalOrientation","enabled","withHorizontalOrientation","direction","_horizontal","withAllowedModifierKeys","keys","withTypeAhead","debounceInterval","ngDevMode","getLabel","Error","unsubscribe","pipe","letter","inputString","items","_getItemsArray","index","toUpperCase","setActiveItem","withHomeAndEnd","previousActiveItem","updateActiveItem","next","onKeydown","event","keyCode","modifiers","isModifierAllowed","every","modifier","setNextItemActive","setPreviousItemActive","setFirstItemActive","setLastItemActive","toLocaleUpperCase","String","fromCharCode","preventDefault","activeItemIndex","activeItem","isTyping","_setActiveItemByIndex","_setActiveItemByDelta","delta","_setActiveInWrapMode","_setActiveInDefaultMode","fallbackDelta","ActiveDescendantKeyManager","setInactiveStyles","setActiveStyles","FocusKeyManager","arguments","_origin","setFocusOrigin","origin","focus","IsFocusableConfig","ignoreVisibility","InteractivityChecker","isDisabled","hasAttribute","isVisible","hasGeometry","getComputedStyle","isTabbable","frameElement","getFrameElement","getWindow","getTabIndexValue","nodeName","toLowerCase","tabIndexValue","WEBKIT","IOS","isPotentiallyTabbableIOS","FIREFOX","tabIndex","isFocusable","config","isPotentiallyFocusable","window","offsetWidth","offsetHeight","getClientRects","isNativeFormElement","isHiddenInput","isInputElement","isAnchorWithHref","isAnchorElement","hasValidTabIndex","isNaN","parseInt","inputType","node","ownerDocument","defaultView","FocusTrap","_element","_checker","_ngZone","deferAnchors","_hasAttached","startAnchorListener","focusLastTabbableElement","endAnchorListener","focusFirstTabbableElement","_enabled","attachAnchors","value","_startAnchor","_endAnchor","_toggleAnchorTabIndex","destroy","startAnchor","endAnchor","removeEventListener","runOutsideAngular","_createAnchor","addEventListener","parentNode","insertBefore","nextSibling","focusInitialElementWhenReady","options","Promise","resolve","_executeOnStable","focusInitialElement","focusFirstTabbableElementWhenReady","focusLastTabbableElementWhenReady","_getRegionBoundary","bound","markers","console","warn","_getFirstTabbableElement","_getLastTabbableElement","redirectToElement","querySelector","focusableChild","hasAttached","root","children","tabbableChild","anchor","isEnabled","toggleAnchors","fn","isStable","onStable","FocusTrapFactory","create","deferCaptureElements","NgZone","CdkTrapFocus","_elementRef","_focusTrapFactory","_previouslyFocusedElement","focusTrap","nativeElement","autoCapture","_autoCapture","ngAfterContentInit","_captureFocus","ngDoCheck","ngOnChanges","autoCaptureChange","firstChange","ElementRef","ɵdir","selector","exportAs","ConfigurableFocusTrap","_focusTrapManager","_inertStrategy","defer","register","deregister","_enable","preventFocus","_disable","allowFocus","FOCUS_TRAP_INERT_STRATEGY","EventListenerFocusTrapInertStrategy","_listener","e","_trapFocus","target","focusTrapRoot","contains","closest","setTimeout","activeElement","FocusTrapManager","_focusTrapStack","ft","stack","splice","ConfigurableFocusTrapFactory","configObject","isFakeMousedownFromScreenReader","buttons","offsetX","offsetY","isFakeTouchstartFromScreenReader","touch","touches","changedTouches","identifier","radiusX","radiusY","INPUT_MODALITY_DETECTOR_OPTIONS","INPUT_MODALITY_DETECTOR_DEFAULT_OPTIONS","ignoreKeys","TOUCH_BUFFER_MS","modalityEventListenerOptions","passive","capture","InputModalityDetector","ngZone","document","_mostRecentTarget","_modality","_lastTouchMs","_onKeydown","_options","_onMousedown","Date","now","_onTouchstart","modalityDetected","modalityChanged","mostRecentModality","complete","Document","LIVE_ANNOUNCER_ELEMENT_TOKEN","factory","LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY","LIVE_ANNOUNCER_DEFAULT_OPTIONS","LiveAnnouncer","elementToken","_defaultOptions","_liveElement","_createLiveElement","announce","defaultOptions","politeness","duration","clearTimeout","_previousTimeout","_currentPromise","_currentResolve","elementClass","previousElements","getElementsByClassName","liveEl","CdkAriaLive","_liveAnnouncer","_contentObserver","_politeness","_subscription","observe","elementText","_previousAnnouncedText","ContentObserver","FOCUS_MONITOR_DEFAULT_OPTIONS","captureEventListenerOptions","FocusMonitor","_inputModalityDetector","_windowFocused","_originFromTouchInteraction","_elementInfo","_monitoredElementCount","_rootNodeFocusListenerCount","_windowFocusListener","_windowFocusTimeoutId","_stopInputModalityDetector","_rootNodeFocusAndBlurListener","parentElement","_onFocus","_onBlur","_detectionMode","detectionMode","monitor","checkChildren","rootNode","_getDocument","cachedInfo","subject","info","_registerGlobalListeners","stopMonitoring","elementInfo","_setClasses","_removeGlobalListeners","focusVia","focusedElement","_getClosestElementsInfo","forEach","currentElement","_originChanged","_setOrigin","_info","_getWindow","doc","_getFocusOrigin","focusEventTarget","_shouldBeAttributedToTouch","_lastFocusOrigin","_isLastInteractionFromInputLabel","toggle","isFromInteraction","_originTimeoutId","ms","relatedTarget","Node","_emitOrigin","observers","run","rootNodeFocusListeners","modality","results","mostRecentTarget","labels","CdkMonitorFocus","_focusMonitor","_focusOrigin","cdkFocusChange","focusOrigin","ngAfterViewInit","_monitorSubscription","emit","BLACK_ON_WHITE_CSS_CLASS","WHITE_ON_BLACK_CSS_CLASS","HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS","HighContrastModeDetector","_breakpointSubscription","_hasCheckedHighContrastMode","_applyBodyHighContrastModeCssClasses","getHighContrastMode","testElement","backgroundColor","position","documentWindow","computedStyle","computedColor","replace","bodyClasses","mode","A11yModule","highContrastModeDetector","ɵmod","ɵinj","imports","declarations","exports"],"sources":["C:/Users/HP/Desktop/4SE3/PidevSym/PiDev_Spring_Angular/Front-End/frontOffice/node_modules/@angular/cdk/fesm2020/a11y.mjs"],"sourcesContent":["import { DOCUMENT } from '@angular/common';\r\nimport * as i0 from '@angular/core';\r\nimport { inject, APP_ID, Injectable, Inject, QueryList, Directive, Input, InjectionToken, Optional, EventEmitter, Output, NgModule } from '@angular/core';\r\nimport * as i1 from '@angular/cdk/platform';\r\nimport { _getFocusedElementPierceShadowDom, normalizePassiveListenerOptions, _getEventTarget, _getShadowRoot } from '@angular/cdk/platform';\r\nimport { Subject, Subscription, BehaviorSubject, of } from 'rxjs';\r\nimport { hasModifierKey, A, Z, ZERO, NINE, END, HOME, LEFT_ARROW, RIGHT_ARROW, UP_ARROW, DOWN_ARROW, TAB, ALT, CONTROL, MAC_META, META, SHIFT } from '@angular/cdk/keycodes';\r\nimport { tap, debounceTime, filter, map, take, skip, distinctUntilChanged, takeUntil } from 'rxjs/operators';\r\nimport { coerceBooleanProperty, coerceElement } from '@angular/cdk/coercion';\r\nimport * as i1$1 from '@angular/cdk/observers';\r\nimport { ObserversModule } from '@angular/cdk/observers';\r\nimport { BreakpointObserver } from '@angular/cdk/layout';\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** IDs are delimited by an empty space, as per the spec. */\r\nconst ID_DELIMITER = ' ';\r\n/**\r\n * Adds the given ID to the specified ARIA attribute on an element.\r\n * Used for attributes such as aria-labelledby, aria-owns, etc.\r\n */\r\nfunction addAriaReferencedId(el, attr, id) {\r\n    const ids = getAriaReferenceIds(el, attr);\r\n    if (ids.some(existingId => existingId.trim() == id.trim())) {\r\n        return;\r\n    }\r\n    ids.push(id.trim());\r\n    el.setAttribute(attr, ids.join(ID_DELIMITER));\r\n}\r\n/**\r\n * Removes the given ID from the specified ARIA attribute on an element.\r\n * Used for attributes such as aria-labelledby, aria-owns, etc.\r\n */\r\nfunction removeAriaReferencedId(el, attr, id) {\r\n    const ids = getAriaReferenceIds(el, attr);\r\n    const filteredIds = ids.filter(val => val != id.trim());\r\n    if (filteredIds.length) {\r\n        el.setAttribute(attr, filteredIds.join(ID_DELIMITER));\r\n    }\r\n    else {\r\n        el.removeAttribute(attr);\r\n    }\r\n}\r\n/**\r\n * Gets the list of IDs referenced by the given ARIA attribute on an element.\r\n * Used for attributes such as aria-labelledby, aria-owns, etc.\r\n */\r\nfunction getAriaReferenceIds(el, attr) {\r\n    // Get string array of all individual ids (whitespace delimited) in the attribute value\r\n    return (el.getAttribute(attr) || '').match(/\\S+/g) || [];\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * ID used for the body container where all messages are appended.\r\n * @deprecated No longer being used. To be removed.\r\n * @breaking-change 14.0.0\r\n */\r\nconst MESSAGES_CONTAINER_ID = 'cdk-describedby-message-container';\r\n/**\r\n * ID prefix used for each created message element.\r\n * @deprecated To be turned into a private variable.\r\n * @breaking-change 14.0.0\r\n */\r\nconst CDK_DESCRIBEDBY_ID_PREFIX = 'cdk-describedby-message';\r\n/**\r\n * Attribute given to each host element that is described by a message element.\r\n * @deprecated To be turned into a private variable.\r\n * @breaking-change 14.0.0\r\n */\r\nconst CDK_DESCRIBEDBY_HOST_ATTRIBUTE = 'cdk-describedby-host';\r\n/** Global incremental identifier for each registered message element. */\r\nlet nextId = 0;\r\n/**\r\n * Utility that creates visually hidden elements with a message content. Useful for elements that\r\n * want to use aria-describedby to further describe themselves without adding additional visual\r\n * content.\r\n */\r\nclass AriaDescriber {\r\n    constructor(_document, \r\n    /**\r\n     * @deprecated To be turned into a required parameter.\r\n     * @breaking-change 14.0.0\r\n     */\r\n    _platform) {\r\n        this._platform = _platform;\r\n        /** Map of all registered message elements that have been placed into the document. */\r\n        this._messageRegistry = new Map();\r\n        /** Container for all registered messages. */\r\n        this._messagesContainer = null;\r\n        /** Unique ID for the service. */\r\n        this._id = `${nextId++}`;\r\n        this._document = _document;\r\n        this._id = inject(APP_ID) + '-' + nextId++;\r\n    }\r\n    describe(hostElement, message, role) {\r\n        if (!this._canBeDescribed(hostElement, message)) {\r\n            return;\r\n        }\r\n        const key = getKey(message, role);\r\n        if (typeof message !== 'string') {\r\n            // We need to ensure that the element has an ID.\r\n            setMessageId(message, this._id);\r\n            this._messageRegistry.set(key, { messageElement: message, referenceCount: 0 });\r\n        }\r\n        else if (!this._messageRegistry.has(key)) {\r\n            this._createMessageElement(message, role);\r\n        }\r\n        if (!this._isElementDescribedByMessage(hostElement, key)) {\r\n            this._addMessageReference(hostElement, key);\r\n        }\r\n    }\r\n    removeDescription(hostElement, message, role) {\r\n        if (!message || !this._isElementNode(hostElement)) {\r\n            return;\r\n        }\r\n        const key = getKey(message, role);\r\n        if (this._isElementDescribedByMessage(hostElement, key)) {\r\n            this._removeMessageReference(hostElement, key);\r\n        }\r\n        // If the message is a string, it means that it's one that we created for the\r\n        // consumer so we can remove it safely, otherwise we should leave it in place.\r\n        if (typeof message === 'string') {\r\n            const registeredMessage = this._messageRegistry.get(key);\r\n            if (registeredMessage && registeredMessage.referenceCount === 0) {\r\n                this._deleteMessageElement(key);\r\n            }\r\n        }\r\n        if (this._messagesContainer?.childNodes.length === 0) {\r\n            this._messagesContainer.remove();\r\n            this._messagesContainer = null;\r\n        }\r\n    }\r\n    /** Unregisters all created message elements and removes the message container. */\r\n    ngOnDestroy() {\r\n        const describedElements = this._document.querySelectorAll(`[${CDK_DESCRIBEDBY_HOST_ATTRIBUTE}=\"${this._id}\"]`);\r\n        for (let i = 0; i < describedElements.length; i++) {\r\n            this._removeCdkDescribedByReferenceIds(describedElements[i]);\r\n            describedElements[i].removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\r\n        }\r\n        this._messagesContainer?.remove();\r\n        this._messagesContainer = null;\r\n        this._messageRegistry.clear();\r\n    }\r\n    /**\r\n     * Creates a new element in the visually hidden message container element with the message\r\n     * as its content and adds it to the message registry.\r\n     */\r\n    _createMessageElement(message, role) {\r\n        const messageElement = this._document.createElement('div');\r\n        setMessageId(messageElement, this._id);\r\n        messageElement.textContent = message;\r\n        if (role) {\r\n            messageElement.setAttribute('role', role);\r\n        }\r\n        this._createMessagesContainer();\r\n        this._messagesContainer.appendChild(messageElement);\r\n        this._messageRegistry.set(getKey(message, role), { messageElement, referenceCount: 0 });\r\n    }\r\n    /** Deletes the message element from the global messages container. */\r\n    _deleteMessageElement(key) {\r\n        this._messageRegistry.get(key)?.messageElement?.remove();\r\n        this._messageRegistry.delete(key);\r\n    }\r\n    /** Creates the global container for all aria-describedby messages. */\r\n    _createMessagesContainer() {\r\n        if (this._messagesContainer) {\r\n            return;\r\n        }\r\n        const containerClassName = 'cdk-describedby-message-container';\r\n        const serverContainers = this._document.querySelectorAll(`.${containerClassName}[platform=\"server\"]`);\r\n        for (let i = 0; i < serverContainers.length; i++) {\r\n            // When going from the server to the client, we may end up in a situation where there's\r\n            // already a container on the page, but we don't have a reference to it. Clear the\r\n            // old container so we don't get duplicates. Doing this, instead of emptying the previous\r\n            // container, should be slightly faster.\r\n            serverContainers[i].remove();\r\n        }\r\n        const messagesContainer = this._document.createElement('div');\r\n        // We add `visibility: hidden` in order to prevent text in this container from\r\n        // being searchable by the browser's Ctrl + F functionality.\r\n        // Screen-readers will still read the description for elements with aria-describedby even\r\n        // when the description element is not visible.\r\n        messagesContainer.style.visibility = 'hidden';\r\n        // Even though we use `visibility: hidden`, we still apply `cdk-visually-hidden` so that\r\n        // the description element doesn't impact page layout.\r\n        messagesContainer.classList.add(containerClassName);\r\n        messagesContainer.classList.add('cdk-visually-hidden');\r\n        // @breaking-change 14.0.0 Remove null check for `_platform`.\r\n        if (this._platform && !this._platform.isBrowser) {\r\n            messagesContainer.setAttribute('platform', 'server');\r\n        }\r\n        this._document.body.appendChild(messagesContainer);\r\n        this._messagesContainer = messagesContainer;\r\n    }\r\n    /** Removes all cdk-describedby messages that are hosted through the element. */\r\n    _removeCdkDescribedByReferenceIds(element) {\r\n        // Remove all aria-describedby reference IDs that are prefixed by CDK_DESCRIBEDBY_ID_PREFIX\r\n        const originalReferenceIds = getAriaReferenceIds(element, 'aria-describedby').filter(id => id.indexOf(CDK_DESCRIBEDBY_ID_PREFIX) != 0);\r\n        element.setAttribute('aria-describedby', originalReferenceIds.join(' '));\r\n    }\r\n    /**\r\n     * Adds a message reference to the element using aria-describedby and increments the registered\r\n     * message's reference count.\r\n     */\r\n    _addMessageReference(element, key) {\r\n        const registeredMessage = this._messageRegistry.get(key);\r\n        // Add the aria-describedby reference and set the\r\n        // describedby_host attribute to mark the element.\r\n        addAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\r\n        element.setAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE, this._id);\r\n        registeredMessage.referenceCount++;\r\n    }\r\n    /**\r\n     * Removes a message reference from the element using aria-describedby\r\n     * and decrements the registered message's reference count.\r\n     */\r\n    _removeMessageReference(element, key) {\r\n        const registeredMessage = this._messageRegistry.get(key);\r\n        registeredMessage.referenceCount--;\r\n        removeAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\r\n        element.removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\r\n    }\r\n    /** Returns true if the element has been described by the provided message ID. */\r\n    _isElementDescribedByMessage(element, key) {\r\n        const referenceIds = getAriaReferenceIds(element, 'aria-describedby');\r\n        const registeredMessage = this._messageRegistry.get(key);\r\n        const messageId = registeredMessage && registeredMessage.messageElement.id;\r\n        return !!messageId && referenceIds.indexOf(messageId) != -1;\r\n    }\r\n    /** Determines whether a message can be described on a particular element. */\r\n    _canBeDescribed(element, message) {\r\n        if (!this._isElementNode(element)) {\r\n            return false;\r\n        }\r\n        if (message && typeof message === 'object') {\r\n            // We'd have to make some assumptions about the description element's text, if the consumer\r\n            // passed in an element. Assume that if an element is passed in, the consumer has verified\r\n            // that it can be used as a description.\r\n            return true;\r\n        }\r\n        const trimmedMessage = message == null ? '' : `${message}`.trim();\r\n        const ariaLabel = element.getAttribute('aria-label');\r\n        // We shouldn't set descriptions if they're exactly the same as the `aria-label` of the\r\n        // element, because screen readers will end up reading out the same text twice in a row.\r\n        return trimmedMessage ? !ariaLabel || ariaLabel.trim() !== trimmedMessage : false;\r\n    }\r\n    /** Checks whether a node is an Element node. */\r\n    _isElementNode(element) {\r\n        return element.nodeType === this._document.ELEMENT_NODE;\r\n    }\r\n}\r\nAriaDescriber.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: AriaDescriber, deps: [{ token: DOCUMENT }, { token: i1.Platform }], target: i0.ɵɵFactoryTarget.Injectable });\r\nAriaDescriber.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: AriaDescriber, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: AriaDescriber, decorators: [{\r\n            type: Injectable,\r\n            args: [{ providedIn: 'root' }]\r\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\r\n                    type: Inject,\r\n                    args: [DOCUMENT]\r\n                }] }, { type: i1.Platform }]; } });\r\n/** Gets a key that can be used to look messages up in the registry. */\r\nfunction getKey(message, role) {\r\n    return typeof message === 'string' ? `${role || ''}/${message}` : message;\r\n}\r\n/** Assigns a unique ID to an element, if it doesn't have one already. */\r\nfunction setMessageId(element, serviceId) {\r\n    if (!element.id) {\r\n        element.id = `${CDK_DESCRIBEDBY_ID_PREFIX}-${serviceId}-${nextId++}`;\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * This class manages keyboard events for selectable lists. If you pass it a query list\r\n * of items, it will set the active item correctly when arrow events occur.\r\n */\r\nclass ListKeyManager {\r\n    constructor(_items) {\r\n        this._items = _items;\r\n        this._activeItemIndex = -1;\r\n        this._activeItem = null;\r\n        this._wrap = false;\r\n        this._letterKeyStream = new Subject();\r\n        this._typeaheadSubscription = Subscription.EMPTY;\r\n        this._vertical = true;\r\n        this._allowedModifierKeys = [];\r\n        this._homeAndEnd = false;\r\n        /**\r\n         * Predicate function that can be used to check whether an item should be skipped\r\n         * by the key manager. By default, disabled items are skipped.\r\n         */\r\n        this._skipPredicateFn = (item) => item.disabled;\r\n        // Buffer for the letters that the user has pressed when the typeahead option is turned on.\r\n        this._pressedLetters = [];\r\n        /**\r\n         * Stream that emits any time the TAB key is pressed, so components can react\r\n         * when focus is shifted off of the list.\r\n         */\r\n        this.tabOut = new Subject();\r\n        /** Stream that emits whenever the active item of the list manager changes. */\r\n        this.change = new Subject();\r\n        // We allow for the items to be an array because, in some cases, the consumer may\r\n        // not have access to a QueryList of the items they want to manage (e.g. when the\r\n        // items aren't being collected via `ViewChildren` or `ContentChildren`).\r\n        if (_items instanceof QueryList) {\r\n            _items.changes.subscribe((newItems) => {\r\n                if (this._activeItem) {\r\n                    const itemArray = newItems.toArray();\r\n                    const newIndex = itemArray.indexOf(this._activeItem);\r\n                    if (newIndex > -1 && newIndex !== this._activeItemIndex) {\r\n                        this._activeItemIndex = newIndex;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Sets the predicate function that determines which items should be skipped by the\r\n     * list key manager.\r\n     * @param predicate Function that determines whether the given item should be skipped.\r\n     */\r\n    skipPredicate(predicate) {\r\n        this._skipPredicateFn = predicate;\r\n        return this;\r\n    }\r\n    /**\r\n     * Configures wrapping mode, which determines whether the active item will wrap to\r\n     * the other end of list when there are no more items in the given direction.\r\n     * @param shouldWrap Whether the list should wrap when reaching the end.\r\n     */\r\n    withWrap(shouldWrap = true) {\r\n        this._wrap = shouldWrap;\r\n        return this;\r\n    }\r\n    /**\r\n     * Configures whether the key manager should be able to move the selection vertically.\r\n     * @param enabled Whether vertical selection should be enabled.\r\n     */\r\n    withVerticalOrientation(enabled = true) {\r\n        this._vertical = enabled;\r\n        return this;\r\n    }\r\n    /**\r\n     * Configures the key manager to move the selection horizontally.\r\n     * Passing in `null` will disable horizontal movement.\r\n     * @param direction Direction in which the selection can be moved.\r\n     */\r\n    withHorizontalOrientation(direction) {\r\n        this._horizontal = direction;\r\n        return this;\r\n    }\r\n    /**\r\n     * Modifier keys which are allowed to be held down and whose default actions will be prevented\r\n     * as the user is pressing the arrow keys. Defaults to not allowing any modifier keys.\r\n     */\r\n    withAllowedModifierKeys(keys) {\r\n        this._allowedModifierKeys = keys;\r\n        return this;\r\n    }\r\n    /**\r\n     * Turns on typeahead mode which allows users to set the active item by typing.\r\n     * @param debounceInterval Time to wait after the last keystroke before setting the active item.\r\n     */\r\n    withTypeAhead(debounceInterval = 200) {\r\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) &&\r\n            this._items.length &&\r\n            this._items.some(item => typeof item.getLabel !== 'function')) {\r\n            throw Error('ListKeyManager items in typeahead mode must implement the `getLabel` method.');\r\n        }\r\n        this._typeaheadSubscription.unsubscribe();\r\n        // Debounce the presses of non-navigational keys, collect the ones that correspond to letters\r\n        // and convert those letters back into a string. Afterwards find the first item that starts\r\n        // with that string and select it.\r\n        this._typeaheadSubscription = this._letterKeyStream\r\n            .pipe(tap(letter => this._pressedLetters.push(letter)), debounceTime(debounceInterval), filter(() => this._pressedLetters.length > 0), map(() => this._pressedLetters.join('')))\r\n            .subscribe(inputString => {\r\n            const items = this._getItemsArray();\r\n            // Start at 1 because we want to start searching at the item immediately\r\n            // following the current active item.\r\n            for (let i = 1; i < items.length + 1; i++) {\r\n                const index = (this._activeItemIndex + i) % items.length;\r\n                const item = items[index];\r\n                if (!this._skipPredicateFn(item) &&\r\n                    item.getLabel().toUpperCase().trim().indexOf(inputString) === 0) {\r\n                    this.setActiveItem(index);\r\n                    break;\r\n                }\r\n            }\r\n            this._pressedLetters = [];\r\n        });\r\n        return this;\r\n    }\r\n    /**\r\n     * Configures the key manager to activate the first and last items\r\n     * respectively when the Home or End key is pressed.\r\n     * @param enabled Whether pressing the Home or End key activates the first/last item.\r\n     */\r\n    withHomeAndEnd(enabled = true) {\r\n        this._homeAndEnd = enabled;\r\n        return this;\r\n    }\r\n    setActiveItem(item) {\r\n        const previousActiveItem = this._activeItem;\r\n        this.updateActiveItem(item);\r\n        if (this._activeItem !== previousActiveItem) {\r\n            this.change.next(this._activeItemIndex);\r\n        }\r\n    }\r\n    /**\r\n     * Sets the active item depending on the key event passed in.\r\n     * @param event Keyboard event to be used for determining which element should be active.\r\n     */\r\n    onKeydown(event) {\r\n        const keyCode = event.keyCode;\r\n        const modifiers = ['altKey', 'ctrlKey', 'metaKey', 'shiftKey'];\r\n        const isModifierAllowed = modifiers.every(modifier => {\r\n            return !event[modifier] || this._allowedModifierKeys.indexOf(modifier) > -1;\r\n        });\r\n        switch (keyCode) {\r\n            case TAB:\r\n                this.tabOut.next();\r\n                return;\r\n            case DOWN_ARROW:\r\n                if (this._vertical && isModifierAllowed) {\r\n                    this.setNextItemActive();\r\n                    break;\r\n                }\r\n                else {\r\n                    return;\r\n                }\r\n            case UP_ARROW:\r\n                if (this._vertical && isModifierAllowed) {\r\n                    this.setPreviousItemActive();\r\n                    break;\r\n                }\r\n                else {\r\n                    return;\r\n                }\r\n            case RIGHT_ARROW:\r\n                if (this._horizontal && isModifierAllowed) {\r\n                    this._horizontal === 'rtl' ? this.setPreviousItemActive() : this.setNextItemActive();\r\n                    break;\r\n                }\r\n                else {\r\n                    return;\r\n                }\r\n            case LEFT_ARROW:\r\n                if (this._horizontal && isModifierAllowed) {\r\n                    this._horizontal === 'rtl' ? this.setNextItemActive() : this.setPreviousItemActive();\r\n                    break;\r\n                }\r\n                else {\r\n                    return;\r\n                }\r\n            case HOME:\r\n                if (this._homeAndEnd && isModifierAllowed) {\r\n                    this.setFirstItemActive();\r\n                    break;\r\n                }\r\n                else {\r\n                    return;\r\n                }\r\n            case END:\r\n                if (this._homeAndEnd && isModifierAllowed) {\r\n                    this.setLastItemActive();\r\n                    break;\r\n                }\r\n                else {\r\n                    return;\r\n                }\r\n            default:\r\n                if (isModifierAllowed || hasModifierKey(event, 'shiftKey')) {\r\n                    // Attempt to use the `event.key` which also maps it to the user's keyboard language,\r\n                    // otherwise fall back to resolving alphanumeric characters via the keyCode.\r\n                    if (event.key && event.key.length === 1) {\r\n                        this._letterKeyStream.next(event.key.toLocaleUpperCase());\r\n                    }\r\n                    else if ((keyCode >= A && keyCode <= Z) || (keyCode >= ZERO && keyCode <= NINE)) {\r\n                        this._letterKeyStream.next(String.fromCharCode(keyCode));\r\n                    }\r\n                }\r\n                // Note that we return here, in order to avoid preventing\r\n                // the default action of non-navigational keys.\r\n                return;\r\n        }\r\n        this._pressedLetters = [];\r\n        event.preventDefault();\r\n    }\r\n    /** Index of the currently active item. */\r\n    get activeItemIndex() {\r\n        return this._activeItemIndex;\r\n    }\r\n    /** The active item. */\r\n    get activeItem() {\r\n        return this._activeItem;\r\n    }\r\n    /** Gets whether the user is currently typing into the manager using the typeahead feature. */\r\n    isTyping() {\r\n        return this._pressedLetters.length > 0;\r\n    }\r\n    /** Sets the active item to the first enabled item in the list. */\r\n    setFirstItemActive() {\r\n        this._setActiveItemByIndex(0, 1);\r\n    }\r\n    /** Sets the active item to the last enabled item in the list. */\r\n    setLastItemActive() {\r\n        this._setActiveItemByIndex(this._items.length - 1, -1);\r\n    }\r\n    /** Sets the active item to the next enabled item in the list. */\r\n    setNextItemActive() {\r\n        this._activeItemIndex < 0 ? this.setFirstItemActive() : this._setActiveItemByDelta(1);\r\n    }\r\n    /** Sets the active item to a previous enabled item in the list. */\r\n    setPreviousItemActive() {\r\n        this._activeItemIndex < 0 && this._wrap\r\n            ? this.setLastItemActive()\r\n            : this._setActiveItemByDelta(-1);\r\n    }\r\n    updateActiveItem(item) {\r\n        const itemArray = this._getItemsArray();\r\n        const index = typeof item === 'number' ? item : itemArray.indexOf(item);\r\n        const activeItem = itemArray[index];\r\n        // Explicitly check for `null` and `undefined` because other falsy values are valid.\r\n        this._activeItem = activeItem == null ? null : activeItem;\r\n        this._activeItemIndex = index;\r\n    }\r\n    /**\r\n     * This method sets the active item, given a list of items and the delta between the\r\n     * currently active item and the new active item. It will calculate differently\r\n     * depending on whether wrap mode is turned on.\r\n     */\r\n    _setActiveItemByDelta(delta) {\r\n        this._wrap ? this._setActiveInWrapMode(delta) : this._setActiveInDefaultMode(delta);\r\n    }\r\n    /**\r\n     * Sets the active item properly given \"wrap\" mode. In other words, it will continue to move\r\n     * down the list until it finds an item that is not disabled, and it will wrap if it\r\n     * encounters either end of the list.\r\n     */\r\n    _setActiveInWrapMode(delta) {\r\n        const items = this._getItemsArray();\r\n        for (let i = 1; i <= items.length; i++) {\r\n            const index = (this._activeItemIndex + delta * i + items.length) % items.length;\r\n            const item = items[index];\r\n            if (!this._skipPredicateFn(item)) {\r\n                this.setActiveItem(index);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Sets the active item properly given the default mode. In other words, it will\r\n     * continue to move down the list until it finds an item that is not disabled. If\r\n     * it encounters either end of the list, it will stop and not wrap.\r\n     */\r\n    _setActiveInDefaultMode(delta) {\r\n        this._setActiveItemByIndex(this._activeItemIndex + delta, delta);\r\n    }\r\n    /**\r\n     * Sets the active item to the first enabled item starting at the index specified. If the\r\n     * item is disabled, it will move in the fallbackDelta direction until it either\r\n     * finds an enabled item or encounters the end of the list.\r\n     */\r\n    _setActiveItemByIndex(index, fallbackDelta) {\r\n        const items = this._getItemsArray();\r\n        if (!items[index]) {\r\n            return;\r\n        }\r\n        while (this._skipPredicateFn(items[index])) {\r\n            index += fallbackDelta;\r\n            if (!items[index]) {\r\n                return;\r\n            }\r\n        }\r\n        this.setActiveItem(index);\r\n    }\r\n    /** Returns the items as an array. */\r\n    _getItemsArray() {\r\n        return this._items instanceof QueryList ? this._items.toArray() : this._items;\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nclass ActiveDescendantKeyManager extends ListKeyManager {\r\n    setActiveItem(index) {\r\n        if (this.activeItem) {\r\n            this.activeItem.setInactiveStyles();\r\n        }\r\n        super.setActiveItem(index);\r\n        if (this.activeItem) {\r\n            this.activeItem.setActiveStyles();\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nclass FocusKeyManager extends ListKeyManager {\r\n    constructor() {\r\n        super(...arguments);\r\n        this._origin = 'program';\r\n    }\r\n    /**\r\n     * Sets the focus origin that will be passed in to the items for any subsequent `focus` calls.\r\n     * @param origin Focus origin to be used when focusing items.\r\n     */\r\n    setFocusOrigin(origin) {\r\n        this._origin = origin;\r\n        return this;\r\n    }\r\n    setActiveItem(item) {\r\n        super.setActiveItem(item);\r\n        if (this.activeItem) {\r\n            this.activeItem.focus(this._origin);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Configuration for the isFocusable method.\r\n */\r\nclass IsFocusableConfig {\r\n    constructor() {\r\n        /**\r\n         * Whether to count an element as focusable even if it is not currently visible.\r\n         */\r\n        this.ignoreVisibility = false;\r\n    }\r\n}\r\n// The InteractivityChecker leans heavily on the ally.js accessibility utilities.\r\n// Methods like `isTabbable` are only covering specific edge-cases for the browsers which are\r\n// supported.\r\n/**\r\n * Utility for checking the interactivity of an element, such as whether is is focusable or\r\n * tabbable.\r\n */\r\nclass InteractivityChecker {\r\n    constructor(_platform) {\r\n        this._platform = _platform;\r\n    }\r\n    /**\r\n     * Gets whether an element is disabled.\r\n     *\r\n     * @param element Element to be checked.\r\n     * @returns Whether the element is disabled.\r\n     */\r\n    isDisabled(element) {\r\n        // This does not capture some cases, such as a non-form control with a disabled attribute or\r\n        // a form control inside of a disabled form, but should capture the most common cases.\r\n        return element.hasAttribute('disabled');\r\n    }\r\n    /**\r\n     * Gets whether an element is visible for the purposes of interactivity.\r\n     *\r\n     * This will capture states like `display: none` and `visibility: hidden`, but not things like\r\n     * being clipped by an `overflow: hidden` parent or being outside the viewport.\r\n     *\r\n     * @returns Whether the element is visible.\r\n     */\r\n    isVisible(element) {\r\n        return hasGeometry(element) && getComputedStyle(element).visibility === 'visible';\r\n    }\r\n    /**\r\n     * Gets whether an element can be reached via Tab key.\r\n     * Assumes that the element has already been checked with isFocusable.\r\n     *\r\n     * @param element Element to be checked.\r\n     * @returns Whether the element is tabbable.\r\n     */\r\n    isTabbable(element) {\r\n        // Nothing is tabbable on the server 😎\r\n        if (!this._platform.isBrowser) {\r\n            return false;\r\n        }\r\n        const frameElement = getFrameElement(getWindow(element));\r\n        if (frameElement) {\r\n            // Frame elements inherit their tabindex onto all child elements.\r\n            if (getTabIndexValue(frameElement) === -1) {\r\n                return false;\r\n            }\r\n            // Browsers disable tabbing to an element inside of an invisible frame.\r\n            if (!this.isVisible(frameElement)) {\r\n                return false;\r\n            }\r\n        }\r\n        let nodeName = element.nodeName.toLowerCase();\r\n        let tabIndexValue = getTabIndexValue(element);\r\n        if (element.hasAttribute('contenteditable')) {\r\n            return tabIndexValue !== -1;\r\n        }\r\n        if (nodeName === 'iframe' || nodeName === 'object') {\r\n            // The frame or object's content may be tabbable depending on the content, but it's\r\n            // not possibly to reliably detect the content of the frames. We always consider such\r\n            // elements as non-tabbable.\r\n            return false;\r\n        }\r\n        // In iOS, the browser only considers some specific elements as tabbable.\r\n        if (this._platform.WEBKIT && this._platform.IOS && !isPotentiallyTabbableIOS(element)) {\r\n            return false;\r\n        }\r\n        if (nodeName === 'audio') {\r\n            // Audio elements without controls enabled are never tabbable, regardless\r\n            // of the tabindex attribute explicitly being set.\r\n            if (!element.hasAttribute('controls')) {\r\n                return false;\r\n            }\r\n            // Audio elements with controls are by default tabbable unless the\r\n            // tabindex attribute is set to `-1` explicitly.\r\n            return tabIndexValue !== -1;\r\n        }\r\n        if (nodeName === 'video') {\r\n            // For all video elements, if the tabindex attribute is set to `-1`, the video\r\n            // is not tabbable. Note: We cannot rely on the default `HTMLElement.tabIndex`\r\n            // property as that one is set to `-1` in Chrome, Edge and Safari v13.1. The\r\n            // tabindex attribute is the source of truth here.\r\n            if (tabIndexValue === -1) {\r\n                return false;\r\n            }\r\n            // If the tabindex is explicitly set, and not `-1` (as per check before), the\r\n            // video element is always tabbable (regardless of whether it has controls or not).\r\n            if (tabIndexValue !== null) {\r\n                return true;\r\n            }\r\n            // Otherwise (when no explicit tabindex is set), a video is only tabbable if it\r\n            // has controls enabled. Firefox is special as videos are always tabbable regardless\r\n            // of whether there are controls or not.\r\n            return this._platform.FIREFOX || element.hasAttribute('controls');\r\n        }\r\n        return element.tabIndex >= 0;\r\n    }\r\n    /**\r\n     * Gets whether an element can be focused by the user.\r\n     *\r\n     * @param element Element to be checked.\r\n     * @param config The config object with options to customize this method's behavior\r\n     * @returns Whether the element is focusable.\r\n     */\r\n    isFocusable(element, config) {\r\n        // Perform checks in order of left to most expensive.\r\n        // Again, naive approach that does not capture many edge cases and browser quirks.\r\n        return (isPotentiallyFocusable(element) &&\r\n            !this.isDisabled(element) &&\r\n            (config?.ignoreVisibility || this.isVisible(element)));\r\n    }\r\n}\r\nInteractivityChecker.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: InteractivityChecker, deps: [{ token: i1.Platform }], target: i0.ɵɵFactoryTarget.Injectable });\r\nInteractivityChecker.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: InteractivityChecker, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: InteractivityChecker, decorators: [{\r\n            type: Injectable,\r\n            args: [{ providedIn: 'root' }]\r\n        }], ctorParameters: function () { return [{ type: i1.Platform }]; } });\r\n/**\r\n * Returns the frame element from a window object. Since browsers like MS Edge throw errors if\r\n * the frameElement property is being accessed from a different host address, this property\r\n * should be accessed carefully.\r\n */\r\nfunction getFrameElement(window) {\r\n    try {\r\n        return window.frameElement;\r\n    }\r\n    catch {\r\n        return null;\r\n    }\r\n}\r\n/** Checks whether the specified element has any geometry / rectangles. */\r\nfunction hasGeometry(element) {\r\n    // Use logic from jQuery to check for an invisible element.\r\n    // See https://github.com/jquery/jquery/blob/master/src/css/hiddenVisibleSelectors.js#L12\r\n    return !!(element.offsetWidth ||\r\n        element.offsetHeight ||\r\n        (typeof element.getClientRects === 'function' && element.getClientRects().length));\r\n}\r\n/** Gets whether an element's  */\r\nfunction isNativeFormElement(element) {\r\n    let nodeName = element.nodeName.toLowerCase();\r\n    return (nodeName === 'input' ||\r\n        nodeName === 'select' ||\r\n        nodeName === 'button' ||\r\n        nodeName === 'textarea');\r\n}\r\n/** Gets whether an element is an `<input type=\"hidden\">`. */\r\nfunction isHiddenInput(element) {\r\n    return isInputElement(element) && element.type == 'hidden';\r\n}\r\n/** Gets whether an element is an anchor that has an href attribute. */\r\nfunction isAnchorWithHref(element) {\r\n    return isAnchorElement(element) && element.hasAttribute('href');\r\n}\r\n/** Gets whether an element is an input element. */\r\nfunction isInputElement(element) {\r\n    return element.nodeName.toLowerCase() == 'input';\r\n}\r\n/** Gets whether an element is an anchor element. */\r\nfunction isAnchorElement(element) {\r\n    return element.nodeName.toLowerCase() == 'a';\r\n}\r\n/** Gets whether an element has a valid tabindex. */\r\nfunction hasValidTabIndex(element) {\r\n    if (!element.hasAttribute('tabindex') || element.tabIndex === undefined) {\r\n        return false;\r\n    }\r\n    let tabIndex = element.getAttribute('tabindex');\r\n    return !!(tabIndex && !isNaN(parseInt(tabIndex, 10)));\r\n}\r\n/**\r\n * Returns the parsed tabindex from the element attributes instead of returning the\r\n * evaluated tabindex from the browsers defaults.\r\n */\r\nfunction getTabIndexValue(element) {\r\n    if (!hasValidTabIndex(element)) {\r\n        return null;\r\n    }\r\n    // See browser issue in Gecko https://bugzilla.mozilla.org/show_bug.cgi?id=1128054\r\n    const tabIndex = parseInt(element.getAttribute('tabindex') || '', 10);\r\n    return isNaN(tabIndex) ? -1 : tabIndex;\r\n}\r\n/** Checks whether the specified element is potentially tabbable on iOS */\r\nfunction isPotentiallyTabbableIOS(element) {\r\n    let nodeName = element.nodeName.toLowerCase();\r\n    let inputType = nodeName === 'input' && element.type;\r\n    return (inputType === 'text' ||\r\n        inputType === 'password' ||\r\n        nodeName === 'select' ||\r\n        nodeName === 'textarea');\r\n}\r\n/**\r\n * Gets whether an element is potentially focusable without taking current visible/disabled state\r\n * into account.\r\n */\r\nfunction isPotentiallyFocusable(element) {\r\n    // Inputs are potentially focusable *unless* they're type=\"hidden\".\r\n    if (isHiddenInput(element)) {\r\n        return false;\r\n    }\r\n    return (isNativeFormElement(element) ||\r\n        isAnchorWithHref(element) ||\r\n        element.hasAttribute('contenteditable') ||\r\n        hasValidTabIndex(element));\r\n}\r\n/** Gets the parent window of a DOM node with regards of being inside of an iframe. */\r\nfunction getWindow(node) {\r\n    // ownerDocument is null if `node` itself *is* a document.\r\n    return (node.ownerDocument && node.ownerDocument.defaultView) || window;\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Class that allows for trapping focus within a DOM element.\r\n *\r\n * This class currently uses a relatively simple approach to focus trapping.\r\n * It assumes that the tab order is the same as DOM order, which is not necessarily true.\r\n * Things like `tabIndex > 0`, flex `order`, and shadow roots can cause the two to be misaligned.\r\n *\r\n * @deprecated Use `ConfigurableFocusTrap` instead.\r\n * @breaking-change 11.0.0\r\n */\r\nclass FocusTrap {\r\n    constructor(_element, _checker, _ngZone, _document, deferAnchors = false) {\r\n        this._element = _element;\r\n        this._checker = _checker;\r\n        this._ngZone = _ngZone;\r\n        this._document = _document;\r\n        this._hasAttached = false;\r\n        // Event listeners for the anchors. Need to be regular functions so that we can unbind them later.\r\n        this.startAnchorListener = () => this.focusLastTabbableElement();\r\n        this.endAnchorListener = () => this.focusFirstTabbableElement();\r\n        this._enabled = true;\r\n        if (!deferAnchors) {\r\n            this.attachAnchors();\r\n        }\r\n    }\r\n    /** Whether the focus trap is active. */\r\n    get enabled() {\r\n        return this._enabled;\r\n    }\r\n    set enabled(value) {\r\n        this._enabled = value;\r\n        if (this._startAnchor && this._endAnchor) {\r\n            this._toggleAnchorTabIndex(value, this._startAnchor);\r\n            this._toggleAnchorTabIndex(value, this._endAnchor);\r\n        }\r\n    }\r\n    /** Destroys the focus trap by cleaning up the anchors. */\r\n    destroy() {\r\n        const startAnchor = this._startAnchor;\r\n        const endAnchor = this._endAnchor;\r\n        if (startAnchor) {\r\n            startAnchor.removeEventListener('focus', this.startAnchorListener);\r\n            startAnchor.remove();\r\n        }\r\n        if (endAnchor) {\r\n            endAnchor.removeEventListener('focus', this.endAnchorListener);\r\n            endAnchor.remove();\r\n        }\r\n        this._startAnchor = this._endAnchor = null;\r\n        this._hasAttached = false;\r\n    }\r\n    /**\r\n     * Inserts the anchors into the DOM. This is usually done automatically\r\n     * in the constructor, but can be deferred for cases like directives with `*ngIf`.\r\n     * @returns Whether the focus trap managed to attach successfully. This may not be the case\r\n     * if the target element isn't currently in the DOM.\r\n     */\r\n    attachAnchors() {\r\n        // If we're not on the browser, there can be no focus to trap.\r\n        if (this._hasAttached) {\r\n            return true;\r\n        }\r\n        this._ngZone.runOutsideAngular(() => {\r\n            if (!this._startAnchor) {\r\n                this._startAnchor = this._createAnchor();\r\n                this._startAnchor.addEventListener('focus', this.startAnchorListener);\r\n            }\r\n            if (!this._endAnchor) {\r\n                this._endAnchor = this._createAnchor();\r\n                this._endAnchor.addEventListener('focus', this.endAnchorListener);\r\n            }\r\n        });\r\n        if (this._element.parentNode) {\r\n            this._element.parentNode.insertBefore(this._startAnchor, this._element);\r\n            this._element.parentNode.insertBefore(this._endAnchor, this._element.nextSibling);\r\n            this._hasAttached = true;\r\n        }\r\n        return this._hasAttached;\r\n    }\r\n    /**\r\n     * Waits for the zone to stabilize, then focuses the first tabbable element.\r\n     * @returns Returns a promise that resolves with a boolean, depending\r\n     * on whether focus was moved successfully.\r\n     */\r\n    focusInitialElementWhenReady(options) {\r\n        return new Promise(resolve => {\r\n            this._executeOnStable(() => resolve(this.focusInitialElement(options)));\r\n        });\r\n    }\r\n    /**\r\n     * Waits for the zone to stabilize, then focuses\r\n     * the first tabbable element within the focus trap region.\r\n     * @returns Returns a promise that resolves with a boolean, depending\r\n     * on whether focus was moved successfully.\r\n     */\r\n    focusFirstTabbableElementWhenReady(options) {\r\n        return new Promise(resolve => {\r\n            this._executeOnStable(() => resolve(this.focusFirstTabbableElement(options)));\r\n        });\r\n    }\r\n    /**\r\n     * Waits for the zone to stabilize, then focuses\r\n     * the last tabbable element within the focus trap region.\r\n     * @returns Returns a promise that resolves with a boolean, depending\r\n     * on whether focus was moved successfully.\r\n     */\r\n    focusLastTabbableElementWhenReady(options) {\r\n        return new Promise(resolve => {\r\n            this._executeOnStable(() => resolve(this.focusLastTabbableElement(options)));\r\n        });\r\n    }\r\n    /**\r\n     * Get the specified boundary element of the trapped region.\r\n     * @param bound The boundary to get (start or end of trapped region).\r\n     * @returns The boundary element.\r\n     */\r\n    _getRegionBoundary(bound) {\r\n        // Contains the deprecated version of selector, for temporary backwards comparability.\r\n        const markers = this._element.querySelectorAll(`[cdk-focus-region-${bound}], ` + `[cdkFocusRegion${bound}], ` + `[cdk-focus-${bound}]`);\r\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\r\n            for (let i = 0; i < markers.length; i++) {\r\n                // @breaking-change 8.0.0\r\n                if (markers[i].hasAttribute(`cdk-focus-${bound}`)) {\r\n                    console.warn(`Found use of deprecated attribute 'cdk-focus-${bound}', ` +\r\n                        `use 'cdkFocusRegion${bound}' instead. The deprecated ` +\r\n                        `attribute will be removed in 8.0.0.`, markers[i]);\r\n                }\r\n                else if (markers[i].hasAttribute(`cdk-focus-region-${bound}`)) {\r\n                    console.warn(`Found use of deprecated attribute 'cdk-focus-region-${bound}', ` +\r\n                        `use 'cdkFocusRegion${bound}' instead. The deprecated attribute ` +\r\n                        `will be removed in 8.0.0.`, markers[i]);\r\n                }\r\n            }\r\n        }\r\n        if (bound == 'start') {\r\n            return markers.length ? markers[0] : this._getFirstTabbableElement(this._element);\r\n        }\r\n        return markers.length\r\n            ? markers[markers.length - 1]\r\n            : this._getLastTabbableElement(this._element);\r\n    }\r\n    /**\r\n     * Focuses the element that should be focused when the focus trap is initialized.\r\n     * @returns Whether focus was moved successfully.\r\n     */\r\n    focusInitialElement(options) {\r\n        // Contains the deprecated version of selector, for temporary backwards comparability.\r\n        const redirectToElement = this._element.querySelector(`[cdk-focus-initial], ` + `[cdkFocusInitial]`);\r\n        if (redirectToElement) {\r\n            // @breaking-change 8.0.0\r\n            if ((typeof ngDevMode === 'undefined' || ngDevMode) &&\r\n                redirectToElement.hasAttribute(`cdk-focus-initial`)) {\r\n                console.warn(`Found use of deprecated attribute 'cdk-focus-initial', ` +\r\n                    `use 'cdkFocusInitial' instead. The deprecated attribute ` +\r\n                    `will be removed in 8.0.0`, redirectToElement);\r\n            }\r\n            // Warn the consumer if the element they've pointed to\r\n            // isn't focusable, when not in production mode.\r\n            if ((typeof ngDevMode === 'undefined' || ngDevMode) &&\r\n                !this._checker.isFocusable(redirectToElement)) {\r\n                console.warn(`Element matching '[cdkFocusInitial]' is not focusable.`, redirectToElement);\r\n            }\r\n            if (!this._checker.isFocusable(redirectToElement)) {\r\n                const focusableChild = this._getFirstTabbableElement(redirectToElement);\r\n                focusableChild?.focus(options);\r\n                return !!focusableChild;\r\n            }\r\n            redirectToElement.focus(options);\r\n            return true;\r\n        }\r\n        return this.focusFirstTabbableElement(options);\r\n    }\r\n    /**\r\n     * Focuses the first tabbable element within the focus trap region.\r\n     * @returns Whether focus was moved successfully.\r\n     */\r\n    focusFirstTabbableElement(options) {\r\n        const redirectToElement = this._getRegionBoundary('start');\r\n        if (redirectToElement) {\r\n            redirectToElement.focus(options);\r\n        }\r\n        return !!redirectToElement;\r\n    }\r\n    /**\r\n     * Focuses the last tabbable element within the focus trap region.\r\n     * @returns Whether focus was moved successfully.\r\n     */\r\n    focusLastTabbableElement(options) {\r\n        const redirectToElement = this._getRegionBoundary('end');\r\n        if (redirectToElement) {\r\n            redirectToElement.focus(options);\r\n        }\r\n        return !!redirectToElement;\r\n    }\r\n    /**\r\n     * Checks whether the focus trap has successfully been attached.\r\n     */\r\n    hasAttached() {\r\n        return this._hasAttached;\r\n    }\r\n    /** Get the first tabbable element from a DOM subtree (inclusive). */\r\n    _getFirstTabbableElement(root) {\r\n        if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\r\n            return root;\r\n        }\r\n        const children = root.children;\r\n        for (let i = 0; i < children.length; i++) {\r\n            const tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE\r\n                ? this._getFirstTabbableElement(children[i])\r\n                : null;\r\n            if (tabbableChild) {\r\n                return tabbableChild;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    /** Get the last tabbable element from a DOM subtree (inclusive). */\r\n    _getLastTabbableElement(root) {\r\n        if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\r\n            return root;\r\n        }\r\n        // Iterate in reverse DOM order.\r\n        const children = root.children;\r\n        for (let i = children.length - 1; i >= 0; i--) {\r\n            const tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE\r\n                ? this._getLastTabbableElement(children[i])\r\n                : null;\r\n            if (tabbableChild) {\r\n                return tabbableChild;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    /** Creates an anchor element. */\r\n    _createAnchor() {\r\n        const anchor = this._document.createElement('div');\r\n        this._toggleAnchorTabIndex(this._enabled, anchor);\r\n        anchor.classList.add('cdk-visually-hidden');\r\n        anchor.classList.add('cdk-focus-trap-anchor');\r\n        anchor.setAttribute('aria-hidden', 'true');\r\n        return anchor;\r\n    }\r\n    /**\r\n     * Toggles the `tabindex` of an anchor, based on the enabled state of the focus trap.\r\n     * @param isEnabled Whether the focus trap is enabled.\r\n     * @param anchor Anchor on which to toggle the tabindex.\r\n     */\r\n    _toggleAnchorTabIndex(isEnabled, anchor) {\r\n        // Remove the tabindex completely, rather than setting it to -1, because if the\r\n        // element has a tabindex, the user might still hit it when navigating with the arrow keys.\r\n        isEnabled ? anchor.setAttribute('tabindex', '0') : anchor.removeAttribute('tabindex');\r\n    }\r\n    /**\r\n     * Toggles the`tabindex` of both anchors to either trap Tab focus or allow it to escape.\r\n     * @param enabled: Whether the anchors should trap Tab.\r\n     */\r\n    toggleAnchors(enabled) {\r\n        if (this._startAnchor && this._endAnchor) {\r\n            this._toggleAnchorTabIndex(enabled, this._startAnchor);\r\n            this._toggleAnchorTabIndex(enabled, this._endAnchor);\r\n        }\r\n    }\r\n    /** Executes a function when the zone is stable. */\r\n    _executeOnStable(fn) {\r\n        if (this._ngZone.isStable) {\r\n            fn();\r\n        }\r\n        else {\r\n            this._ngZone.onStable.pipe(take(1)).subscribe(fn);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Factory that allows easy instantiation of focus traps.\r\n * @deprecated Use `ConfigurableFocusTrapFactory` instead.\r\n * @breaking-change 11.0.0\r\n */\r\nclass FocusTrapFactory {\r\n    constructor(_checker, _ngZone, _document) {\r\n        this._checker = _checker;\r\n        this._ngZone = _ngZone;\r\n        this._document = _document;\r\n    }\r\n    /**\r\n     * Creates a focus-trapped region around the given element.\r\n     * @param element The element around which focus will be trapped.\r\n     * @param deferCaptureElements Defers the creation of focus-capturing elements to be done\r\n     *     manually by the user.\r\n     * @returns The created focus trap instance.\r\n     */\r\n    create(element, deferCaptureElements = false) {\r\n        return new FocusTrap(element, this._checker, this._ngZone, this._document, deferCaptureElements);\r\n    }\r\n}\r\nFocusTrapFactory.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: FocusTrapFactory, deps: [{ token: InteractivityChecker }, { token: i0.NgZone }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\r\nFocusTrapFactory.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: FocusTrapFactory, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: FocusTrapFactory, decorators: [{\r\n            type: Injectable,\r\n            args: [{ providedIn: 'root' }]\r\n        }], ctorParameters: function () { return [{ type: InteractivityChecker }, { type: i0.NgZone }, { type: undefined, decorators: [{\r\n                    type: Inject,\r\n                    args: [DOCUMENT]\r\n                }] }]; } });\r\n/** Directive for trapping focus within a region. */\r\nclass CdkTrapFocus {\r\n    constructor(_elementRef, _focusTrapFactory, \r\n    /**\r\n     * @deprecated No longer being used. To be removed.\r\n     * @breaking-change 13.0.0\r\n     */\r\n    _document) {\r\n        this._elementRef = _elementRef;\r\n        this._focusTrapFactory = _focusTrapFactory;\r\n        /** Previously focused element to restore focus to upon destroy when using autoCapture. */\r\n        this._previouslyFocusedElement = null;\r\n        this.focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement, true);\r\n    }\r\n    /** Whether the focus trap is active. */\r\n    get enabled() {\r\n        return this.focusTrap.enabled;\r\n    }\r\n    set enabled(value) {\r\n        this.focusTrap.enabled = coerceBooleanProperty(value);\r\n    }\r\n    /**\r\n     * Whether the directive should automatically move focus into the trapped region upon\r\n     * initialization and return focus to the previous activeElement upon destruction.\r\n     */\r\n    get autoCapture() {\r\n        return this._autoCapture;\r\n    }\r\n    set autoCapture(value) {\r\n        this._autoCapture = coerceBooleanProperty(value);\r\n    }\r\n    ngOnDestroy() {\r\n        this.focusTrap.destroy();\r\n        // If we stored a previously focused element when using autoCapture, return focus to that\r\n        // element now that the trapped region is being destroyed.\r\n        if (this._previouslyFocusedElement) {\r\n            this._previouslyFocusedElement.focus();\r\n            this._previouslyFocusedElement = null;\r\n        }\r\n    }\r\n    ngAfterContentInit() {\r\n        this.focusTrap.attachAnchors();\r\n        if (this.autoCapture) {\r\n            this._captureFocus();\r\n        }\r\n    }\r\n    ngDoCheck() {\r\n        if (!this.focusTrap.hasAttached()) {\r\n            this.focusTrap.attachAnchors();\r\n        }\r\n    }\r\n    ngOnChanges(changes) {\r\n        const autoCaptureChange = changes['autoCapture'];\r\n        if (autoCaptureChange &&\r\n            !autoCaptureChange.firstChange &&\r\n            this.autoCapture &&\r\n            this.focusTrap.hasAttached()) {\r\n            this._captureFocus();\r\n        }\r\n    }\r\n    _captureFocus() {\r\n        this._previouslyFocusedElement = _getFocusedElementPierceShadowDom();\r\n        this.focusTrap.focusInitialElementWhenReady();\r\n    }\r\n}\r\nCdkTrapFocus.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: CdkTrapFocus, deps: [{ token: i0.ElementRef }, { token: FocusTrapFactory }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Directive });\r\nCdkTrapFocus.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0\", type: CdkTrapFocus, selector: \"[cdkTrapFocus]\", inputs: { enabled: [\"cdkTrapFocus\", \"enabled\"], autoCapture: [\"cdkTrapFocusAutoCapture\", \"autoCapture\"] }, exportAs: [\"cdkTrapFocus\"], usesOnChanges: true, ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: CdkTrapFocus, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: '[cdkTrapFocus]',\r\n                    exportAs: 'cdkTrapFocus',\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: FocusTrapFactory }, { type: undefined, decorators: [{\r\n                    type: Inject,\r\n                    args: [DOCUMENT]\r\n                }] }]; }, propDecorators: { enabled: [{\r\n                type: Input,\r\n                args: ['cdkTrapFocus']\r\n            }], autoCapture: [{\r\n                type: Input,\r\n                args: ['cdkTrapFocusAutoCapture']\r\n            }] } });\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Class that allows for trapping focus within a DOM element.\r\n *\r\n * This class uses a strategy pattern that determines how it traps focus.\r\n * See FocusTrapInertStrategy.\r\n */\r\nclass ConfigurableFocusTrap extends FocusTrap {\r\n    constructor(_element, _checker, _ngZone, _document, _focusTrapManager, _inertStrategy, config) {\r\n        super(_element, _checker, _ngZone, _document, config.defer);\r\n        this._focusTrapManager = _focusTrapManager;\r\n        this._inertStrategy = _inertStrategy;\r\n        this._focusTrapManager.register(this);\r\n    }\r\n    /** Whether the FocusTrap is enabled. */\r\n    get enabled() {\r\n        return this._enabled;\r\n    }\r\n    set enabled(value) {\r\n        this._enabled = value;\r\n        if (this._enabled) {\r\n            this._focusTrapManager.register(this);\r\n        }\r\n        else {\r\n            this._focusTrapManager.deregister(this);\r\n        }\r\n    }\r\n    /** Notifies the FocusTrapManager that this FocusTrap will be destroyed. */\r\n    destroy() {\r\n        this._focusTrapManager.deregister(this);\r\n        super.destroy();\r\n    }\r\n    /** @docs-private Implemented as part of ManagedFocusTrap. */\r\n    _enable() {\r\n        this._inertStrategy.preventFocus(this);\r\n        this.toggleAnchors(true);\r\n    }\r\n    /** @docs-private Implemented as part of ManagedFocusTrap. */\r\n    _disable() {\r\n        this._inertStrategy.allowFocus(this);\r\n        this.toggleAnchors(false);\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** The injection token used to specify the inert strategy. */\r\nconst FOCUS_TRAP_INERT_STRATEGY = new InjectionToken('FOCUS_TRAP_INERT_STRATEGY');\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Lightweight FocusTrapInertStrategy that adds a document focus event\r\n * listener to redirect focus back inside the FocusTrap.\r\n */\r\nclass EventListenerFocusTrapInertStrategy {\r\n    constructor() {\r\n        /** Focus event handler. */\r\n        this._listener = null;\r\n    }\r\n    /** Adds a document event listener that keeps focus inside the FocusTrap. */\r\n    preventFocus(focusTrap) {\r\n        // Ensure there's only one listener per document\r\n        if (this._listener) {\r\n            focusTrap._document.removeEventListener('focus', this._listener, true);\r\n        }\r\n        this._listener = (e) => this._trapFocus(focusTrap, e);\r\n        focusTrap._ngZone.runOutsideAngular(() => {\r\n            focusTrap._document.addEventListener('focus', this._listener, true);\r\n        });\r\n    }\r\n    /** Removes the event listener added in preventFocus. */\r\n    allowFocus(focusTrap) {\r\n        if (!this._listener) {\r\n            return;\r\n        }\r\n        focusTrap._document.removeEventListener('focus', this._listener, true);\r\n        this._listener = null;\r\n    }\r\n    /**\r\n     * Refocuses the first element in the FocusTrap if the focus event target was outside\r\n     * the FocusTrap.\r\n     *\r\n     * This is an event listener callback. The event listener is added in runOutsideAngular,\r\n     * so all this code runs outside Angular as well.\r\n     */\r\n    _trapFocus(focusTrap, event) {\r\n        const target = event.target;\r\n        const focusTrapRoot = focusTrap._element;\r\n        // Don't refocus if target was in an overlay, because the overlay might be associated\r\n        // with an element inside the FocusTrap, ex. mat-select.\r\n        if (target && !focusTrapRoot.contains(target) && !target.closest?.('div.cdk-overlay-pane')) {\r\n            // Some legacy FocusTrap usages have logic that focuses some element on the page\r\n            // just before FocusTrap is destroyed. For backwards compatibility, wait\r\n            // to be sure FocusTrap is still enabled before refocusing.\r\n            setTimeout(() => {\r\n                // Check whether focus wasn't put back into the focus trap while the timeout was pending.\r\n                if (focusTrap.enabled && !focusTrapRoot.contains(focusTrap._document.activeElement)) {\r\n                    focusTrap.focusFirstTabbableElement();\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** Injectable that ensures only the most recently enabled FocusTrap is active. */\r\nclass FocusTrapManager {\r\n    constructor() {\r\n        // A stack of the FocusTraps on the page. Only the FocusTrap at the\r\n        // top of the stack is active.\r\n        this._focusTrapStack = [];\r\n    }\r\n    /**\r\n     * Disables the FocusTrap at the top of the stack, and then pushes\r\n     * the new FocusTrap onto the stack.\r\n     */\r\n    register(focusTrap) {\r\n        // Dedupe focusTraps that register multiple times.\r\n        this._focusTrapStack = this._focusTrapStack.filter(ft => ft !== focusTrap);\r\n        let stack = this._focusTrapStack;\r\n        if (stack.length) {\r\n            stack[stack.length - 1]._disable();\r\n        }\r\n        stack.push(focusTrap);\r\n        focusTrap._enable();\r\n    }\r\n    /**\r\n     * Removes the FocusTrap from the stack, and activates the\r\n     * FocusTrap that is the new top of the stack.\r\n     */\r\n    deregister(focusTrap) {\r\n        focusTrap._disable();\r\n        const stack = this._focusTrapStack;\r\n        const i = stack.indexOf(focusTrap);\r\n        if (i !== -1) {\r\n            stack.splice(i, 1);\r\n            if (stack.length) {\r\n                stack[stack.length - 1]._enable();\r\n            }\r\n        }\r\n    }\r\n}\r\nFocusTrapManager.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: FocusTrapManager, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\r\nFocusTrapManager.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: FocusTrapManager, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: FocusTrapManager, decorators: [{\r\n            type: Injectable,\r\n            args: [{ providedIn: 'root' }]\r\n        }] });\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** Factory that allows easy instantiation of configurable focus traps. */\r\nclass ConfigurableFocusTrapFactory {\r\n    constructor(_checker, _ngZone, _focusTrapManager, _document, _inertStrategy) {\r\n        this._checker = _checker;\r\n        this._ngZone = _ngZone;\r\n        this._focusTrapManager = _focusTrapManager;\r\n        this._document = _document;\r\n        // TODO split up the strategies into different modules, similar to DateAdapter.\r\n        this._inertStrategy = _inertStrategy || new EventListenerFocusTrapInertStrategy();\r\n    }\r\n    create(element, config = { defer: false }) {\r\n        let configObject;\r\n        if (typeof config === 'boolean') {\r\n            configObject = { defer: config };\r\n        }\r\n        else {\r\n            configObject = config;\r\n        }\r\n        return new ConfigurableFocusTrap(element, this._checker, this._ngZone, this._document, this._focusTrapManager, this._inertStrategy, configObject);\r\n    }\r\n}\r\nConfigurableFocusTrapFactory.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: ConfigurableFocusTrapFactory, deps: [{ token: InteractivityChecker }, { token: i0.NgZone }, { token: FocusTrapManager }, { token: DOCUMENT }, { token: FOCUS_TRAP_INERT_STRATEGY, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nConfigurableFocusTrapFactory.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: ConfigurableFocusTrapFactory, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: ConfigurableFocusTrapFactory, decorators: [{\r\n            type: Injectable,\r\n            args: [{ providedIn: 'root' }]\r\n        }], ctorParameters: function () { return [{ type: InteractivityChecker }, { type: i0.NgZone }, { type: FocusTrapManager }, { type: undefined, decorators: [{\r\n                    type: Inject,\r\n                    args: [DOCUMENT]\r\n                }] }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [FOCUS_TRAP_INERT_STRATEGY]\r\n                }] }]; } });\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** Gets whether an event could be a faked `mousedown` event dispatched by a screen reader. */\r\nfunction isFakeMousedownFromScreenReader(event) {\r\n    // Some screen readers will dispatch a fake `mousedown` event when pressing enter or space on\r\n    // a clickable element. We can distinguish these events when both `offsetX` and `offsetY` are\r\n    // zero or `event.buttons` is zero, depending on the browser:\r\n    // - `event.buttons` works on Firefox, but fails on Chrome.\r\n    // - `offsetX` and `offsetY` work on Chrome, but fail on Firefox.\r\n    // Note that there's an edge case where the user could click the 0x0 spot of the\r\n    // screen themselves, but that is unlikely to contain interactive elements.\r\n    return event.buttons === 0 || (event.offsetX === 0 && event.offsetY === 0);\r\n}\r\n/** Gets whether an event could be a faked `touchstart` event dispatched by a screen reader. */\r\nfunction isFakeTouchstartFromScreenReader(event) {\r\n    const touch = (event.touches && event.touches[0]) || (event.changedTouches && event.changedTouches[0]);\r\n    // A fake `touchstart` can be distinguished from a real one by looking at the `identifier`\r\n    // which is typically >= 0 on a real device versus -1 from a screen reader. Just to be safe,\r\n    // we can also look at `radiusX` and `radiusY`. This behavior was observed against a Windows 10\r\n    // device with a touch screen running NVDA v2020.4 and Firefox 85 or Chrome 88.\r\n    return (!!touch &&\r\n        touch.identifier === -1 &&\r\n        (touch.radiusX == null || touch.radiusX === 1) &&\r\n        (touch.radiusY == null || touch.radiusY === 1));\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Injectable options for the InputModalityDetector. These are shallowly merged with the default\r\n * options.\r\n */\r\nconst INPUT_MODALITY_DETECTOR_OPTIONS = new InjectionToken('cdk-input-modality-detector-options');\r\n/**\r\n * Default options for the InputModalityDetector.\r\n *\r\n * Modifier keys are ignored by default (i.e. when pressed won't cause the service to detect\r\n * keyboard input modality) for two reasons:\r\n *\r\n * 1. Modifier keys are commonly used with mouse to perform actions such as 'right click' or 'open\r\n *    in new tab', and are thus less representative of actual keyboard interaction.\r\n * 2. VoiceOver triggers some keyboard events when linearly navigating with Control + Option (but\r\n *    confusingly not with Caps Lock). Thus, to have parity with other screen readers, we ignore\r\n *    these keys so as to not update the input modality.\r\n *\r\n * Note that we do not by default ignore the right Meta key on Safari because it has the same key\r\n * code as the ContextMenu key on other browsers. When we switch to using event.key, we can\r\n * distinguish between the two.\r\n */\r\nconst INPUT_MODALITY_DETECTOR_DEFAULT_OPTIONS = {\r\n    ignoreKeys: [ALT, CONTROL, MAC_META, META, SHIFT],\r\n};\r\n/**\r\n * The amount of time needed to pass after a touchstart event in order for a subsequent mousedown\r\n * event to be attributed as mouse and not touch.\r\n *\r\n * This is the value used by AngularJS Material. Through trial and error (on iPhone 6S) they found\r\n * that a value of around 650ms seems appropriate.\r\n */\r\nconst TOUCH_BUFFER_MS = 650;\r\n/**\r\n * Event listener options that enable capturing and also mark the listener as passive if the browser\r\n * supports it.\r\n */\r\nconst modalityEventListenerOptions = normalizePassiveListenerOptions({\r\n    passive: true,\r\n    capture: true,\r\n});\r\n/**\r\n * Service that detects the user's input modality.\r\n *\r\n * This service does not update the input modality when a user navigates with a screen reader\r\n * (e.g. linear navigation with VoiceOver, object navigation / browse mode with NVDA, virtual PC\r\n * cursor mode with JAWS). This is in part due to technical limitations (i.e. keyboard events do not\r\n * fire as expected in these modes) but is also arguably the correct behavior. Navigating with a\r\n * screen reader is akin to visually scanning a page, and should not be interpreted as actual user\r\n * input interaction.\r\n *\r\n * When a user is not navigating but *interacting* with a screen reader, this service attempts to\r\n * update the input modality to keyboard, but in general this service's behavior is largely\r\n * undefined.\r\n */\r\nclass InputModalityDetector {\r\n    constructor(_platform, ngZone, document, options) {\r\n        this._platform = _platform;\r\n        /**\r\n         * The most recently detected input modality event target. Is null if no input modality has been\r\n         * detected or if the associated event target is null for some unknown reason.\r\n         */\r\n        this._mostRecentTarget = null;\r\n        /** The underlying BehaviorSubject that emits whenever an input modality is detected. */\r\n        this._modality = new BehaviorSubject(null);\r\n        /**\r\n         * The timestamp of the last touch input modality. Used to determine whether mousedown events\r\n         * should be attributed to mouse or touch.\r\n         */\r\n        this._lastTouchMs = 0;\r\n        /**\r\n         * Handles keydown events. Must be an arrow function in order to preserve the context when it gets\r\n         * bound.\r\n         */\r\n        this._onKeydown = (event) => {\r\n            // If this is one of the keys we should ignore, then ignore it and don't update the input\r\n            // modality to keyboard.\r\n            if (this._options?.ignoreKeys?.some(keyCode => keyCode === event.keyCode)) {\r\n                return;\r\n            }\r\n            this._modality.next('keyboard');\r\n            this._mostRecentTarget = _getEventTarget(event);\r\n        };\r\n        /**\r\n         * Handles mousedown events. Must be an arrow function in order to preserve the context when it\r\n         * gets bound.\r\n         */\r\n        this._onMousedown = (event) => {\r\n            // Touches trigger both touch and mouse events, so we need to distinguish between mouse events\r\n            // that were triggered via mouse vs touch. To do so, check if the mouse event occurs closely\r\n            // after the previous touch event.\r\n            if (Date.now() - this._lastTouchMs < TOUCH_BUFFER_MS) {\r\n                return;\r\n            }\r\n            // Fake mousedown events are fired by some screen readers when controls are activated by the\r\n            // screen reader. Attribute them to keyboard input modality.\r\n            this._modality.next(isFakeMousedownFromScreenReader(event) ? 'keyboard' : 'mouse');\r\n            this._mostRecentTarget = _getEventTarget(event);\r\n        };\r\n        /**\r\n         * Handles touchstart events. Must be an arrow function in order to preserve the context when it\r\n         * gets bound.\r\n         */\r\n        this._onTouchstart = (event) => {\r\n            // Same scenario as mentioned in _onMousedown, but on touch screen devices, fake touchstart\r\n            // events are fired. Again, attribute to keyboard input modality.\r\n            if (isFakeTouchstartFromScreenReader(event)) {\r\n                this._modality.next('keyboard');\r\n                return;\r\n            }\r\n            // Store the timestamp of this touch event, as it's used to distinguish between mouse events\r\n            // triggered via mouse vs touch.\r\n            this._lastTouchMs = Date.now();\r\n            this._modality.next('touch');\r\n            this._mostRecentTarget = _getEventTarget(event);\r\n        };\r\n        this._options = {\r\n            ...INPUT_MODALITY_DETECTOR_DEFAULT_OPTIONS,\r\n            ...options,\r\n        };\r\n        // Skip the first emission as it's null.\r\n        this.modalityDetected = this._modality.pipe(skip(1));\r\n        this.modalityChanged = this.modalityDetected.pipe(distinctUntilChanged());\r\n        // If we're not in a browser, this service should do nothing, as there's no relevant input\r\n        // modality to detect.\r\n        if (_platform.isBrowser) {\r\n            ngZone.runOutsideAngular(() => {\r\n                document.addEventListener('keydown', this._onKeydown, modalityEventListenerOptions);\r\n                document.addEventListener('mousedown', this._onMousedown, modalityEventListenerOptions);\r\n                document.addEventListener('touchstart', this._onTouchstart, modalityEventListenerOptions);\r\n            });\r\n        }\r\n    }\r\n    /** The most recently detected input modality. */\r\n    get mostRecentModality() {\r\n        return this._modality.value;\r\n    }\r\n    ngOnDestroy() {\r\n        this._modality.complete();\r\n        if (this._platform.isBrowser) {\r\n            document.removeEventListener('keydown', this._onKeydown, modalityEventListenerOptions);\r\n            document.removeEventListener('mousedown', this._onMousedown, modalityEventListenerOptions);\r\n            document.removeEventListener('touchstart', this._onTouchstart, modalityEventListenerOptions);\r\n        }\r\n    }\r\n}\r\nInputModalityDetector.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: InputModalityDetector, deps: [{ token: i1.Platform }, { token: i0.NgZone }, { token: DOCUMENT }, { token: INPUT_MODALITY_DETECTOR_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nInputModalityDetector.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: InputModalityDetector, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: InputModalityDetector, decorators: [{\r\n            type: Injectable,\r\n            args: [{ providedIn: 'root' }]\r\n        }], ctorParameters: function () { return [{ type: i1.Platform }, { type: i0.NgZone }, { type: Document, decorators: [{\r\n                    type: Inject,\r\n                    args: [DOCUMENT]\r\n                }] }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [INPUT_MODALITY_DETECTOR_OPTIONS]\r\n                }] }]; } });\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst LIVE_ANNOUNCER_ELEMENT_TOKEN = new InjectionToken('liveAnnouncerElement', {\r\n    providedIn: 'root',\r\n    factory: LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY,\r\n});\r\n/** @docs-private */\r\nfunction LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY() {\r\n    return null;\r\n}\r\n/** Injection token that can be used to configure the default options for the LiveAnnouncer. */\r\nconst LIVE_ANNOUNCER_DEFAULT_OPTIONS = new InjectionToken('LIVE_ANNOUNCER_DEFAULT_OPTIONS');\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nclass LiveAnnouncer {\r\n    constructor(elementToken, _ngZone, _document, _defaultOptions) {\r\n        this._ngZone = _ngZone;\r\n        this._defaultOptions = _defaultOptions;\r\n        // We inject the live element and document as `any` because the constructor signature cannot\r\n        // reference browser globals (HTMLElement, Document) on non-browser environments, since having\r\n        // a class decorator causes TypeScript to preserve the constructor signature types.\r\n        this._document = _document;\r\n        this._liveElement = elementToken || this._createLiveElement();\r\n    }\r\n    announce(message, ...args) {\r\n        const defaultOptions = this._defaultOptions;\r\n        let politeness;\r\n        let duration;\r\n        if (args.length === 1 && typeof args[0] === 'number') {\r\n            duration = args[0];\r\n        }\r\n        else {\r\n            [politeness, duration] = args;\r\n        }\r\n        this.clear();\r\n        clearTimeout(this._previousTimeout);\r\n        if (!politeness) {\r\n            politeness =\r\n                defaultOptions && defaultOptions.politeness ? defaultOptions.politeness : 'polite';\r\n        }\r\n        if (duration == null && defaultOptions) {\r\n            duration = defaultOptions.duration;\r\n        }\r\n        // TODO: ensure changing the politeness works on all environments we support.\r\n        this._liveElement.setAttribute('aria-live', politeness);\r\n        // This 100ms timeout is necessary for some browser + screen-reader combinations:\r\n        // - Both JAWS and NVDA over IE11 will not announce anything without a non-zero timeout.\r\n        // - With Chrome and IE11 with NVDA or JAWS, a repeated (identical) message won't be read a\r\n        //   second time without clearing and then using a non-zero delay.\r\n        // (using JAWS 17 at time of this writing).\r\n        return this._ngZone.runOutsideAngular(() => {\r\n            if (!this._currentPromise) {\r\n                this._currentPromise = new Promise(resolve => (this._currentResolve = resolve));\r\n            }\r\n            clearTimeout(this._previousTimeout);\r\n            this._previousTimeout = setTimeout(() => {\r\n                this._liveElement.textContent = message;\r\n                if (typeof duration === 'number') {\r\n                    this._previousTimeout = setTimeout(() => this.clear(), duration);\r\n                }\r\n                this._currentResolve();\r\n                this._currentPromise = this._currentResolve = undefined;\r\n            }, 100);\r\n            return this._currentPromise;\r\n        });\r\n    }\r\n    /**\r\n     * Clears the current text from the announcer element. Can be used to prevent\r\n     * screen readers from reading the text out again while the user is going\r\n     * through the page landmarks.\r\n     */\r\n    clear() {\r\n        if (this._liveElement) {\r\n            this._liveElement.textContent = '';\r\n        }\r\n    }\r\n    ngOnDestroy() {\r\n        clearTimeout(this._previousTimeout);\r\n        this._liveElement?.remove();\r\n        this._liveElement = null;\r\n        this._currentResolve?.();\r\n        this._currentPromise = this._currentResolve = undefined;\r\n    }\r\n    _createLiveElement() {\r\n        const elementClass = 'cdk-live-announcer-element';\r\n        const previousElements = this._document.getElementsByClassName(elementClass);\r\n        const liveEl = this._document.createElement('div');\r\n        // Remove any old containers. This can happen when coming in from a server-side-rendered page.\r\n        for (let i = 0; i < previousElements.length; i++) {\r\n            previousElements[i].remove();\r\n        }\r\n        liveEl.classList.add(elementClass);\r\n        liveEl.classList.add('cdk-visually-hidden');\r\n        liveEl.setAttribute('aria-atomic', 'true');\r\n        liveEl.setAttribute('aria-live', 'polite');\r\n        this._document.body.appendChild(liveEl);\r\n        return liveEl;\r\n    }\r\n}\r\nLiveAnnouncer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: LiveAnnouncer, deps: [{ token: LIVE_ANNOUNCER_ELEMENT_TOKEN, optional: true }, { token: i0.NgZone }, { token: DOCUMENT }, { token: LIVE_ANNOUNCER_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nLiveAnnouncer.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: LiveAnnouncer, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: LiveAnnouncer, decorators: [{\r\n            type: Injectable,\r\n            args: [{ providedIn: 'root' }]\r\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [LIVE_ANNOUNCER_ELEMENT_TOKEN]\r\n                }] }, { type: i0.NgZone }, { type: undefined, decorators: [{\r\n                    type: Inject,\r\n                    args: [DOCUMENT]\r\n                }] }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [LIVE_ANNOUNCER_DEFAULT_OPTIONS]\r\n                }] }]; } });\r\n/**\r\n * A directive that works similarly to aria-live, but uses the LiveAnnouncer to ensure compatibility\r\n * with a wider range of browsers and screen readers.\r\n */\r\nclass CdkAriaLive {\r\n    constructor(_elementRef, _liveAnnouncer, _contentObserver, _ngZone) {\r\n        this._elementRef = _elementRef;\r\n        this._liveAnnouncer = _liveAnnouncer;\r\n        this._contentObserver = _contentObserver;\r\n        this._ngZone = _ngZone;\r\n        this._politeness = 'polite';\r\n    }\r\n    /** The aria-live politeness level to use when announcing messages. */\r\n    get politeness() {\r\n        return this._politeness;\r\n    }\r\n    set politeness(value) {\r\n        this._politeness = value === 'off' || value === 'assertive' ? value : 'polite';\r\n        if (this._politeness === 'off') {\r\n            if (this._subscription) {\r\n                this._subscription.unsubscribe();\r\n                this._subscription = null;\r\n            }\r\n        }\r\n        else if (!this._subscription) {\r\n            this._subscription = this._ngZone.runOutsideAngular(() => {\r\n                return this._contentObserver.observe(this._elementRef).subscribe(() => {\r\n                    // Note that we use textContent here, rather than innerText, in order to avoid a reflow.\r\n                    const elementText = this._elementRef.nativeElement.textContent;\r\n                    // The `MutationObserver` fires also for attribute\r\n                    // changes which we don't want to announce.\r\n                    if (elementText !== this._previousAnnouncedText) {\r\n                        this._liveAnnouncer.announce(elementText, this._politeness, this.duration);\r\n                        this._previousAnnouncedText = elementText;\r\n                    }\r\n                });\r\n            });\r\n        }\r\n    }\r\n    ngOnDestroy() {\r\n        if (this._subscription) {\r\n            this._subscription.unsubscribe();\r\n        }\r\n    }\r\n}\r\nCdkAriaLive.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: CdkAriaLive, deps: [{ token: i0.ElementRef }, { token: LiveAnnouncer }, { token: i1$1.ContentObserver }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });\r\nCdkAriaLive.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0\", type: CdkAriaLive, selector: \"[cdkAriaLive]\", inputs: { politeness: [\"cdkAriaLive\", \"politeness\"], duration: [\"cdkAriaLiveDuration\", \"duration\"] }, exportAs: [\"cdkAriaLive\"], ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: CdkAriaLive, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: '[cdkAriaLive]',\r\n                    exportAs: 'cdkAriaLive',\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: LiveAnnouncer }, { type: i1$1.ContentObserver }, { type: i0.NgZone }]; }, propDecorators: { politeness: [{\r\n                type: Input,\r\n                args: ['cdkAriaLive']\r\n            }], duration: [{\r\n                type: Input,\r\n                args: ['cdkAriaLiveDuration']\r\n            }] } });\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** InjectionToken for FocusMonitorOptions. */\r\nconst FOCUS_MONITOR_DEFAULT_OPTIONS = new InjectionToken('cdk-focus-monitor-default-options');\r\n/**\r\n * Event listener options that enable capturing and also\r\n * mark the listener as passive if the browser supports it.\r\n */\r\nconst captureEventListenerOptions = normalizePassiveListenerOptions({\r\n    passive: true,\r\n    capture: true,\r\n});\r\n/** Monitors mouse and keyboard events to determine the cause of focus events. */\r\nclass FocusMonitor {\r\n    constructor(_ngZone, _platform, _inputModalityDetector, \r\n    /** @breaking-change 11.0.0 make document required */\r\n    document, options) {\r\n        this._ngZone = _ngZone;\r\n        this._platform = _platform;\r\n        this._inputModalityDetector = _inputModalityDetector;\r\n        /** The focus origin that the next focus event is a result of. */\r\n        this._origin = null;\r\n        /** Whether the window has just been focused. */\r\n        this._windowFocused = false;\r\n        /**\r\n         * Whether the origin was determined via a touch interaction. Necessary as properly attributing\r\n         * focus events to touch interactions requires special logic.\r\n         */\r\n        this._originFromTouchInteraction = false;\r\n        /** Map of elements being monitored to their info. */\r\n        this._elementInfo = new Map();\r\n        /** The number of elements currently being monitored. */\r\n        this._monitoredElementCount = 0;\r\n        /**\r\n         * Keeps track of the root nodes to which we've currently bound a focus/blur handler,\r\n         * as well as the number of monitored elements that they contain. We have to treat focus/blur\r\n         * handlers differently from the rest of the events, because the browser won't emit events\r\n         * to the document when focus moves inside of a shadow root.\r\n         */\r\n        this._rootNodeFocusListenerCount = new Map();\r\n        /**\r\n         * Event listener for `focus` events on the window.\r\n         * Needs to be an arrow function in order to preserve the context when it gets bound.\r\n         */\r\n        this._windowFocusListener = () => {\r\n            // Make a note of when the window regains focus, so we can\r\n            // restore the origin info for the focused element.\r\n            this._windowFocused = true;\r\n            this._windowFocusTimeoutId = window.setTimeout(() => (this._windowFocused = false));\r\n        };\r\n        /** Subject for stopping our InputModalityDetector subscription. */\r\n        this._stopInputModalityDetector = new Subject();\r\n        /**\r\n         * Event listener for `focus` and 'blur' events on the document.\r\n         * Needs to be an arrow function in order to preserve the context when it gets bound.\r\n         */\r\n        this._rootNodeFocusAndBlurListener = (event) => {\r\n            const target = _getEventTarget(event);\r\n            // We need to walk up the ancestor chain in order to support `checkChildren`.\r\n            for (let element = target; element; element = element.parentElement) {\r\n                if (event.type === 'focus') {\r\n                    this._onFocus(event, element);\r\n                }\r\n                else {\r\n                    this._onBlur(event, element);\r\n                }\r\n            }\r\n        };\r\n        this._document = document;\r\n        this._detectionMode = options?.detectionMode || 0 /* FocusMonitorDetectionMode.IMMEDIATE */;\r\n    }\r\n    monitor(element, checkChildren = false) {\r\n        const nativeElement = coerceElement(element);\r\n        // Do nothing if we're not on the browser platform or the passed in node isn't an element.\r\n        if (!this._platform.isBrowser || nativeElement.nodeType !== 1) {\r\n            return of(null);\r\n        }\r\n        // If the element is inside the shadow DOM, we need to bind our focus/blur listeners to\r\n        // the shadow root, rather than the `document`, because the browser won't emit focus events\r\n        // to the `document`, if focus is moving within the same shadow root.\r\n        const rootNode = _getShadowRoot(nativeElement) || this._getDocument();\r\n        const cachedInfo = this._elementInfo.get(nativeElement);\r\n        // Check if we're already monitoring this element.\r\n        if (cachedInfo) {\r\n            if (checkChildren) {\r\n                // TODO(COMP-318): this can be problematic, because it'll turn all non-checkChildren\r\n                // observers into ones that behave as if `checkChildren` was turned on. We need a more\r\n                // robust solution.\r\n                cachedInfo.checkChildren = true;\r\n            }\r\n            return cachedInfo.subject;\r\n        }\r\n        // Create monitored element info.\r\n        const info = {\r\n            checkChildren: checkChildren,\r\n            subject: new Subject(),\r\n            rootNode,\r\n        };\r\n        this._elementInfo.set(nativeElement, info);\r\n        this._registerGlobalListeners(info);\r\n        return info.subject;\r\n    }\r\n    stopMonitoring(element) {\r\n        const nativeElement = coerceElement(element);\r\n        const elementInfo = this._elementInfo.get(nativeElement);\r\n        if (elementInfo) {\r\n            elementInfo.subject.complete();\r\n            this._setClasses(nativeElement);\r\n            this._elementInfo.delete(nativeElement);\r\n            this._removeGlobalListeners(elementInfo);\r\n        }\r\n    }\r\n    focusVia(element, origin, options) {\r\n        const nativeElement = coerceElement(element);\r\n        const focusedElement = this._getDocument().activeElement;\r\n        // If the element is focused already, calling `focus` again won't trigger the event listener\r\n        // which means that the focus classes won't be updated. If that's the case, update the classes\r\n        // directly without waiting for an event.\r\n        if (nativeElement === focusedElement) {\r\n            this._getClosestElementsInfo(nativeElement).forEach(([currentElement, info]) => this._originChanged(currentElement, origin, info));\r\n        }\r\n        else {\r\n            this._setOrigin(origin);\r\n            // `focus` isn't available on the server\r\n            if (typeof nativeElement.focus === 'function') {\r\n                nativeElement.focus(options);\r\n            }\r\n        }\r\n    }\r\n    ngOnDestroy() {\r\n        this._elementInfo.forEach((_info, element) => this.stopMonitoring(element));\r\n    }\r\n    /** Access injected document if available or fallback to global document reference */\r\n    _getDocument() {\r\n        return this._document || document;\r\n    }\r\n    /** Use defaultView of injected document if available or fallback to global window reference */\r\n    _getWindow() {\r\n        const doc = this._getDocument();\r\n        return doc.defaultView || window;\r\n    }\r\n    _getFocusOrigin(focusEventTarget) {\r\n        if (this._origin) {\r\n            // If the origin was realized via a touch interaction, we need to perform additional checks\r\n            // to determine whether the focus origin should be attributed to touch or program.\r\n            if (this._originFromTouchInteraction) {\r\n                return this._shouldBeAttributedToTouch(focusEventTarget) ? 'touch' : 'program';\r\n            }\r\n            else {\r\n                return this._origin;\r\n            }\r\n        }\r\n        // If the window has just regained focus, we can restore the most recent origin from before the\r\n        // window blurred. Otherwise, we've reached the point where we can't identify the source of the\r\n        // focus. This typically means one of two things happened:\r\n        //\r\n        // 1) The element was programmatically focused, or\r\n        // 2) The element was focused via screen reader navigation (which generally doesn't fire\r\n        //    events).\r\n        //\r\n        // Because we can't distinguish between these two cases, we default to setting `program`.\r\n        if (this._windowFocused && this._lastFocusOrigin) {\r\n            return this._lastFocusOrigin;\r\n        }\r\n        // If the interaction is coming from an input label, we consider it a mouse interactions.\r\n        // This is a special case where focus moves on `click`, rather than `mousedown` which breaks\r\n        // our detection, because all our assumptions are for `mousedown`. We need to handle this\r\n        // special case, because it's very common for checkboxes and radio buttons.\r\n        if (focusEventTarget && this._isLastInteractionFromInputLabel(focusEventTarget)) {\r\n            return 'mouse';\r\n        }\r\n        return 'program';\r\n    }\r\n    /**\r\n     * Returns whether the focus event should be attributed to touch. Recall that in IMMEDIATE mode, a\r\n     * touch origin isn't immediately reset at the next tick (see _setOrigin). This means that when we\r\n     * handle a focus event following a touch interaction, we need to determine whether (1) the focus\r\n     * event was directly caused by the touch interaction or (2) the focus event was caused by a\r\n     * subsequent programmatic focus call triggered by the touch interaction.\r\n     * @param focusEventTarget The target of the focus event under examination.\r\n     */\r\n    _shouldBeAttributedToTouch(focusEventTarget) {\r\n        // Please note that this check is not perfect. Consider the following edge case:\r\n        //\r\n        // <div #parent tabindex=\"0\">\r\n        //   <div #child tabindex=\"0\" (click)=\"#parent.focus()\"></div>\r\n        // </div>\r\n        //\r\n        // Suppose there is a FocusMonitor in IMMEDIATE mode attached to #parent. When the user touches\r\n        // #child, #parent is programmatically focused. This code will attribute the focus to touch\r\n        // instead of program. This is a relatively minor edge-case that can be worked around by using\r\n        // focusVia(parent, 'program') to focus #parent.\r\n        return (this._detectionMode === 1 /* FocusMonitorDetectionMode.EVENTUAL */ ||\r\n            !!focusEventTarget?.contains(this._inputModalityDetector._mostRecentTarget));\r\n    }\r\n    /**\r\n     * Sets the focus classes on the element based on the given focus origin.\r\n     * @param element The element to update the classes on.\r\n     * @param origin The focus origin.\r\n     */\r\n    _setClasses(element, origin) {\r\n        element.classList.toggle('cdk-focused', !!origin);\r\n        element.classList.toggle('cdk-touch-focused', origin === 'touch');\r\n        element.classList.toggle('cdk-keyboard-focused', origin === 'keyboard');\r\n        element.classList.toggle('cdk-mouse-focused', origin === 'mouse');\r\n        element.classList.toggle('cdk-program-focused', origin === 'program');\r\n    }\r\n    /**\r\n     * Updates the focus origin. If we're using immediate detection mode, we schedule an async\r\n     * function to clear the origin at the end of a timeout. The duration of the timeout depends on\r\n     * the origin being set.\r\n     * @param origin The origin to set.\r\n     * @param isFromInteraction Whether we are setting the origin from an interaction event.\r\n     */\r\n    _setOrigin(origin, isFromInteraction = false) {\r\n        this._ngZone.runOutsideAngular(() => {\r\n            this._origin = origin;\r\n            this._originFromTouchInteraction = origin === 'touch' && isFromInteraction;\r\n            // If we're in IMMEDIATE mode, reset the origin at the next tick (or in `TOUCH_BUFFER_MS` ms\r\n            // for a touch event). We reset the origin at the next tick because Firefox focuses one tick\r\n            // after the interaction event. We wait `TOUCH_BUFFER_MS` ms before resetting the origin for\r\n            // a touch event because when a touch event is fired, the associated focus event isn't yet in\r\n            // the event queue. Before doing so, clear any pending timeouts.\r\n            if (this._detectionMode === 0 /* FocusMonitorDetectionMode.IMMEDIATE */) {\r\n                clearTimeout(this._originTimeoutId);\r\n                const ms = this._originFromTouchInteraction ? TOUCH_BUFFER_MS : 1;\r\n                this._originTimeoutId = setTimeout(() => (this._origin = null), ms);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Handles focus events on a registered element.\r\n     * @param event The focus event.\r\n     * @param element The monitored element.\r\n     */\r\n    _onFocus(event, element) {\r\n        // NOTE(mmalerba): We currently set the classes based on the focus origin of the most recent\r\n        // focus event affecting the monitored element. If we want to use the origin of the first event\r\n        // instead we should check for the cdk-focused class here and return if the element already has\r\n        // it. (This only matters for elements that have includesChildren = true).\r\n        // If we are not counting child-element-focus as focused, make sure that the event target is the\r\n        // monitored element itself.\r\n        const elementInfo = this._elementInfo.get(element);\r\n        const focusEventTarget = _getEventTarget(event);\r\n        if (!elementInfo || (!elementInfo.checkChildren && element !== focusEventTarget)) {\r\n            return;\r\n        }\r\n        this._originChanged(element, this._getFocusOrigin(focusEventTarget), elementInfo);\r\n    }\r\n    /**\r\n     * Handles blur events on a registered element.\r\n     * @param event The blur event.\r\n     * @param element The monitored element.\r\n     */\r\n    _onBlur(event, element) {\r\n        // If we are counting child-element-focus as focused, make sure that we aren't just blurring in\r\n        // order to focus another child of the monitored element.\r\n        const elementInfo = this._elementInfo.get(element);\r\n        if (!elementInfo ||\r\n            (elementInfo.checkChildren &&\r\n                event.relatedTarget instanceof Node &&\r\n                element.contains(event.relatedTarget))) {\r\n            return;\r\n        }\r\n        this._setClasses(element);\r\n        this._emitOrigin(elementInfo, null);\r\n    }\r\n    _emitOrigin(info, origin) {\r\n        if (info.subject.observers.length) {\r\n            this._ngZone.run(() => info.subject.next(origin));\r\n        }\r\n    }\r\n    _registerGlobalListeners(elementInfo) {\r\n        if (!this._platform.isBrowser) {\r\n            return;\r\n        }\r\n        const rootNode = elementInfo.rootNode;\r\n        const rootNodeFocusListeners = this._rootNodeFocusListenerCount.get(rootNode) || 0;\r\n        if (!rootNodeFocusListeners) {\r\n            this._ngZone.runOutsideAngular(() => {\r\n                rootNode.addEventListener('focus', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\r\n                rootNode.addEventListener('blur', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\r\n            });\r\n        }\r\n        this._rootNodeFocusListenerCount.set(rootNode, rootNodeFocusListeners + 1);\r\n        // Register global listeners when first element is monitored.\r\n        if (++this._monitoredElementCount === 1) {\r\n            // Note: we listen to events in the capture phase so we\r\n            // can detect them even if the user stops propagation.\r\n            this._ngZone.runOutsideAngular(() => {\r\n                const window = this._getWindow();\r\n                window.addEventListener('focus', this._windowFocusListener);\r\n            });\r\n            // The InputModalityDetector is also just a collection of global listeners.\r\n            this._inputModalityDetector.modalityDetected\r\n                .pipe(takeUntil(this._stopInputModalityDetector))\r\n                .subscribe(modality => {\r\n                this._setOrigin(modality, true /* isFromInteraction */);\r\n            });\r\n        }\r\n    }\r\n    _removeGlobalListeners(elementInfo) {\r\n        const rootNode = elementInfo.rootNode;\r\n        if (this._rootNodeFocusListenerCount.has(rootNode)) {\r\n            const rootNodeFocusListeners = this._rootNodeFocusListenerCount.get(rootNode);\r\n            if (rootNodeFocusListeners > 1) {\r\n                this._rootNodeFocusListenerCount.set(rootNode, rootNodeFocusListeners - 1);\r\n            }\r\n            else {\r\n                rootNode.removeEventListener('focus', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\r\n                rootNode.removeEventListener('blur', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\r\n                this._rootNodeFocusListenerCount.delete(rootNode);\r\n            }\r\n        }\r\n        // Unregister global listeners when last element is unmonitored.\r\n        if (!--this._monitoredElementCount) {\r\n            const window = this._getWindow();\r\n            window.removeEventListener('focus', this._windowFocusListener);\r\n            // Equivalently, stop our InputModalityDetector subscription.\r\n            this._stopInputModalityDetector.next();\r\n            // Clear timeouts for all potentially pending timeouts to prevent the leaks.\r\n            clearTimeout(this._windowFocusTimeoutId);\r\n            clearTimeout(this._originTimeoutId);\r\n        }\r\n    }\r\n    /** Updates all the state on an element once its focus origin has changed. */\r\n    _originChanged(element, origin, elementInfo) {\r\n        this._setClasses(element, origin);\r\n        this._emitOrigin(elementInfo, origin);\r\n        this._lastFocusOrigin = origin;\r\n    }\r\n    /**\r\n     * Collects the `MonitoredElementInfo` of a particular element and\r\n     * all of its ancestors that have enabled `checkChildren`.\r\n     * @param element Element from which to start the search.\r\n     */\r\n    _getClosestElementsInfo(element) {\r\n        const results = [];\r\n        this._elementInfo.forEach((info, currentElement) => {\r\n            if (currentElement === element || (info.checkChildren && currentElement.contains(element))) {\r\n                results.push([currentElement, info]);\r\n            }\r\n        });\r\n        return results;\r\n    }\r\n    /**\r\n     * Returns whether an interaction is likely to have come from the user clicking the `label` of\r\n     * an `input` or `textarea` in order to focus it.\r\n     * @param focusEventTarget Target currently receiving focus.\r\n     */\r\n    _isLastInteractionFromInputLabel(focusEventTarget) {\r\n        const { _mostRecentTarget: mostRecentTarget, mostRecentModality } = this._inputModalityDetector;\r\n        // If the last interaction used the mouse on an element contained by one of the labels\r\n        // of an `input`/`textarea` that is currently focused, it is very likely that the\r\n        // user redirected focus using the label.\r\n        if (mostRecentModality !== 'mouse' ||\r\n            !mostRecentTarget ||\r\n            mostRecentTarget === focusEventTarget ||\r\n            (focusEventTarget.nodeName !== 'INPUT' && focusEventTarget.nodeName !== 'TEXTAREA') ||\r\n            focusEventTarget.disabled) {\r\n            return false;\r\n        }\r\n        const labels = focusEventTarget.labels;\r\n        if (labels) {\r\n            for (let i = 0; i < labels.length; i++) {\r\n                if (labels[i].contains(mostRecentTarget)) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\nFocusMonitor.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: FocusMonitor, deps: [{ token: i0.NgZone }, { token: i1.Platform }, { token: InputModalityDetector }, { token: DOCUMENT, optional: true }, { token: FOCUS_MONITOR_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nFocusMonitor.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: FocusMonitor, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: FocusMonitor, decorators: [{\r\n            type: Injectable,\r\n            args: [{ providedIn: 'root' }]\r\n        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i1.Platform }, { type: InputModalityDetector }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [DOCUMENT]\r\n                }] }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [FOCUS_MONITOR_DEFAULT_OPTIONS]\r\n                }] }]; } });\r\n/**\r\n * Directive that determines how a particular element was focused (via keyboard, mouse, touch, or\r\n * programmatically) and adds corresponding classes to the element.\r\n *\r\n * There are two variants of this directive:\r\n * 1) cdkMonitorElementFocus: does not consider an element to be focused if one of its children is\r\n *    focused.\r\n * 2) cdkMonitorSubtreeFocus: considers an element focused if it or any of its children are focused.\r\n */\r\nclass CdkMonitorFocus {\r\n    constructor(_elementRef, _focusMonitor) {\r\n        this._elementRef = _elementRef;\r\n        this._focusMonitor = _focusMonitor;\r\n        this._focusOrigin = null;\r\n        this.cdkFocusChange = new EventEmitter();\r\n    }\r\n    get focusOrigin() {\r\n        return this._focusOrigin;\r\n    }\r\n    ngAfterViewInit() {\r\n        const element = this._elementRef.nativeElement;\r\n        this._monitorSubscription = this._focusMonitor\r\n            .monitor(element, element.nodeType === 1 && element.hasAttribute('cdkMonitorSubtreeFocus'))\r\n            .subscribe(origin => {\r\n            this._focusOrigin = origin;\r\n            this.cdkFocusChange.emit(origin);\r\n        });\r\n    }\r\n    ngOnDestroy() {\r\n        this._focusMonitor.stopMonitoring(this._elementRef);\r\n        if (this._monitorSubscription) {\r\n            this._monitorSubscription.unsubscribe();\r\n        }\r\n    }\r\n}\r\nCdkMonitorFocus.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: CdkMonitorFocus, deps: [{ token: i0.ElementRef }, { token: FocusMonitor }], target: i0.ɵɵFactoryTarget.Directive });\r\nCdkMonitorFocus.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0\", type: CdkMonitorFocus, selector: \"[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]\", outputs: { cdkFocusChange: \"cdkFocusChange\" }, exportAs: [\"cdkMonitorFocus\"], ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: CdkMonitorFocus, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: '[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]',\r\n                    exportAs: 'cdkMonitorFocus',\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: FocusMonitor }]; }, propDecorators: { cdkFocusChange: [{\r\n                type: Output\r\n            }] } });\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** CSS class applied to the document body when in black-on-white high-contrast mode. */\r\nconst BLACK_ON_WHITE_CSS_CLASS = 'cdk-high-contrast-black-on-white';\r\n/** CSS class applied to the document body when in white-on-black high-contrast mode. */\r\nconst WHITE_ON_BLACK_CSS_CLASS = 'cdk-high-contrast-white-on-black';\r\n/** CSS class applied to the document body when in high-contrast mode. */\r\nconst HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS = 'cdk-high-contrast-active';\r\n/**\r\n * Service to determine whether the browser is currently in a high-contrast-mode environment.\r\n *\r\n * Microsoft Windows supports an accessibility feature called \"High Contrast Mode\". This mode\r\n * changes the appearance of all applications, including web applications, to dramatically increase\r\n * contrast.\r\n *\r\n * IE, Edge, and Firefox currently support this mode. Chrome does not support Windows High Contrast\r\n * Mode. This service does not detect high-contrast mode as added by the Chrome \"High Contrast\"\r\n * browser extension.\r\n */\r\nclass HighContrastModeDetector {\r\n    constructor(_platform, document) {\r\n        this._platform = _platform;\r\n        this._document = document;\r\n        this._breakpointSubscription = inject(BreakpointObserver)\r\n            .observe('(forced-colors: active)')\r\n            .subscribe(() => {\r\n            if (this._hasCheckedHighContrastMode) {\r\n                this._hasCheckedHighContrastMode = false;\r\n                this._applyBodyHighContrastModeCssClasses();\r\n            }\r\n        });\r\n    }\r\n    /** Gets the current high-contrast-mode for the page. */\r\n    getHighContrastMode() {\r\n        if (!this._platform.isBrowser) {\r\n            return 0 /* HighContrastMode.NONE */;\r\n        }\r\n        // Create a test element with an arbitrary background-color that is neither black nor\r\n        // white; high-contrast mode will coerce the color to either black or white. Also ensure that\r\n        // appending the test element to the DOM does not affect layout by absolutely positioning it\r\n        const testElement = this._document.createElement('div');\r\n        testElement.style.backgroundColor = 'rgb(1,2,3)';\r\n        testElement.style.position = 'absolute';\r\n        this._document.body.appendChild(testElement);\r\n        // Get the computed style for the background color, collapsing spaces to normalize between\r\n        // browsers. Once we get this color, we no longer need the test element. Access the `window`\r\n        // via the document so we can fake it in tests. Note that we have extra null checks, because\r\n        // this logic will likely run during app bootstrap and throwing can break the entire app.\r\n        const documentWindow = this._document.defaultView || window;\r\n        const computedStyle = documentWindow && documentWindow.getComputedStyle\r\n            ? documentWindow.getComputedStyle(testElement)\r\n            : null;\r\n        const computedColor = ((computedStyle && computedStyle.backgroundColor) || '').replace(/ /g, '');\r\n        testElement.remove();\r\n        switch (computedColor) {\r\n            // Pre Windows 11 dark theme.\r\n            case 'rgb(0,0,0)':\r\n            // Windows 11 dark themes.\r\n            case 'rgb(45,50,54)':\r\n            case 'rgb(32,32,32)':\r\n                return 2 /* HighContrastMode.WHITE_ON_BLACK */;\r\n            // Pre Windows 11 light theme.\r\n            case 'rgb(255,255,255)':\r\n            // Windows 11 light theme.\r\n            case 'rgb(255,250,239)':\r\n                return 1 /* HighContrastMode.BLACK_ON_WHITE */;\r\n        }\r\n        return 0 /* HighContrastMode.NONE */;\r\n    }\r\n    ngOnDestroy() {\r\n        this._breakpointSubscription.unsubscribe();\r\n    }\r\n    /** Applies CSS classes indicating high-contrast mode to document body (browser-only). */\r\n    _applyBodyHighContrastModeCssClasses() {\r\n        if (!this._hasCheckedHighContrastMode && this._platform.isBrowser && this._document.body) {\r\n            const bodyClasses = this._document.body.classList;\r\n            bodyClasses.remove(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS, BLACK_ON_WHITE_CSS_CLASS, WHITE_ON_BLACK_CSS_CLASS);\r\n            this._hasCheckedHighContrastMode = true;\r\n            const mode = this.getHighContrastMode();\r\n            if (mode === 1 /* HighContrastMode.BLACK_ON_WHITE */) {\r\n                bodyClasses.add(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS, BLACK_ON_WHITE_CSS_CLASS);\r\n            }\r\n            else if (mode === 2 /* HighContrastMode.WHITE_ON_BLACK */) {\r\n                bodyClasses.add(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS, WHITE_ON_BLACK_CSS_CLASS);\r\n            }\r\n        }\r\n    }\r\n}\r\nHighContrastModeDetector.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: HighContrastModeDetector, deps: [{ token: i1.Platform }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\r\nHighContrastModeDetector.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: HighContrastModeDetector, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: HighContrastModeDetector, decorators: [{\r\n            type: Injectable,\r\n            args: [{ providedIn: 'root' }]\r\n        }], ctorParameters: function () { return [{ type: i1.Platform }, { type: undefined, decorators: [{\r\n                    type: Inject,\r\n                    args: [DOCUMENT]\r\n                }] }]; } });\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nclass A11yModule {\r\n    constructor(highContrastModeDetector) {\r\n        highContrastModeDetector._applyBodyHighContrastModeCssClasses();\r\n    }\r\n}\r\nA11yModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: A11yModule, deps: [{ token: HighContrastModeDetector }], target: i0.ɵɵFactoryTarget.NgModule });\r\nA11yModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.2.0\", ngImport: i0, type: A11yModule, declarations: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus], imports: [ObserversModule], exports: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus] });\r\nA11yModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: A11yModule, imports: [ObserversModule] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: A11yModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    imports: [ObserversModule],\r\n                    declarations: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus],\r\n                    exports: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus],\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: HighContrastModeDetector }]; } });\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { A11yModule, ActiveDescendantKeyManager, AriaDescriber, CDK_DESCRIBEDBY_HOST_ATTRIBUTE, CDK_DESCRIBEDBY_ID_PREFIX, CdkAriaLive, CdkMonitorFocus, CdkTrapFocus, ConfigurableFocusTrap, ConfigurableFocusTrapFactory, EventListenerFocusTrapInertStrategy, FOCUS_MONITOR_DEFAULT_OPTIONS, FOCUS_TRAP_INERT_STRATEGY, FocusKeyManager, FocusMonitor, FocusTrap, FocusTrapFactory, HighContrastModeDetector, INPUT_MODALITY_DETECTOR_DEFAULT_OPTIONS, INPUT_MODALITY_DETECTOR_OPTIONS, InputModalityDetector, InteractivityChecker, IsFocusableConfig, LIVE_ANNOUNCER_DEFAULT_OPTIONS, LIVE_ANNOUNCER_ELEMENT_TOKEN, LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY, ListKeyManager, LiveAnnouncer, MESSAGES_CONTAINER_ID, isFakeMousedownFromScreenReader, isFakeTouchstartFromScreenReader };\r\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}