{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('../Subject');\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\r\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\r\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\r\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\r\n * this method will resubscribe to the source Observable.\r\n *\r\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\r\n *\r\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\r\n * which a user can `complete` or `error`, aborting the repetition.\r\n * @return {Observable} The source Observable modified with repeat logic.\r\n * @method repeatWhen\r\n * @owner Observable\r\n */\nfunction repeatWhen(notifier) {\n  return function (source) {\n    return source.lift(new RepeatWhenOperator(notifier));\n  };\n}\nexports.repeatWhen = repeatWhen;\nvar RepeatWhenOperator = function () {\n  function RepeatWhenOperator(notifier) {\n    this.notifier = notifier;\n  }\n  RepeatWhenOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));\n  };\n  return RepeatWhenOperator;\n}();\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\nvar RepeatWhenSubscriber = function (_super) {\n  __extends(RepeatWhenSubscriber, _super);\n  function RepeatWhenSubscriber(destination, notifier, source) {\n    _super.call(this, destination);\n    this.notifier = notifier;\n    this.source = source;\n    this.sourceIsBeingSubscribedTo = true;\n  }\n  RepeatWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n    this.sourceIsBeingSubscribedTo = true;\n    this.source.subscribe(this);\n  };\n  RepeatWhenSubscriber.prototype.notifyComplete = function (innerSub) {\n    if (this.sourceIsBeingSubscribedTo === false) {\n      return _super.prototype.complete.call(this);\n    }\n  };\n  RepeatWhenSubscriber.prototype.complete = function () {\n    this.sourceIsBeingSubscribedTo = false;\n    if (!this.isStopped) {\n      if (!this.retries) {\n        this.subscribeToRetries();\n      }\n      if (!this.retriesSubscription || this.retriesSubscription.closed) {\n        return _super.prototype.complete.call(this);\n      }\n      this._unsubscribeAndRecycle();\n      this.notifications.next();\n    }\n  };\n  /** @deprecated internal use only */\n  RepeatWhenSubscriber.prototype._unsubscribe = function () {\n    var _a = this,\n      notifications = _a.notifications,\n      retriesSubscription = _a.retriesSubscription;\n    if (notifications) {\n      notifications.unsubscribe();\n      this.notifications = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  };\n  /** @deprecated internal use only */\n  RepeatWhenSubscriber.prototype._unsubscribeAndRecycle = function () {\n    var _a = this,\n      notifications = _a.notifications,\n      retries = _a.retries,\n      retriesSubscription = _a.retriesSubscription;\n    this.notifications = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n    _super.prototype._unsubscribeAndRecycle.call(this);\n    this.notifications = notifications;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n    return this;\n  };\n  RepeatWhenSubscriber.prototype.subscribeToRetries = function () {\n    this.notifications = new Subject_1.Subject();\n    var retries = tryCatch_1.tryCatch(this.notifier)(this.notifications);\n    if (retries === errorObject_1.errorObject) {\n      return _super.prototype.complete.call(this);\n    }\n    this.retries = retries;\n    this.retriesSubscription = subscribeToResult_1.subscribeToResult(this, retries);\n  };\n  return RepeatWhenSubscriber;\n}(OuterSubscriber_1.OuterSubscriber);","map":{"version":3,"names":["__extends","d","b","p","hasOwnProperty","__","constructor","prototype","Object","create","Subject_1","require","tryCatch_1","errorObject_1","OuterSubscriber_1","subscribeToResult_1","repeatWhen","notifier","source","lift","RepeatWhenOperator","exports","call","subscriber","subscribe","RepeatWhenSubscriber","_super","destination","sourceIsBeingSubscribedTo","notifyNext","outerValue","innerValue","outerIndex","innerIndex","innerSub","notifyComplete","complete","isStopped","retries","subscribeToRetries","retriesSubscription","closed","_unsubscribeAndRecycle","notifications","next","_unsubscribe","_a","unsubscribe","Subject","tryCatch","errorObject","subscribeToResult","OuterSubscriber"],"sources":["C:/Users/HP/Desktop/4SE3/PidevSym/PiDev_Spring_Angular/Front-End/frontOffice/node_modules/ng5-slider/node_modules/rxjs/operators/repeatWhen.js"],"sourcesContent":["\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar Subject_1 = require('../Subject');\r\nvar tryCatch_1 = require('../util/tryCatch');\r\nvar errorObject_1 = require('../util/errorObject');\r\nvar OuterSubscriber_1 = require('../OuterSubscriber');\r\nvar subscribeToResult_1 = require('../util/subscribeToResult');\r\n/**\r\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\r\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\r\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\r\n * this method will resubscribe to the source Observable.\r\n *\r\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\r\n *\r\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\r\n * which a user can `complete` or `error`, aborting the repetition.\r\n * @return {Observable} The source Observable modified with repeat logic.\r\n * @method repeatWhen\r\n * @owner Observable\r\n */\r\nfunction repeatWhen(notifier) {\r\n    return function (source) { return source.lift(new RepeatWhenOperator(notifier)); };\r\n}\r\nexports.repeatWhen = repeatWhen;\r\nvar RepeatWhenOperator = (function () {\r\n    function RepeatWhenOperator(notifier) {\r\n        this.notifier = notifier;\r\n    }\r\n    RepeatWhenOperator.prototype.call = function (subscriber, source) {\r\n        return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));\r\n    };\r\n    return RepeatWhenOperator;\r\n}());\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nvar RepeatWhenSubscriber = (function (_super) {\r\n    __extends(RepeatWhenSubscriber, _super);\r\n    function RepeatWhenSubscriber(destination, notifier, source) {\r\n        _super.call(this, destination);\r\n        this.notifier = notifier;\r\n        this.source = source;\r\n        this.sourceIsBeingSubscribedTo = true;\r\n    }\r\n    RepeatWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\r\n        this.sourceIsBeingSubscribedTo = true;\r\n        this.source.subscribe(this);\r\n    };\r\n    RepeatWhenSubscriber.prototype.notifyComplete = function (innerSub) {\r\n        if (this.sourceIsBeingSubscribedTo === false) {\r\n            return _super.prototype.complete.call(this);\r\n        }\r\n    };\r\n    RepeatWhenSubscriber.prototype.complete = function () {\r\n        this.sourceIsBeingSubscribedTo = false;\r\n        if (!this.isStopped) {\r\n            if (!this.retries) {\r\n                this.subscribeToRetries();\r\n            }\r\n            if (!this.retriesSubscription || this.retriesSubscription.closed) {\r\n                return _super.prototype.complete.call(this);\r\n            }\r\n            this._unsubscribeAndRecycle();\r\n            this.notifications.next();\r\n        }\r\n    };\r\n    /** @deprecated internal use only */ RepeatWhenSubscriber.prototype._unsubscribe = function () {\r\n        var _a = this, notifications = _a.notifications, retriesSubscription = _a.retriesSubscription;\r\n        if (notifications) {\r\n            notifications.unsubscribe();\r\n            this.notifications = null;\r\n        }\r\n        if (retriesSubscription) {\r\n            retriesSubscription.unsubscribe();\r\n            this.retriesSubscription = null;\r\n        }\r\n        this.retries = null;\r\n    };\r\n    /** @deprecated internal use only */ RepeatWhenSubscriber.prototype._unsubscribeAndRecycle = function () {\r\n        var _a = this, notifications = _a.notifications, retries = _a.retries, retriesSubscription = _a.retriesSubscription;\r\n        this.notifications = null;\r\n        this.retries = null;\r\n        this.retriesSubscription = null;\r\n        _super.prototype._unsubscribeAndRecycle.call(this);\r\n        this.notifications = notifications;\r\n        this.retries = retries;\r\n        this.retriesSubscription = retriesSubscription;\r\n        return this;\r\n    };\r\n    RepeatWhenSubscriber.prototype.subscribeToRetries = function () {\r\n        this.notifications = new Subject_1.Subject();\r\n        var retries = tryCatch_1.tryCatch(this.notifier)(this.notifications);\r\n        if (retries === errorObject_1.errorObject) {\r\n            return _super.prototype.complete.call(this);\r\n        }\r\n        this.retries = retries;\r\n        this.retriesSubscription = subscribeToResult_1.subscribeToResult(this, retries);\r\n    };\r\n    return RepeatWhenSubscriber;\r\n}(OuterSubscriber_1.OuterSubscriber));\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}