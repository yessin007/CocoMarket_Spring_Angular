{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\r\n * Converts a higher-order Observable into a first-order Observable by dropping\r\n * inner Observables while the previous inner Observable has not yet completed.\r\n *\r\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\r\n * next inner Observables while the current inner is still executing.</span>\r\n *\r\n * <img src=\"./img/exhaust.png\" width=\"100%\">\r\n *\r\n * `exhaust` subscribes to an Observable that emits Observables, also known as a\r\n * higher-order Observable. Each time it observes one of these emitted inner\r\n * Observables, the output Observable begins emitting the items emitted by that\r\n * inner Observable. So far, it behaves like {@link mergeAll}. However,\r\n * `exhaust` ignores every new inner Observable if the previous Observable has\r\n * not yet completed. Once that one completes, it will accept and flatten the\r\n * next inner Observable and repeat this process.\r\n *\r\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(5));\r\n * var result = higherOrder.exhaust();\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * @see {@link combineAll}\r\n * @see {@link concatAll}\r\n * @see {@link switch}\r\n * @see {@link mergeAll}\r\n * @see {@link exhaustMap}\r\n * @see {@link zipAll}\r\n *\r\n * @return {Observable} An Observable that takes a source of Observables and propagates the first observable\r\n * exclusively until it completes before subscribing to the next.\r\n * @method exhaust\r\n * @owner Observable\r\n */\nfunction exhaust() {\n  return function (source) {\n    return source.lift(new SwitchFirstOperator());\n  };\n}\nexports.exhaust = exhaust;\nvar SwitchFirstOperator = function () {\n  function SwitchFirstOperator() {}\n  SwitchFirstOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new SwitchFirstSubscriber(subscriber));\n  };\n  return SwitchFirstOperator;\n}();\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\nvar SwitchFirstSubscriber = function (_super) {\n  __extends(SwitchFirstSubscriber, _super);\n  function SwitchFirstSubscriber(destination) {\n    _super.call(this, destination);\n    this.hasCompleted = false;\n    this.hasSubscription = false;\n  }\n  SwitchFirstSubscriber.prototype._next = function (value) {\n    if (!this.hasSubscription) {\n      this.hasSubscription = true;\n      this.add(subscribeToResult_1.subscribeToResult(this, value));\n    }\n  };\n  SwitchFirstSubscriber.prototype._complete = function () {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n  };\n  SwitchFirstSubscriber.prototype.notifyComplete = function (innerSub) {\n    this.remove(innerSub);\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  };\n  return SwitchFirstSubscriber;\n}(OuterSubscriber_1.OuterSubscriber);","map":{"version":3,"names":["__extends","d","b","p","hasOwnProperty","__","constructor","prototype","Object","create","OuterSubscriber_1","require","subscribeToResult_1","exhaust","source","lift","SwitchFirstOperator","exports","call","subscriber","subscribe","SwitchFirstSubscriber","_super","destination","hasCompleted","hasSubscription","_next","value","add","subscribeToResult","_complete","complete","notifyComplete","innerSub","remove","OuterSubscriber"],"sources":["C:/Users/HP/Desktop/4SE3/PidevSym/PiDev_Spring_Angular/Front-End/frontOffice/node_modules/ng5-slider/node_modules/rxjs/operators/exhaust.js"],"sourcesContent":["\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar OuterSubscriber_1 = require('../OuterSubscriber');\r\nvar subscribeToResult_1 = require('../util/subscribeToResult');\r\n/**\r\n * Converts a higher-order Observable into a first-order Observable by dropping\r\n * inner Observables while the previous inner Observable has not yet completed.\r\n *\r\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\r\n * next inner Observables while the current inner is still executing.</span>\r\n *\r\n * <img src=\"./img/exhaust.png\" width=\"100%\">\r\n *\r\n * `exhaust` subscribes to an Observable that emits Observables, also known as a\r\n * higher-order Observable. Each time it observes one of these emitted inner\r\n * Observables, the output Observable begins emitting the items emitted by that\r\n * inner Observable. So far, it behaves like {@link mergeAll}. However,\r\n * `exhaust` ignores every new inner Observable if the previous Observable has\r\n * not yet completed. Once that one completes, it will accept and flatten the\r\n * next inner Observable and repeat this process.\r\n *\r\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(5));\r\n * var result = higherOrder.exhaust();\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * @see {@link combineAll}\r\n * @see {@link concatAll}\r\n * @see {@link switch}\r\n * @see {@link mergeAll}\r\n * @see {@link exhaustMap}\r\n * @see {@link zipAll}\r\n *\r\n * @return {Observable} An Observable that takes a source of Observables and propagates the first observable\r\n * exclusively until it completes before subscribing to the next.\r\n * @method exhaust\r\n * @owner Observable\r\n */\r\nfunction exhaust() {\r\n    return function (source) { return source.lift(new SwitchFirstOperator()); };\r\n}\r\nexports.exhaust = exhaust;\r\nvar SwitchFirstOperator = (function () {\r\n    function SwitchFirstOperator() {\r\n    }\r\n    SwitchFirstOperator.prototype.call = function (subscriber, source) {\r\n        return source.subscribe(new SwitchFirstSubscriber(subscriber));\r\n    };\r\n    return SwitchFirstOperator;\r\n}());\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nvar SwitchFirstSubscriber = (function (_super) {\r\n    __extends(SwitchFirstSubscriber, _super);\r\n    function SwitchFirstSubscriber(destination) {\r\n        _super.call(this, destination);\r\n        this.hasCompleted = false;\r\n        this.hasSubscription = false;\r\n    }\r\n    SwitchFirstSubscriber.prototype._next = function (value) {\r\n        if (!this.hasSubscription) {\r\n            this.hasSubscription = true;\r\n            this.add(subscribeToResult_1.subscribeToResult(this, value));\r\n        }\r\n    };\r\n    SwitchFirstSubscriber.prototype._complete = function () {\r\n        this.hasCompleted = true;\r\n        if (!this.hasSubscription) {\r\n            this.destination.complete();\r\n        }\r\n    };\r\n    SwitchFirstSubscriber.prototype.notifyComplete = function (innerSub) {\r\n        this.remove(innerSub);\r\n        this.hasSubscription = false;\r\n        if (this.hasCompleted) {\r\n            this.destination.complete();\r\n        }\r\n    };\r\n    return SwitchFirstSubscriber;\r\n}(OuterSubscriber_1.OuterSubscriber));\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}