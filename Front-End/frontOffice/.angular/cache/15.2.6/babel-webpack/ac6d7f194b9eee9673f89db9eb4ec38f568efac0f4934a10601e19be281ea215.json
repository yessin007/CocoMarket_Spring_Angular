{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar async_1 = require('../scheduler/async');\nvar throttle_1 = require('./throttle');\n/**\r\n * Emits a value from the source Observable, then ignores subsequent source\r\n * values for `duration` milliseconds, then repeats this process.\r\n *\r\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\r\n * next `duration` milliseconds.</span>\r\n *\r\n * <img src=\"./img/throttleTime.png\" width=\"100%\">\r\n *\r\n * `throttleTime` emits the source Observable values on the output Observable\r\n * when its internal timer is disabled, and ignores source values when the timer\r\n * is enabled. Initially, the timer is disabled. As soon as the first source\r\n * value arrives, it is forwarded to the output Observable, and then the timer\r\n * is enabled. After `duration` milliseconds (or the time unit determined\r\n * internally by the optional `scheduler`) has passed, the timer is disabled,\r\n * and this process repeats for the next source value. Optionally takes a\r\n * {@link IScheduler} for managing timers.\r\n *\r\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var result = clicks.throttleTime(1000);\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * @see {@link auditTime}\r\n * @see {@link debounceTime}\r\n * @see {@link delay}\r\n * @see {@link sampleTime}\r\n * @see {@link throttle}\r\n *\r\n * @param {number} duration Time to wait before emitting another value after\r\n * emitting the last value, measured in milliseconds or the time unit determined\r\n * internally by the optional `scheduler`.\r\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\r\n * managing the timers that handle the throttling.\r\n * @return {Observable<T>} An Observable that performs the throttle operation to\r\n * limit the rate of emissions from the source.\r\n * @method throttleTime\r\n * @owner Observable\r\n */\nfunction throttleTime(duration, scheduler, config) {\n  if (scheduler === void 0) {\n    scheduler = async_1.async;\n  }\n  if (config === void 0) {\n    config = throttle_1.defaultThrottleConfig;\n  }\n  return function (source) {\n    return source.lift(new ThrottleTimeOperator(duration, scheduler, config.leading, config.trailing));\n  };\n}\nexports.throttleTime = throttleTime;\nvar ThrottleTimeOperator = function () {\n  function ThrottleTimeOperator(duration, scheduler, leading, trailing) {\n    this.duration = duration;\n    this.scheduler = scheduler;\n    this.leading = leading;\n    this.trailing = trailing;\n  }\n  ThrottleTimeOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler, this.leading, this.trailing));\n  };\n  return ThrottleTimeOperator;\n}();\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\nvar ThrottleTimeSubscriber = function (_super) {\n  __extends(ThrottleTimeSubscriber, _super);\n  function ThrottleTimeSubscriber(destination, duration, scheduler, leading, trailing) {\n    _super.call(this, destination);\n    this.duration = duration;\n    this.scheduler = scheduler;\n    this.leading = leading;\n    this.trailing = trailing;\n    this._hasTrailingValue = false;\n    this._trailingValue = null;\n  }\n  ThrottleTimeSubscriber.prototype._next = function (value) {\n    if (this.throttled) {\n      if (this.trailing) {\n        this._trailingValue = value;\n        this._hasTrailingValue = true;\n      }\n    } else {\n      this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, {\n        subscriber: this\n      }));\n      if (this.leading) {\n        this.destination.next(value);\n      }\n    }\n  };\n  ThrottleTimeSubscriber.prototype.clearThrottle = function () {\n    var throttled = this.throttled;\n    if (throttled) {\n      if (this.trailing && this._hasTrailingValue) {\n        this.destination.next(this._trailingValue);\n        this._trailingValue = null;\n        this._hasTrailingValue = false;\n      }\n      throttled.unsubscribe();\n      this.remove(throttled);\n      this.throttled = null;\n    }\n  };\n  return ThrottleTimeSubscriber;\n}(Subscriber_1.Subscriber);\nfunction dispatchNext(arg) {\n  var subscriber = arg.subscriber;\n  subscriber.clearThrottle();\n}","map":{"version":3,"names":["__extends","d","b","p","hasOwnProperty","__","constructor","prototype","Object","create","Subscriber_1","require","async_1","throttle_1","throttleTime","duration","scheduler","config","async","defaultThrottleConfig","source","lift","ThrottleTimeOperator","leading","trailing","exports","call","subscriber","subscribe","ThrottleTimeSubscriber","_super","destination","_hasTrailingValue","_trailingValue","_next","value","throttled","add","schedule","dispatchNext","next","clearThrottle","unsubscribe","remove","Subscriber","arg"],"sources":["C:/Users/HP/Desktop/4SE3/PidevSym/PiDev_Spring_Angular/Front-End/frontOffice/node_modules/ng5-slider/node_modules/rxjs/operators/throttleTime.js"],"sourcesContent":["\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar Subscriber_1 = require('../Subscriber');\r\nvar async_1 = require('../scheduler/async');\r\nvar throttle_1 = require('./throttle');\r\n/**\r\n * Emits a value from the source Observable, then ignores subsequent source\r\n * values for `duration` milliseconds, then repeats this process.\r\n *\r\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\r\n * next `duration` milliseconds.</span>\r\n *\r\n * <img src=\"./img/throttleTime.png\" width=\"100%\">\r\n *\r\n * `throttleTime` emits the source Observable values on the output Observable\r\n * when its internal timer is disabled, and ignores source values when the timer\r\n * is enabled. Initially, the timer is disabled. As soon as the first source\r\n * value arrives, it is forwarded to the output Observable, and then the timer\r\n * is enabled. After `duration` milliseconds (or the time unit determined\r\n * internally by the optional `scheduler`) has passed, the timer is disabled,\r\n * and this process repeats for the next source value. Optionally takes a\r\n * {@link IScheduler} for managing timers.\r\n *\r\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var result = clicks.throttleTime(1000);\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * @see {@link auditTime}\r\n * @see {@link debounceTime}\r\n * @see {@link delay}\r\n * @see {@link sampleTime}\r\n * @see {@link throttle}\r\n *\r\n * @param {number} duration Time to wait before emitting another value after\r\n * emitting the last value, measured in milliseconds or the time unit determined\r\n * internally by the optional `scheduler`.\r\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\r\n * managing the timers that handle the throttling.\r\n * @return {Observable<T>} An Observable that performs the throttle operation to\r\n * limit the rate of emissions from the source.\r\n * @method throttleTime\r\n * @owner Observable\r\n */\r\nfunction throttleTime(duration, scheduler, config) {\r\n    if (scheduler === void 0) { scheduler = async_1.async; }\r\n    if (config === void 0) { config = throttle_1.defaultThrottleConfig; }\r\n    return function (source) { return source.lift(new ThrottleTimeOperator(duration, scheduler, config.leading, config.trailing)); };\r\n}\r\nexports.throttleTime = throttleTime;\r\nvar ThrottleTimeOperator = (function () {\r\n    function ThrottleTimeOperator(duration, scheduler, leading, trailing) {\r\n        this.duration = duration;\r\n        this.scheduler = scheduler;\r\n        this.leading = leading;\r\n        this.trailing = trailing;\r\n    }\r\n    ThrottleTimeOperator.prototype.call = function (subscriber, source) {\r\n        return source.subscribe(new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler, this.leading, this.trailing));\r\n    };\r\n    return ThrottleTimeOperator;\r\n}());\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nvar ThrottleTimeSubscriber = (function (_super) {\r\n    __extends(ThrottleTimeSubscriber, _super);\r\n    function ThrottleTimeSubscriber(destination, duration, scheduler, leading, trailing) {\r\n        _super.call(this, destination);\r\n        this.duration = duration;\r\n        this.scheduler = scheduler;\r\n        this.leading = leading;\r\n        this.trailing = trailing;\r\n        this._hasTrailingValue = false;\r\n        this._trailingValue = null;\r\n    }\r\n    ThrottleTimeSubscriber.prototype._next = function (value) {\r\n        if (this.throttled) {\r\n            if (this.trailing) {\r\n                this._trailingValue = value;\r\n                this._hasTrailingValue = true;\r\n            }\r\n        }\r\n        else {\r\n            this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, { subscriber: this }));\r\n            if (this.leading) {\r\n                this.destination.next(value);\r\n            }\r\n        }\r\n    };\r\n    ThrottleTimeSubscriber.prototype.clearThrottle = function () {\r\n        var throttled = this.throttled;\r\n        if (throttled) {\r\n            if (this.trailing && this._hasTrailingValue) {\r\n                this.destination.next(this._trailingValue);\r\n                this._trailingValue = null;\r\n                this._hasTrailingValue = false;\r\n            }\r\n            throttled.unsubscribe();\r\n            this.remove(throttled);\r\n            this.throttled = null;\r\n        }\r\n    };\r\n    return ThrottleTimeSubscriber;\r\n}(Subscriber_1.Subscriber));\r\nfunction dispatchNext(arg) {\r\n    var subscriber = arg.subscriber;\r\n    subscriber.clearThrottle();\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}