{"ast":null,"code":"import { ConnectableObservable, isObservable, of, Subject } from 'rxjs';\nimport * as i0 from '@angular/core';\nimport { Injectable, InjectionToken } from '@angular/core';\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\nclass DataSource {}\n/** Checks whether an object is a data source. */\nfunction isDataSource(value) {\n  // Check if the value is a DataSource by observing if it has a connect function. Cannot\n  // be checked as an `instanceof DataSource` since people could create their own sources\n  // that match the interface, but don't extend DataSource. We also can't use `isObservable`\n  // here, because of some internal apps.\n  return value && typeof value.connect === 'function' && !(value instanceof ConnectableObservable);\n}\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n/** DataSource wrapper for a native array. */\nclass ArrayDataSource extends DataSource {\n  constructor(_data) {\n    super();\n    this._data = _data;\n  }\n  connect() {\n    return isObservable(this._data) ? this._data : of(this._data);\n  }\n  disconnect() {}\n}\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n/**\r\n * A repeater that destroys views when they are removed from a\r\n * {@link ViewContainerRef}. When new items are inserted into the container,\r\n * the repeater will always construct a new embedded view for each item.\r\n *\r\n * @template T The type for the embedded view's $implicit property.\r\n * @template R The type for the item in each IterableDiffer change record.\r\n * @template C The type for the context passed to each embedded view.\r\n */\nclass _DisposeViewRepeaterStrategy {\n  applyChanges(changes, viewContainerRef, itemContextFactory, itemValueResolver, itemViewChanged) {\n    changes.forEachOperation((record, adjustedPreviousIndex, currentIndex) => {\n      let view;\n      let operation;\n      if (record.previousIndex == null) {\n        const insertContext = itemContextFactory(record, adjustedPreviousIndex, currentIndex);\n        view = viewContainerRef.createEmbeddedView(insertContext.templateRef, insertContext.context, insertContext.index);\n        operation = 1 /* _ViewRepeaterOperation.INSERTED */;\n      } else if (currentIndex == null) {\n        viewContainerRef.remove(adjustedPreviousIndex);\n        operation = 3 /* _ViewRepeaterOperation.REMOVED */;\n      } else {\n        view = viewContainerRef.get(adjustedPreviousIndex);\n        viewContainerRef.move(view, currentIndex);\n        operation = 2 /* _ViewRepeaterOperation.MOVED */;\n      }\n\n      if (itemViewChanged) {\n        itemViewChanged({\n          context: view?.context,\n          operation,\n          record\n        });\n      }\n    });\n  }\n  detach() {}\n}\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n/**\r\n * A repeater that caches views when they are removed from a\r\n * {@link ViewContainerRef}. When new items are inserted into the container,\r\n * the repeater will reuse one of the cached views instead of creating a new\r\n * embedded view. Recycling cached views reduces the quantity of expensive DOM\r\n * inserts.\r\n *\r\n * @template T The type for the embedded view's $implicit property.\r\n * @template R The type for the item in each IterableDiffer change record.\r\n * @template C The type for the context passed to each embedded view.\r\n */\nclass _RecycleViewRepeaterStrategy {\n  constructor() {\n    /**\r\n     * The size of the cache used to store unused views.\r\n     * Setting the cache size to `0` will disable caching. Defaults to 20 views.\r\n     */\n    this.viewCacheSize = 20;\n    /**\r\n     * View cache that stores embedded view instances that have been previously stamped out,\r\n     * but don't are not currently rendered. The view repeater will reuse these views rather than\r\n     * creating brand new ones.\r\n     *\r\n     * TODO(michaeljamesparsons) Investigate whether using a linked list would improve performance.\r\n     */\n    this._viewCache = [];\n  }\n  /** Apply changes to the DOM. */\n  applyChanges(changes, viewContainerRef, itemContextFactory, itemValueResolver, itemViewChanged) {\n    // Rearrange the views to put them in the right location.\n    changes.forEachOperation((record, adjustedPreviousIndex, currentIndex) => {\n      let view;\n      let operation;\n      if (record.previousIndex == null) {\n        // Item added.\n        const viewArgsFactory = () => itemContextFactory(record, adjustedPreviousIndex, currentIndex);\n        view = this._insertView(viewArgsFactory, currentIndex, viewContainerRef, itemValueResolver(record));\n        operation = view ? 1 /* _ViewRepeaterOperation.INSERTED */ : 0 /* _ViewRepeaterOperation.REPLACED */;\n      } else if (currentIndex == null) {\n        // Item removed.\n        this._detachAndCacheView(adjustedPreviousIndex, viewContainerRef);\n        operation = 3 /* _ViewRepeaterOperation.REMOVED */;\n      } else {\n        // Item moved.\n        view = this._moveView(adjustedPreviousIndex, currentIndex, viewContainerRef, itemValueResolver(record));\n        operation = 2 /* _ViewRepeaterOperation.MOVED */;\n      }\n\n      if (itemViewChanged) {\n        itemViewChanged({\n          context: view?.context,\n          operation,\n          record\n        });\n      }\n    });\n  }\n  detach() {\n    for (const view of this._viewCache) {\n      view.destroy();\n    }\n    this._viewCache = [];\n  }\n  /**\r\n   * Inserts a view for a new item, either from the cache or by creating a new\r\n   * one. Returns `undefined` if the item was inserted into a cached view.\r\n   */\n  _insertView(viewArgsFactory, currentIndex, viewContainerRef, value) {\n    const cachedView = this._insertViewFromCache(currentIndex, viewContainerRef);\n    if (cachedView) {\n      cachedView.context.$implicit = value;\n      return undefined;\n    }\n    const viewArgs = viewArgsFactory();\n    return viewContainerRef.createEmbeddedView(viewArgs.templateRef, viewArgs.context, viewArgs.index);\n  }\n  /** Detaches the view at the given index and inserts into the view cache. */\n  _detachAndCacheView(index, viewContainerRef) {\n    const detachedView = viewContainerRef.detach(index);\n    this._maybeCacheView(detachedView, viewContainerRef);\n  }\n  /** Moves view at the previous index to the current index. */\n  _moveView(adjustedPreviousIndex, currentIndex, viewContainerRef, value) {\n    const view = viewContainerRef.get(adjustedPreviousIndex);\n    viewContainerRef.move(view, currentIndex);\n    view.context.$implicit = value;\n    return view;\n  }\n  /**\r\n   * Cache the given detached view. If the cache is full, the view will be\r\n   * destroyed.\r\n   */\n  _maybeCacheView(view, viewContainerRef) {\n    if (this._viewCache.length < this.viewCacheSize) {\n      this._viewCache.push(view);\n    } else {\n      const index = viewContainerRef.indexOf(view);\n      // The host component could remove views from the container outside of\n      // the view repeater. It's unlikely this will occur, but just in case,\n      // destroy the view on its own, otherwise destroy it through the\n      // container to ensure that all the references are removed.\n      if (index === -1) {\n        view.destroy();\n      } else {\n        viewContainerRef.remove(index);\n      }\n    }\n  }\n  /** Inserts a recycled view from the cache at the given index. */\n  _insertViewFromCache(index, viewContainerRef) {\n    const cachedView = this._viewCache.pop();\n    if (cachedView) {\n      viewContainerRef.insert(cachedView, index);\n    }\n    return cachedView || null;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n/**\r\n * Class to be used to power selecting one or more options from a list.\r\n */\nclass SelectionModel {\n  constructor(_multiple = false, initiallySelectedValues, _emitChanges = true, compareWith) {\n    this._multiple = _multiple;\n    this._emitChanges = _emitChanges;\n    this.compareWith = compareWith;\n    /** Currently-selected values. */\n    this._selection = new Set();\n    /** Keeps track of the deselected options that haven't been emitted by the change event. */\n    this._deselectedToEmit = [];\n    /** Keeps track of the selected options that haven't been emitted by the change event. */\n    this._selectedToEmit = [];\n    /** Event emitted when the value has changed. */\n    this.changed = new Subject();\n    if (initiallySelectedValues && initiallySelectedValues.length) {\n      if (_multiple) {\n        initiallySelectedValues.forEach(value => this._markSelected(value));\n      } else {\n        this._markSelected(initiallySelectedValues[0]);\n      }\n      // Clear the array in order to avoid firing the change event for preselected values.\n      this._selectedToEmit.length = 0;\n    }\n  }\n  /** Selected values. */\n  get selected() {\n    if (!this._selected) {\n      this._selected = Array.from(this._selection.values());\n    }\n    return this._selected;\n  }\n  /**\r\n   * Selects a value or an array of values.\r\n   * @param values The values to select\r\n   * @return Whether the selection changed as a result of this call\r\n   * @breaking-change 16.0.0 make return type boolean\r\n   */\n  select(...values) {\n    this._verifyValueAssignment(values);\n    values.forEach(value => this._markSelected(value));\n    const changed = this._hasQueuedChanges();\n    this._emitChangeEvent();\n    return changed;\n  }\n  /**\r\n   * Deselects a value or an array of values.\r\n   * @param values The values to deselect\r\n   * @return Whether the selection changed as a result of this call\r\n   * @breaking-change 16.0.0 make return type boolean\r\n   */\n  deselect(...values) {\n    this._verifyValueAssignment(values);\n    values.forEach(value => this._unmarkSelected(value));\n    const changed = this._hasQueuedChanges();\n    this._emitChangeEvent();\n    return changed;\n  }\n  /**\r\n   * Sets the selected values\r\n   * @param values The new selected values\r\n   * @return Whether the selection changed as a result of this call\r\n   * @breaking-change 16.0.0 make return type boolean\r\n   */\n  setSelection(...values) {\n    this._verifyValueAssignment(values);\n    const oldValues = this.selected;\n    const newSelectedSet = new Set(values);\n    values.forEach(value => this._markSelected(value));\n    oldValues.filter(value => !newSelectedSet.has(value)).forEach(value => this._unmarkSelected(value));\n    const changed = this._hasQueuedChanges();\n    this._emitChangeEvent();\n    return changed;\n  }\n  /**\r\n   * Toggles a value between selected and deselected.\r\n   * @param value The value to toggle\r\n   * @return Whether the selection changed as a result of this call\r\n   * @breaking-change 16.0.0 make return type boolean\r\n   */\n  toggle(value) {\n    return this.isSelected(value) ? this.deselect(value) : this.select(value);\n  }\n  /**\r\n   * Clears all of the selected values.\r\n   * @param flushEvent Whether to flush the changes in an event.\r\n   *   If false, the changes to the selection will be flushed along with the next event.\r\n   * @return Whether the selection changed as a result of this call\r\n   * @breaking-change 16.0.0 make return type boolean\r\n   */\n  clear(flushEvent = true) {\n    this._unmarkAll();\n    const changed = this._hasQueuedChanges();\n    if (flushEvent) {\n      this._emitChangeEvent();\n    }\n    return changed;\n  }\n  /**\r\n   * Determines whether a value is selected.\r\n   */\n  isSelected(value) {\n    if (this.compareWith) {\n      for (const otherValue of this._selection) {\n        if (this.compareWith(otherValue, value)) {\n          return true;\n        }\n      }\n      return false;\n    }\n    return this._selection.has(value);\n  }\n  /**\r\n   * Determines whether the model does not have a value.\r\n   */\n  isEmpty() {\n    return this._selection.size === 0;\n  }\n  /**\r\n   * Determines whether the model has a value.\r\n   */\n  hasValue() {\n    return !this.isEmpty();\n  }\n  /**\r\n   * Sorts the selected values based on a predicate function.\r\n   */\n  sort(predicate) {\n    if (this._multiple && this.selected) {\n      this._selected.sort(predicate);\n    }\n  }\n  /**\r\n   * Gets whether multiple values can be selected.\r\n   */\n  isMultipleSelection() {\n    return this._multiple;\n  }\n  /** Emits a change event and clears the records of selected and deselected values. */\n  _emitChangeEvent() {\n    // Clear the selected values so they can be re-cached.\n    this._selected = null;\n    if (this._selectedToEmit.length || this._deselectedToEmit.length) {\n      this.changed.next({\n        source: this,\n        added: this._selectedToEmit,\n        removed: this._deselectedToEmit\n      });\n      this._deselectedToEmit = [];\n      this._selectedToEmit = [];\n    }\n  }\n  /** Selects a value. */\n  _markSelected(value) {\n    if (!this.isSelected(value)) {\n      if (!this._multiple) {\n        this._unmarkAll();\n      }\n      if (!this.isSelected(value)) {\n        this._selection.add(value);\n      }\n      if (this._emitChanges) {\n        this._selectedToEmit.push(value);\n      }\n    }\n  }\n  /** Deselects a value. */\n  _unmarkSelected(value) {\n    if (this.isSelected(value)) {\n      this._selection.delete(value);\n      if (this._emitChanges) {\n        this._deselectedToEmit.push(value);\n      }\n    }\n  }\n  /** Clears out the selected values. */\n  _unmarkAll() {\n    if (!this.isEmpty()) {\n      this._selection.forEach(value => this._unmarkSelected(value));\n    }\n  }\n  /**\r\n   * Verifies the value assignment and throws an error if the specified value array is\r\n   * including multiple values while the selection model is not supporting multiple values.\r\n   */\n  _verifyValueAssignment(values) {\n    if (values.length > 1 && !this._multiple && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getMultipleValuesInSingleSelectionError();\n    }\n  }\n  /** Whether there are queued up change to be emitted. */\n  _hasQueuedChanges() {\n    return !!(this._deselectedToEmit.length || this._selectedToEmit.length);\n  }\n}\n/**\r\n * Returns an error that reports that multiple values are passed into a selection model\r\n * with a single value.\r\n * @docs-private\r\n */\nfunction getMultipleValuesInSingleSelectionError() {\n  return Error('Cannot pass multiple values into SelectionModel with single-value mode.');\n}\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n/**\r\n * Class to coordinate unique selection based on name.\r\n * Intended to be consumed as an Angular service.\r\n * This service is needed because native radio change events are only fired on the item currently\r\n * being selected, and we still need to uncheck the previous selection.\r\n *\r\n * This service does not *store* any IDs and names because they may change at any time, so it is\r\n * less error-prone if they are simply passed through when the events occur.\r\n */\nclass UniqueSelectionDispatcher {\n  constructor() {\n    this._listeners = [];\n  }\n  /**\r\n   * Notify other items that selection for the given name has been set.\r\n   * @param id ID of the item.\r\n   * @param name Name of the item.\r\n   */\n  notify(id, name) {\n    for (let listener of this._listeners) {\n      listener(id, name);\n    }\n  }\n  /**\r\n   * Listen for future changes to item selection.\r\n   * @return Function used to deregister listener\r\n   */\n  listen(listener) {\n    this._listeners.push(listener);\n    return () => {\n      this._listeners = this._listeners.filter(registered => {\n        return listener !== registered;\n      });\n    };\n  }\n  ngOnDestroy() {\n    this._listeners = [];\n  }\n}\nUniqueSelectionDispatcher.ɵfac = function UniqueSelectionDispatcher_Factory(t) {\n  return new (t || UniqueSelectionDispatcher)();\n};\nUniqueSelectionDispatcher.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: UniqueSelectionDispatcher,\n  factory: UniqueSelectionDispatcher.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(UniqueSelectionDispatcher, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n/**\r\n * Injection token for {@link _ViewRepeater}. This token is for use by Angular Material only.\r\n * @docs-private\r\n */\nconst _VIEW_REPEATER_STRATEGY = new InjectionToken('_ViewRepeater');\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { ArrayDataSource, DataSource, SelectionModel, UniqueSelectionDispatcher, _DisposeViewRepeaterStrategy, _RecycleViewRepeaterStrategy, _VIEW_REPEATER_STRATEGY, getMultipleValuesInSingleSelectionError, isDataSource };","map":{"version":3,"names":["ConnectableObservable","isObservable","of","Subject","i0","Injectable","InjectionToken","DataSource","isDataSource","value","connect","ArrayDataSource","constructor","_data","disconnect","_DisposeViewRepeaterStrategy","applyChanges","changes","viewContainerRef","itemContextFactory","itemValueResolver","itemViewChanged","forEachOperation","record","adjustedPreviousIndex","currentIndex","view","operation","previousIndex","insertContext","createEmbeddedView","templateRef","context","index","remove","get","move","detach","_RecycleViewRepeaterStrategy","viewCacheSize","_viewCache","viewArgsFactory","_insertView","_detachAndCacheView","_moveView","destroy","cachedView","_insertViewFromCache","$implicit","undefined","viewArgs","detachedView","_maybeCacheView","length","push","indexOf","pop","insert","SelectionModel","_multiple","initiallySelectedValues","_emitChanges","compareWith","_selection","Set","_deselectedToEmit","_selectedToEmit","changed","forEach","_markSelected","selected","_selected","Array","from","values","select","_verifyValueAssignment","_hasQueuedChanges","_emitChangeEvent","deselect","_unmarkSelected","setSelection","oldValues","newSelectedSet","filter","has","toggle","isSelected","clear","flushEvent","_unmarkAll","otherValue","isEmpty","size","hasValue","sort","predicate","isMultipleSelection","next","source","added","removed","add","delete","ngDevMode","getMultipleValuesInSingleSelectionError","Error","UniqueSelectionDispatcher","_listeners","notify","id","name","listener","listen","registered","ngOnDestroy","ɵfac","ɵprov","type","args","providedIn","_VIEW_REPEATER_STRATEGY"],"sources":["C:/Users/HP/Desktop/4SE3/PidevSym/PiDev_Spring_Angular/Front-End/frontOffice/node_modules/@angular/cdk/fesm2020/collections.mjs"],"sourcesContent":["import { ConnectableObservable, isObservable, of, Subject } from 'rxjs';\r\nimport * as i0 from '@angular/core';\r\nimport { Injectable, InjectionToken } from '@angular/core';\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nclass DataSource {\r\n}\r\n/** Checks whether an object is a data source. */\r\nfunction isDataSource(value) {\r\n    // Check if the value is a DataSource by observing if it has a connect function. Cannot\r\n    // be checked as an `instanceof DataSource` since people could create their own sources\r\n    // that match the interface, but don't extend DataSource. We also can't use `isObservable`\r\n    // here, because of some internal apps.\r\n    return value && typeof value.connect === 'function' && !(value instanceof ConnectableObservable);\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** DataSource wrapper for a native array. */\r\nclass ArrayDataSource extends DataSource {\r\n    constructor(_data) {\r\n        super();\r\n        this._data = _data;\r\n    }\r\n    connect() {\r\n        return isObservable(this._data) ? this._data : of(this._data);\r\n    }\r\n    disconnect() { }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * A repeater that destroys views when they are removed from a\r\n * {@link ViewContainerRef}. When new items are inserted into the container,\r\n * the repeater will always construct a new embedded view for each item.\r\n *\r\n * @template T The type for the embedded view's $implicit property.\r\n * @template R The type for the item in each IterableDiffer change record.\r\n * @template C The type for the context passed to each embedded view.\r\n */\r\nclass _DisposeViewRepeaterStrategy {\r\n    applyChanges(changes, viewContainerRef, itemContextFactory, itemValueResolver, itemViewChanged) {\r\n        changes.forEachOperation((record, adjustedPreviousIndex, currentIndex) => {\r\n            let view;\r\n            let operation;\r\n            if (record.previousIndex == null) {\r\n                const insertContext = itemContextFactory(record, adjustedPreviousIndex, currentIndex);\r\n                view = viewContainerRef.createEmbeddedView(insertContext.templateRef, insertContext.context, insertContext.index);\r\n                operation = 1 /* _ViewRepeaterOperation.INSERTED */;\r\n            }\r\n            else if (currentIndex == null) {\r\n                viewContainerRef.remove(adjustedPreviousIndex);\r\n                operation = 3 /* _ViewRepeaterOperation.REMOVED */;\r\n            }\r\n            else {\r\n                view = viewContainerRef.get(adjustedPreviousIndex);\r\n                viewContainerRef.move(view, currentIndex);\r\n                operation = 2 /* _ViewRepeaterOperation.MOVED */;\r\n            }\r\n            if (itemViewChanged) {\r\n                itemViewChanged({\r\n                    context: view?.context,\r\n                    operation,\r\n                    record,\r\n                });\r\n            }\r\n        });\r\n    }\r\n    detach() { }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * A repeater that caches views when they are removed from a\r\n * {@link ViewContainerRef}. When new items are inserted into the container,\r\n * the repeater will reuse one of the cached views instead of creating a new\r\n * embedded view. Recycling cached views reduces the quantity of expensive DOM\r\n * inserts.\r\n *\r\n * @template T The type for the embedded view's $implicit property.\r\n * @template R The type for the item in each IterableDiffer change record.\r\n * @template C The type for the context passed to each embedded view.\r\n */\r\nclass _RecycleViewRepeaterStrategy {\r\n    constructor() {\r\n        /**\r\n         * The size of the cache used to store unused views.\r\n         * Setting the cache size to `0` will disable caching. Defaults to 20 views.\r\n         */\r\n        this.viewCacheSize = 20;\r\n        /**\r\n         * View cache that stores embedded view instances that have been previously stamped out,\r\n         * but don't are not currently rendered. The view repeater will reuse these views rather than\r\n         * creating brand new ones.\r\n         *\r\n         * TODO(michaeljamesparsons) Investigate whether using a linked list would improve performance.\r\n         */\r\n        this._viewCache = [];\r\n    }\r\n    /** Apply changes to the DOM. */\r\n    applyChanges(changes, viewContainerRef, itemContextFactory, itemValueResolver, itemViewChanged) {\r\n        // Rearrange the views to put them in the right location.\r\n        changes.forEachOperation((record, adjustedPreviousIndex, currentIndex) => {\r\n            let view;\r\n            let operation;\r\n            if (record.previousIndex == null) {\r\n                // Item added.\r\n                const viewArgsFactory = () => itemContextFactory(record, adjustedPreviousIndex, currentIndex);\r\n                view = this._insertView(viewArgsFactory, currentIndex, viewContainerRef, itemValueResolver(record));\r\n                operation = view ? 1 /* _ViewRepeaterOperation.INSERTED */ : 0 /* _ViewRepeaterOperation.REPLACED */;\r\n            }\r\n            else if (currentIndex == null) {\r\n                // Item removed.\r\n                this._detachAndCacheView(adjustedPreviousIndex, viewContainerRef);\r\n                operation = 3 /* _ViewRepeaterOperation.REMOVED */;\r\n            }\r\n            else {\r\n                // Item moved.\r\n                view = this._moveView(adjustedPreviousIndex, currentIndex, viewContainerRef, itemValueResolver(record));\r\n                operation = 2 /* _ViewRepeaterOperation.MOVED */;\r\n            }\r\n            if (itemViewChanged) {\r\n                itemViewChanged({\r\n                    context: view?.context,\r\n                    operation,\r\n                    record,\r\n                });\r\n            }\r\n        });\r\n    }\r\n    detach() {\r\n        for (const view of this._viewCache) {\r\n            view.destroy();\r\n        }\r\n        this._viewCache = [];\r\n    }\r\n    /**\r\n     * Inserts a view for a new item, either from the cache or by creating a new\r\n     * one. Returns `undefined` if the item was inserted into a cached view.\r\n     */\r\n    _insertView(viewArgsFactory, currentIndex, viewContainerRef, value) {\r\n        const cachedView = this._insertViewFromCache(currentIndex, viewContainerRef);\r\n        if (cachedView) {\r\n            cachedView.context.$implicit = value;\r\n            return undefined;\r\n        }\r\n        const viewArgs = viewArgsFactory();\r\n        return viewContainerRef.createEmbeddedView(viewArgs.templateRef, viewArgs.context, viewArgs.index);\r\n    }\r\n    /** Detaches the view at the given index and inserts into the view cache. */\r\n    _detachAndCacheView(index, viewContainerRef) {\r\n        const detachedView = viewContainerRef.detach(index);\r\n        this._maybeCacheView(detachedView, viewContainerRef);\r\n    }\r\n    /** Moves view at the previous index to the current index. */\r\n    _moveView(adjustedPreviousIndex, currentIndex, viewContainerRef, value) {\r\n        const view = viewContainerRef.get(adjustedPreviousIndex);\r\n        viewContainerRef.move(view, currentIndex);\r\n        view.context.$implicit = value;\r\n        return view;\r\n    }\r\n    /**\r\n     * Cache the given detached view. If the cache is full, the view will be\r\n     * destroyed.\r\n     */\r\n    _maybeCacheView(view, viewContainerRef) {\r\n        if (this._viewCache.length < this.viewCacheSize) {\r\n            this._viewCache.push(view);\r\n        }\r\n        else {\r\n            const index = viewContainerRef.indexOf(view);\r\n            // The host component could remove views from the container outside of\r\n            // the view repeater. It's unlikely this will occur, but just in case,\r\n            // destroy the view on its own, otherwise destroy it through the\r\n            // container to ensure that all the references are removed.\r\n            if (index === -1) {\r\n                view.destroy();\r\n            }\r\n            else {\r\n                viewContainerRef.remove(index);\r\n            }\r\n        }\r\n    }\r\n    /** Inserts a recycled view from the cache at the given index. */\r\n    _insertViewFromCache(index, viewContainerRef) {\r\n        const cachedView = this._viewCache.pop();\r\n        if (cachedView) {\r\n            viewContainerRef.insert(cachedView, index);\r\n        }\r\n        return cachedView || null;\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Class to be used to power selecting one or more options from a list.\r\n */\r\nclass SelectionModel {\r\n    constructor(_multiple = false, initiallySelectedValues, _emitChanges = true, compareWith) {\r\n        this._multiple = _multiple;\r\n        this._emitChanges = _emitChanges;\r\n        this.compareWith = compareWith;\r\n        /** Currently-selected values. */\r\n        this._selection = new Set();\r\n        /** Keeps track of the deselected options that haven't been emitted by the change event. */\r\n        this._deselectedToEmit = [];\r\n        /** Keeps track of the selected options that haven't been emitted by the change event. */\r\n        this._selectedToEmit = [];\r\n        /** Event emitted when the value has changed. */\r\n        this.changed = new Subject();\r\n        if (initiallySelectedValues && initiallySelectedValues.length) {\r\n            if (_multiple) {\r\n                initiallySelectedValues.forEach(value => this._markSelected(value));\r\n            }\r\n            else {\r\n                this._markSelected(initiallySelectedValues[0]);\r\n            }\r\n            // Clear the array in order to avoid firing the change event for preselected values.\r\n            this._selectedToEmit.length = 0;\r\n        }\r\n    }\r\n    /** Selected values. */\r\n    get selected() {\r\n        if (!this._selected) {\r\n            this._selected = Array.from(this._selection.values());\r\n        }\r\n        return this._selected;\r\n    }\r\n    /**\r\n     * Selects a value or an array of values.\r\n     * @param values The values to select\r\n     * @return Whether the selection changed as a result of this call\r\n     * @breaking-change 16.0.0 make return type boolean\r\n     */\r\n    select(...values) {\r\n        this._verifyValueAssignment(values);\r\n        values.forEach(value => this._markSelected(value));\r\n        const changed = this._hasQueuedChanges();\r\n        this._emitChangeEvent();\r\n        return changed;\r\n    }\r\n    /**\r\n     * Deselects a value or an array of values.\r\n     * @param values The values to deselect\r\n     * @return Whether the selection changed as a result of this call\r\n     * @breaking-change 16.0.0 make return type boolean\r\n     */\r\n    deselect(...values) {\r\n        this._verifyValueAssignment(values);\r\n        values.forEach(value => this._unmarkSelected(value));\r\n        const changed = this._hasQueuedChanges();\r\n        this._emitChangeEvent();\r\n        return changed;\r\n    }\r\n    /**\r\n     * Sets the selected values\r\n     * @param values The new selected values\r\n     * @return Whether the selection changed as a result of this call\r\n     * @breaking-change 16.0.0 make return type boolean\r\n     */\r\n    setSelection(...values) {\r\n        this._verifyValueAssignment(values);\r\n        const oldValues = this.selected;\r\n        const newSelectedSet = new Set(values);\r\n        values.forEach(value => this._markSelected(value));\r\n        oldValues\r\n            .filter(value => !newSelectedSet.has(value))\r\n            .forEach(value => this._unmarkSelected(value));\r\n        const changed = this._hasQueuedChanges();\r\n        this._emitChangeEvent();\r\n        return changed;\r\n    }\r\n    /**\r\n     * Toggles a value between selected and deselected.\r\n     * @param value The value to toggle\r\n     * @return Whether the selection changed as a result of this call\r\n     * @breaking-change 16.0.0 make return type boolean\r\n     */\r\n    toggle(value) {\r\n        return this.isSelected(value) ? this.deselect(value) : this.select(value);\r\n    }\r\n    /**\r\n     * Clears all of the selected values.\r\n     * @param flushEvent Whether to flush the changes in an event.\r\n     *   If false, the changes to the selection will be flushed along with the next event.\r\n     * @return Whether the selection changed as a result of this call\r\n     * @breaking-change 16.0.0 make return type boolean\r\n     */\r\n    clear(flushEvent = true) {\r\n        this._unmarkAll();\r\n        const changed = this._hasQueuedChanges();\r\n        if (flushEvent) {\r\n            this._emitChangeEvent();\r\n        }\r\n        return changed;\r\n    }\r\n    /**\r\n     * Determines whether a value is selected.\r\n     */\r\n    isSelected(value) {\r\n        if (this.compareWith) {\r\n            for (const otherValue of this._selection) {\r\n                if (this.compareWith(otherValue, value)) {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n        return this._selection.has(value);\r\n    }\r\n    /**\r\n     * Determines whether the model does not have a value.\r\n     */\r\n    isEmpty() {\r\n        return this._selection.size === 0;\r\n    }\r\n    /**\r\n     * Determines whether the model has a value.\r\n     */\r\n    hasValue() {\r\n        return !this.isEmpty();\r\n    }\r\n    /**\r\n     * Sorts the selected values based on a predicate function.\r\n     */\r\n    sort(predicate) {\r\n        if (this._multiple && this.selected) {\r\n            this._selected.sort(predicate);\r\n        }\r\n    }\r\n    /**\r\n     * Gets whether multiple values can be selected.\r\n     */\r\n    isMultipleSelection() {\r\n        return this._multiple;\r\n    }\r\n    /** Emits a change event and clears the records of selected and deselected values. */\r\n    _emitChangeEvent() {\r\n        // Clear the selected values so they can be re-cached.\r\n        this._selected = null;\r\n        if (this._selectedToEmit.length || this._deselectedToEmit.length) {\r\n            this.changed.next({\r\n                source: this,\r\n                added: this._selectedToEmit,\r\n                removed: this._deselectedToEmit,\r\n            });\r\n            this._deselectedToEmit = [];\r\n            this._selectedToEmit = [];\r\n        }\r\n    }\r\n    /** Selects a value. */\r\n    _markSelected(value) {\r\n        if (!this.isSelected(value)) {\r\n            if (!this._multiple) {\r\n                this._unmarkAll();\r\n            }\r\n            if (!this.isSelected(value)) {\r\n                this._selection.add(value);\r\n            }\r\n            if (this._emitChanges) {\r\n                this._selectedToEmit.push(value);\r\n            }\r\n        }\r\n    }\r\n    /** Deselects a value. */\r\n    _unmarkSelected(value) {\r\n        if (this.isSelected(value)) {\r\n            this._selection.delete(value);\r\n            if (this._emitChanges) {\r\n                this._deselectedToEmit.push(value);\r\n            }\r\n        }\r\n    }\r\n    /** Clears out the selected values. */\r\n    _unmarkAll() {\r\n        if (!this.isEmpty()) {\r\n            this._selection.forEach(value => this._unmarkSelected(value));\r\n        }\r\n    }\r\n    /**\r\n     * Verifies the value assignment and throws an error if the specified value array is\r\n     * including multiple values while the selection model is not supporting multiple values.\r\n     */\r\n    _verifyValueAssignment(values) {\r\n        if (values.length > 1 && !this._multiple && (typeof ngDevMode === 'undefined' || ngDevMode)) {\r\n            throw getMultipleValuesInSingleSelectionError();\r\n        }\r\n    }\r\n    /** Whether there are queued up change to be emitted. */\r\n    _hasQueuedChanges() {\r\n        return !!(this._deselectedToEmit.length || this._selectedToEmit.length);\r\n    }\r\n}\r\n/**\r\n * Returns an error that reports that multiple values are passed into a selection model\r\n * with a single value.\r\n * @docs-private\r\n */\r\nfunction getMultipleValuesInSingleSelectionError() {\r\n    return Error('Cannot pass multiple values into SelectionModel with single-value mode.');\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Class to coordinate unique selection based on name.\r\n * Intended to be consumed as an Angular service.\r\n * This service is needed because native radio change events are only fired on the item currently\r\n * being selected, and we still need to uncheck the previous selection.\r\n *\r\n * This service does not *store* any IDs and names because they may change at any time, so it is\r\n * less error-prone if they are simply passed through when the events occur.\r\n */\r\nclass UniqueSelectionDispatcher {\r\n    constructor() {\r\n        this._listeners = [];\r\n    }\r\n    /**\r\n     * Notify other items that selection for the given name has been set.\r\n     * @param id ID of the item.\r\n     * @param name Name of the item.\r\n     */\r\n    notify(id, name) {\r\n        for (let listener of this._listeners) {\r\n            listener(id, name);\r\n        }\r\n    }\r\n    /**\r\n     * Listen for future changes to item selection.\r\n     * @return Function used to deregister listener\r\n     */\r\n    listen(listener) {\r\n        this._listeners.push(listener);\r\n        return () => {\r\n            this._listeners = this._listeners.filter((registered) => {\r\n                return listener !== registered;\r\n            });\r\n        };\r\n    }\r\n    ngOnDestroy() {\r\n        this._listeners = [];\r\n    }\r\n}\r\nUniqueSelectionDispatcher.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: UniqueSelectionDispatcher, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\r\nUniqueSelectionDispatcher.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: UniqueSelectionDispatcher, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: UniqueSelectionDispatcher, decorators: [{\r\n            type: Injectable,\r\n            args: [{ providedIn: 'root' }]\r\n        }] });\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Injection token for {@link _ViewRepeater}. This token is for use by Angular Material only.\r\n * @docs-private\r\n */\r\nconst _VIEW_REPEATER_STRATEGY = new InjectionToken('_ViewRepeater');\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { ArrayDataSource, DataSource, SelectionModel, UniqueSelectionDispatcher, _DisposeViewRepeaterStrategy, _RecycleViewRepeaterStrategy, _VIEW_REPEATER_STRATEGY, getMultipleValuesInSingleSelectionError, isDataSource };\r\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}