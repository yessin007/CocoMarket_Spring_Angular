{"ast":null,"code":"\"use strict\";\n\nvar retryWhen_1 = require('../operators/retryWhen');\n/**\r\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\r\n * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.\r\n * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child\r\n * subscription. Otherwise this method will resubscribe to the source Observable.\r\n *\r\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\r\n *\r\n * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a\r\n * user can `complete` or `error`, aborting the retry.\r\n * @return {Observable} The source Observable modified with retry logic.\r\n * @method retryWhen\r\n * @owner Observable\r\n */\nfunction retryWhen(notifier) {\n  return retryWhen_1.retryWhen(notifier)(this);\n}\nexports.retryWhen = retryWhen;","map":{"version":3,"names":["retryWhen_1","require","retryWhen","notifier","exports"],"sources":["C:/Users/HP/Desktop/4SE3/PidevSym/PiDev_Spring_Angular/Front-End/frontOffice/node_modules/ng5-slider/node_modules/rxjs/operator/retryWhen.js"],"sourcesContent":["\"use strict\";\r\nvar retryWhen_1 = require('../operators/retryWhen');\r\n/**\r\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\r\n * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.\r\n * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child\r\n * subscription. Otherwise this method will resubscribe to the source Observable.\r\n *\r\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\r\n *\r\n * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a\r\n * user can `complete` or `error`, aborting the retry.\r\n * @return {Observable} The source Observable modified with retry logic.\r\n * @method retryWhen\r\n * @owner Observable\r\n */\r\nfunction retryWhen(notifier) {\r\n    return retryWhen_1.retryWhen(notifier)(this);\r\n}\r\nexports.retryWhen = retryWhen;\r\n"],"mappings":"AAAA,YAAY;;AACZ,IAAIA,WAAW,GAAGC,OAAO,CAAC,wBAAwB,CAAC;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,SAAS,CAACC,QAAQ,EAAE;EACzB,OAAOH,WAAW,CAACE,SAAS,CAACC,QAAQ,CAAC,CAAC,IAAI,CAAC;AAChD;AACAC,OAAO,CAACF,SAAS,GAAGA,SAAS"},"metadata":{},"sourceType":"script","externalDependencies":[]}