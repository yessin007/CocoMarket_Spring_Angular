{"ast":null,"code":"\"use strict\";\n\nvar async_1 = require('../scheduler/async');\nvar throttle_1 = require('../operators/throttle');\nvar throttleTime_1 = require('../operators/throttleTime');\n/**\r\n * Emits a value from the source Observable, then ignores subsequent source\r\n * values for `duration` milliseconds, then repeats this process.\r\n *\r\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\r\n * next `duration` milliseconds.</span>\r\n *\r\n * <img src=\"./img/throttleTime.png\" width=\"100%\">\r\n *\r\n * `throttleTime` emits the source Observable values on the output Observable\r\n * when its internal timer is disabled, and ignores source values when the timer\r\n * is enabled. Initially, the timer is disabled. As soon as the first source\r\n * value arrives, it is forwarded to the output Observable, and then the timer\r\n * is enabled. After `duration` milliseconds (or the time unit determined\r\n * internally by the optional `scheduler`) has passed, the timer is disabled,\r\n * and this process repeats for the next source value. Optionally takes a\r\n * {@link IScheduler} for managing timers.\r\n *\r\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var result = clicks.throttleTime(1000);\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * @see {@link auditTime}\r\n * @see {@link debounceTime}\r\n * @see {@link delay}\r\n * @see {@link sampleTime}\r\n * @see {@link throttle}\r\n *\r\n * @param {number} duration Time to wait before emitting another value after\r\n * emitting the last value, measured in milliseconds or the time unit determined\r\n * internally by the optional `scheduler`.\r\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\r\n * managing the timers that handle the throttling.\r\n * @return {Observable<T>} An Observable that performs the throttle operation to\r\n * limit the rate of emissions from the source.\r\n * @method throttleTime\r\n * @owner Observable\r\n */\nfunction throttleTime(duration, scheduler, config) {\n  if (scheduler === void 0) {\n    scheduler = async_1.async;\n  }\n  if (config === void 0) {\n    config = throttle_1.defaultThrottleConfig;\n  }\n  return throttleTime_1.throttleTime(duration, scheduler, config)(this);\n}\nexports.throttleTime = throttleTime;","map":{"version":3,"names":["async_1","require","throttle_1","throttleTime_1","throttleTime","duration","scheduler","config","async","defaultThrottleConfig","exports"],"sources":["C:/Users/HP/Desktop/4SE3/PidevSym/PiDev_Spring_Angular/Front-End/frontOffice/node_modules/ng5-slider/node_modules/rxjs/operator/throttleTime.js"],"sourcesContent":["\"use strict\";\r\nvar async_1 = require('../scheduler/async');\r\nvar throttle_1 = require('../operators/throttle');\r\nvar throttleTime_1 = require('../operators/throttleTime');\r\n/**\r\n * Emits a value from the source Observable, then ignores subsequent source\r\n * values for `duration` milliseconds, then repeats this process.\r\n *\r\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\r\n * next `duration` milliseconds.</span>\r\n *\r\n * <img src=\"./img/throttleTime.png\" width=\"100%\">\r\n *\r\n * `throttleTime` emits the source Observable values on the output Observable\r\n * when its internal timer is disabled, and ignores source values when the timer\r\n * is enabled. Initially, the timer is disabled. As soon as the first source\r\n * value arrives, it is forwarded to the output Observable, and then the timer\r\n * is enabled. After `duration` milliseconds (or the time unit determined\r\n * internally by the optional `scheduler`) has passed, the timer is disabled,\r\n * and this process repeats for the next source value. Optionally takes a\r\n * {@link IScheduler} for managing timers.\r\n *\r\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var result = clicks.throttleTime(1000);\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * @see {@link auditTime}\r\n * @see {@link debounceTime}\r\n * @see {@link delay}\r\n * @see {@link sampleTime}\r\n * @see {@link throttle}\r\n *\r\n * @param {number} duration Time to wait before emitting another value after\r\n * emitting the last value, measured in milliseconds or the time unit determined\r\n * internally by the optional `scheduler`.\r\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\r\n * managing the timers that handle the throttling.\r\n * @return {Observable<T>} An Observable that performs the throttle operation to\r\n * limit the rate of emissions from the source.\r\n * @method throttleTime\r\n * @owner Observable\r\n */\r\nfunction throttleTime(duration, scheduler, config) {\r\n    if (scheduler === void 0) { scheduler = async_1.async; }\r\n    if (config === void 0) { config = throttle_1.defaultThrottleConfig; }\r\n    return throttleTime_1.throttleTime(duration, scheduler, config)(this);\r\n}\r\nexports.throttleTime = throttleTime;\r\n"],"mappings":"AAAA,YAAY;;AACZ,IAAIA,OAAO,GAAGC,OAAO,CAAC,oBAAoB,CAAC;AAC3C,IAAIC,UAAU,GAAGD,OAAO,CAAC,uBAAuB,CAAC;AACjD,IAAIE,cAAc,GAAGF,OAAO,CAAC,2BAA2B,CAAC;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASG,YAAY,CAACC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,EAAE;EAC/C,IAAID,SAAS,KAAK,KAAK,CAAC,EAAE;IAAEA,SAAS,GAAGN,OAAO,CAACQ,KAAK;EAAE;EACvD,IAAID,MAAM,KAAK,KAAK,CAAC,EAAE;IAAEA,MAAM,GAAGL,UAAU,CAACO,qBAAqB;EAAE;EACpE,OAAON,cAAc,CAACC,YAAY,CAACC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,CAAC,CAAC,IAAI,CAAC;AACzE;AACAG,OAAO,CAACN,YAAY,GAAGA,YAAY"},"metadata":{},"sourceType":"script","externalDependencies":[]}