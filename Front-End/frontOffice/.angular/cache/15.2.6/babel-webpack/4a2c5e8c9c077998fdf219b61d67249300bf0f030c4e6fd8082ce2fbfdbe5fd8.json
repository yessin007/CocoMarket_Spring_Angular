{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar root_1 = require('../util/root');\nvar Action_1 = require('./Action');\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\nvar AsyncAction = function (_super) {\n  __extends(AsyncAction, _super);\n  function AsyncAction(scheduler, work) {\n    _super.call(this, scheduler, work);\n    this.scheduler = scheduler;\n    this.pending = false;\n    this.work = work;\n  }\n  AsyncAction.prototype.schedule = function (state, delay) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n    if (this.closed) {\n      return this;\n    }\n    // Always replace the current state with the new state.\n    this.state = state;\n    // Set the pending flag indicating that this action has been scheduled, or\n    // has recursively rescheduled itself.\n    this.pending = true;\n    var id = this.id;\n    var scheduler = this.scheduler;\n    //\n    // Important implementation note:\n    //\n    // Actions only execute once by default, unless rescheduled from within the\n    // scheduled callback. This allows us to implement single and repeat\n    // actions via the same code path, without adding API surface area, as well\n    // as mimic traditional recursion but across asynchronous boundaries.\n    //\n    // However, JS runtimes and timers distinguish between intervals achieved by\n    // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n    // serial `setTimeout` calls can be individually delayed, which delays\n    // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n    // guarantee the interval callback will be invoked more precisely to the\n    // interval period, regardless of load.\n    //\n    // Therefore, we use `setInterval` to schedule single and repeat actions.\n    // If the action reschedules itself with the same delay, the interval is not\n    // canceled. If the action doesn't reschedule, or reschedules with a\n    // different delay, the interval will be canceled after scheduled callback\n    // execution.\n    //\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, delay);\n    }\n    this.delay = delay;\n    // If this action has already an async Id, don't request a new one.\n    this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n    return this;\n  };\n  AsyncAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n    return root_1.root.setInterval(scheduler.flush.bind(scheduler, this), delay);\n  };\n  AsyncAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n    // If this action is rescheduled with the same delay time, don't clear the interval id.\n    if (delay !== null && this.delay === delay && this.pending === false) {\n      return id;\n    }\n    // Otherwise, if the action's delay time is different from the current delay,\n    // or the action has been rescheduled before it's executed, clear the interval id\n    return root_1.root.clearInterval(id) && undefined || undefined;\n  };\n  /**\r\n   * Immediately executes this action and the `work` it contains.\r\n   * @return {any}\r\n   */\n  AsyncAction.prototype.execute = function (state, delay) {\n    if (this.closed) {\n      return new Error('executing a cancelled action');\n    }\n    this.pending = false;\n    var error = this._execute(state, delay);\n    if (error) {\n      return error;\n    } else if (this.pending === false && this.id != null) {\n      // Dequeue if the action didn't reschedule itself. Don't call\n      // unsubscribe(), because the action could reschedule later.\n      // For example:\n      // ```\n      // scheduler.schedule(function doWork(counter) {\n      //   /* ... I'm a busy worker bee ... */\n      //   var originalAction = this;\n      //   /* wait 100ms before rescheduling the action */\n      //   setTimeout(function () {\n      //     originalAction.schedule(counter + 1);\n      //   }, 100);\n      // }, 1000);\n      // ```\n      this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n    }\n  };\n  AsyncAction.prototype._execute = function (state, delay) {\n    var errored = false;\n    var errorValue = undefined;\n    try {\n      this.work(state);\n    } catch (e) {\n      errored = true;\n      errorValue = !!e && e || new Error(e);\n    }\n    if (errored) {\n      this.unsubscribe();\n      return errorValue;\n    }\n  };\n  /** @deprecated internal use only */\n  AsyncAction.prototype._unsubscribe = function () {\n    var id = this.id;\n    var scheduler = this.scheduler;\n    var actions = scheduler.actions;\n    var index = actions.indexOf(this);\n    this.work = null;\n    this.state = null;\n    this.pending = false;\n    this.scheduler = null;\n    if (index !== -1) {\n      actions.splice(index, 1);\n    }\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, null);\n    }\n    this.delay = null;\n  };\n  return AsyncAction;\n}(Action_1.Action);\nexports.AsyncAction = AsyncAction;","map":{"version":3,"names":["__extends","d","b","p","hasOwnProperty","__","constructor","prototype","Object","create","root_1","require","Action_1","AsyncAction","_super","scheduler","work","call","pending","schedule","state","delay","closed","id","recycleAsyncId","requestAsyncId","root","setInterval","flush","bind","clearInterval","undefined","execute","Error","error","_execute","errored","errorValue","e","unsubscribe","_unsubscribe","actions","index","indexOf","splice","Action","exports"],"sources":["C:/Users/HP/Desktop/4SE3/PidevSym/PiDev_Spring_Angular/Front-End/frontOffice/node_modules/ng5-slider/node_modules/rxjs/scheduler/AsyncAction.js"],"sourcesContent":["\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar root_1 = require('../util/root');\r\nvar Action_1 = require('./Action');\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nvar AsyncAction = (function (_super) {\r\n    __extends(AsyncAction, _super);\r\n    function AsyncAction(scheduler, work) {\r\n        _super.call(this, scheduler, work);\r\n        this.scheduler = scheduler;\r\n        this.pending = false;\r\n        this.work = work;\r\n    }\r\n    AsyncAction.prototype.schedule = function (state, delay) {\r\n        if (delay === void 0) { delay = 0; }\r\n        if (this.closed) {\r\n            return this;\r\n        }\r\n        // Always replace the current state with the new state.\r\n        this.state = state;\r\n        // Set the pending flag indicating that this action has been scheduled, or\r\n        // has recursively rescheduled itself.\r\n        this.pending = true;\r\n        var id = this.id;\r\n        var scheduler = this.scheduler;\r\n        //\r\n        // Important implementation note:\r\n        //\r\n        // Actions only execute once by default, unless rescheduled from within the\r\n        // scheduled callback. This allows us to implement single and repeat\r\n        // actions via the same code path, without adding API surface area, as well\r\n        // as mimic traditional recursion but across asynchronous boundaries.\r\n        //\r\n        // However, JS runtimes and timers distinguish between intervals achieved by\r\n        // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\r\n        // serial `setTimeout` calls can be individually delayed, which delays\r\n        // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\r\n        // guarantee the interval callback will be invoked more precisely to the\r\n        // interval period, regardless of load.\r\n        //\r\n        // Therefore, we use `setInterval` to schedule single and repeat actions.\r\n        // If the action reschedules itself with the same delay, the interval is not\r\n        // canceled. If the action doesn't reschedule, or reschedules with a\r\n        // different delay, the interval will be canceled after scheduled callback\r\n        // execution.\r\n        //\r\n        if (id != null) {\r\n            this.id = this.recycleAsyncId(scheduler, id, delay);\r\n        }\r\n        this.delay = delay;\r\n        // If this action has already an async Id, don't request a new one.\r\n        this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\r\n        return this;\r\n    };\r\n    AsyncAction.prototype.requestAsyncId = function (scheduler, id, delay) {\r\n        if (delay === void 0) { delay = 0; }\r\n        return root_1.root.setInterval(scheduler.flush.bind(scheduler, this), delay);\r\n    };\r\n    AsyncAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\r\n        if (delay === void 0) { delay = 0; }\r\n        // If this action is rescheduled with the same delay time, don't clear the interval id.\r\n        if (delay !== null && this.delay === delay && this.pending === false) {\r\n            return id;\r\n        }\r\n        // Otherwise, if the action's delay time is different from the current delay,\r\n        // or the action has been rescheduled before it's executed, clear the interval id\r\n        return root_1.root.clearInterval(id) && undefined || undefined;\r\n    };\r\n    /**\r\n     * Immediately executes this action and the `work` it contains.\r\n     * @return {any}\r\n     */\r\n    AsyncAction.prototype.execute = function (state, delay) {\r\n        if (this.closed) {\r\n            return new Error('executing a cancelled action');\r\n        }\r\n        this.pending = false;\r\n        var error = this._execute(state, delay);\r\n        if (error) {\r\n            return error;\r\n        }\r\n        else if (this.pending === false && this.id != null) {\r\n            // Dequeue if the action didn't reschedule itself. Don't call\r\n            // unsubscribe(), because the action could reschedule later.\r\n            // For example:\r\n            // ```\r\n            // scheduler.schedule(function doWork(counter) {\r\n            //   /* ... I'm a busy worker bee ... */\r\n            //   var originalAction = this;\r\n            //   /* wait 100ms before rescheduling the action */\r\n            //   setTimeout(function () {\r\n            //     originalAction.schedule(counter + 1);\r\n            //   }, 100);\r\n            // }, 1000);\r\n            // ```\r\n            this.id = this.recycleAsyncId(this.scheduler, this.id, null);\r\n        }\r\n    };\r\n    AsyncAction.prototype._execute = function (state, delay) {\r\n        var errored = false;\r\n        var errorValue = undefined;\r\n        try {\r\n            this.work(state);\r\n        }\r\n        catch (e) {\r\n            errored = true;\r\n            errorValue = !!e && e || new Error(e);\r\n        }\r\n        if (errored) {\r\n            this.unsubscribe();\r\n            return errorValue;\r\n        }\r\n    };\r\n    /** @deprecated internal use only */ AsyncAction.prototype._unsubscribe = function () {\r\n        var id = this.id;\r\n        var scheduler = this.scheduler;\r\n        var actions = scheduler.actions;\r\n        var index = actions.indexOf(this);\r\n        this.work = null;\r\n        this.state = null;\r\n        this.pending = false;\r\n        this.scheduler = null;\r\n        if (index !== -1) {\r\n            actions.splice(index, 1);\r\n        }\r\n        if (id != null) {\r\n            this.id = this.recycleAsyncId(scheduler, id, null);\r\n        }\r\n        this.delay = null;\r\n    };\r\n    return AsyncAction;\r\n}(Action_1.Action));\r\nexports.AsyncAction = AsyncAction;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}