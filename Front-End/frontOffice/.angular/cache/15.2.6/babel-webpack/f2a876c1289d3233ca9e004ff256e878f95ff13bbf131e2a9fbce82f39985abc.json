{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar ArgumentOutOfRangeError_1 = require('../util/ArgumentOutOfRangeError');\nvar EmptyObservable_1 = require('../observable/EmptyObservable');\n/**\r\n * Emits only the last `count` values emitted by the source Observable.\r\n *\r\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\r\n * only when the source completes.</span>\r\n *\r\n * <img src=\"./img/takeLast.png\" width=\"100%\">\r\n *\r\n * `takeLast` returns an Observable that emits at most the last `count` values\r\n * emitted by the source Observable. If the source emits fewer than `count`\r\n * values then all of its values are emitted. This operator must wait until the\r\n * `complete` notification emission from the source in order to emit the `next`\r\n * values on the output Observable, because otherwise it is impossible to know\r\n * whether or not more values will be emitted on the source. For this reason,\r\n * all values are emitted synchronously, followed by the complete notification.\r\n *\r\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\r\n * var many = Rx.Observable.range(1, 100);\r\n * var lastThree = many.takeLast(3);\r\n * lastThree.subscribe(x => console.log(x));\r\n *\r\n * @see {@link take}\r\n * @see {@link takeUntil}\r\n * @see {@link takeWhile}\r\n * @see {@link skip}\r\n *\r\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\r\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\r\n *\r\n * @param {number} count The maximum number of values to emit from the end of\r\n * the sequence of values emitted by the source Observable.\r\n * @return {Observable<T>} An Observable that emits at most the last count\r\n * values emitted by the source Observable.\r\n * @method takeLast\r\n * @owner Observable\r\n */\nfunction takeLast(count) {\n  return function takeLastOperatorFunction(source) {\n    if (count === 0) {\n      return new EmptyObservable_1.EmptyObservable();\n    } else {\n      return source.lift(new TakeLastOperator(count));\n    }\n  };\n}\nexports.takeLast = takeLast;\nvar TakeLastOperator = function () {\n  function TakeLastOperator(total) {\n    this.total = total;\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError();\n    }\n  }\n  TakeLastOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new TakeLastSubscriber(subscriber, this.total));\n  };\n  return TakeLastOperator;\n}();\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\nvar TakeLastSubscriber = function (_super) {\n  __extends(TakeLastSubscriber, _super);\n  function TakeLastSubscriber(destination, total) {\n    _super.call(this, destination);\n    this.total = total;\n    this.ring = new Array();\n    this.count = 0;\n  }\n  TakeLastSubscriber.prototype._next = function (value) {\n    var ring = this.ring;\n    var total = this.total;\n    var count = this.count++;\n    if (ring.length < total) {\n      ring.push(value);\n    } else {\n      var index = count % total;\n      ring[index] = value;\n    }\n  };\n  TakeLastSubscriber.prototype._complete = function () {\n    var destination = this.destination;\n    var count = this.count;\n    if (count > 0) {\n      var total = this.count >= this.total ? this.total : this.count;\n      var ring = this.ring;\n      for (var i = 0; i < total; i++) {\n        var idx = count++ % total;\n        destination.next(ring[idx]);\n      }\n    }\n    destination.complete();\n  };\n  return TakeLastSubscriber;\n}(Subscriber_1.Subscriber);","map":{"version":3,"names":["__extends","d","b","p","hasOwnProperty","__","constructor","prototype","Object","create","Subscriber_1","require","ArgumentOutOfRangeError_1","EmptyObservable_1","takeLast","count","takeLastOperatorFunction","source","EmptyObservable","lift","TakeLastOperator","exports","total","ArgumentOutOfRangeError","call","subscriber","subscribe","TakeLastSubscriber","_super","destination","ring","Array","_next","value","length","push","index","_complete","i","idx","next","complete","Subscriber"],"sources":["C:/Users/HP/Desktop/4SE3/PidevSym/PiDev_Spring_Angular/Front-End/frontOffice/node_modules/ng5-slider/node_modules/rxjs/operators/takeLast.js"],"sourcesContent":["\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar Subscriber_1 = require('../Subscriber');\r\nvar ArgumentOutOfRangeError_1 = require('../util/ArgumentOutOfRangeError');\r\nvar EmptyObservable_1 = require('../observable/EmptyObservable');\r\n/**\r\n * Emits only the last `count` values emitted by the source Observable.\r\n *\r\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\r\n * only when the source completes.</span>\r\n *\r\n * <img src=\"./img/takeLast.png\" width=\"100%\">\r\n *\r\n * `takeLast` returns an Observable that emits at most the last `count` values\r\n * emitted by the source Observable. If the source emits fewer than `count`\r\n * values then all of its values are emitted. This operator must wait until the\r\n * `complete` notification emission from the source in order to emit the `next`\r\n * values on the output Observable, because otherwise it is impossible to know\r\n * whether or not more values will be emitted on the source. For this reason,\r\n * all values are emitted synchronously, followed by the complete notification.\r\n *\r\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\r\n * var many = Rx.Observable.range(1, 100);\r\n * var lastThree = many.takeLast(3);\r\n * lastThree.subscribe(x => console.log(x));\r\n *\r\n * @see {@link take}\r\n * @see {@link takeUntil}\r\n * @see {@link takeWhile}\r\n * @see {@link skip}\r\n *\r\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\r\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\r\n *\r\n * @param {number} count The maximum number of values to emit from the end of\r\n * the sequence of values emitted by the source Observable.\r\n * @return {Observable<T>} An Observable that emits at most the last count\r\n * values emitted by the source Observable.\r\n * @method takeLast\r\n * @owner Observable\r\n */\r\nfunction takeLast(count) {\r\n    return function takeLastOperatorFunction(source) {\r\n        if (count === 0) {\r\n            return new EmptyObservable_1.EmptyObservable();\r\n        }\r\n        else {\r\n            return source.lift(new TakeLastOperator(count));\r\n        }\r\n    };\r\n}\r\nexports.takeLast = takeLast;\r\nvar TakeLastOperator = (function () {\r\n    function TakeLastOperator(total) {\r\n        this.total = total;\r\n        if (this.total < 0) {\r\n            throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;\r\n        }\r\n    }\r\n    TakeLastOperator.prototype.call = function (subscriber, source) {\r\n        return source.subscribe(new TakeLastSubscriber(subscriber, this.total));\r\n    };\r\n    return TakeLastOperator;\r\n}());\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nvar TakeLastSubscriber = (function (_super) {\r\n    __extends(TakeLastSubscriber, _super);\r\n    function TakeLastSubscriber(destination, total) {\r\n        _super.call(this, destination);\r\n        this.total = total;\r\n        this.ring = new Array();\r\n        this.count = 0;\r\n    }\r\n    TakeLastSubscriber.prototype._next = function (value) {\r\n        var ring = this.ring;\r\n        var total = this.total;\r\n        var count = this.count++;\r\n        if (ring.length < total) {\r\n            ring.push(value);\r\n        }\r\n        else {\r\n            var index = count % total;\r\n            ring[index] = value;\r\n        }\r\n    };\r\n    TakeLastSubscriber.prototype._complete = function () {\r\n        var destination = this.destination;\r\n        var count = this.count;\r\n        if (count > 0) {\r\n            var total = this.count >= this.total ? this.total : this.count;\r\n            var ring = this.ring;\r\n            for (var i = 0; i < total; i++) {\r\n                var idx = (count++) % total;\r\n                destination.next(ring[idx]);\r\n            }\r\n        }\r\n        destination.complete();\r\n    };\r\n    return TakeLastSubscriber;\r\n}(Subscriber_1.Subscriber));\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}