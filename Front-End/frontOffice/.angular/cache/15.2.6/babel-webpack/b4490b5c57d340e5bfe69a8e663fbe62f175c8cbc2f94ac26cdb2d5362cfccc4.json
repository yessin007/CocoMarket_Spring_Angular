{"ast":null,"code":"\"use strict\";\n\nvar publish_1 = require('../operators/publish');\n/* tslint:enable:max-line-length */\n/**\r\n * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\r\n * before it begins emitting items to those Observers that have subscribed to it.\r\n *\r\n * <img src=\"./img/publish.png\" width=\"100%\">\r\n *\r\n * @param {Function} [selector] - Optional selector function which can use the multicasted source sequence as many times\r\n * as needed, without causing multiple subscriptions to the source sequence.\r\n * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\r\n * @return A ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.\r\n * @method publish\r\n * @owner Observable\r\n */\nfunction publish(selector) {\n  return publish_1.publish(selector)(this);\n}\nexports.publish = publish;","map":{"version":3,"names":["publish_1","require","publish","selector","exports"],"sources":["C:/Users/HP/Desktop/4SE3/PidevSym/PiDev_Spring_Angular/Front-End/frontOffice/node_modules/ng5-slider/node_modules/rxjs/operator/publish.js"],"sourcesContent":["\"use strict\";\r\nvar publish_1 = require('../operators/publish');\r\n/* tslint:enable:max-line-length */\r\n/**\r\n * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\r\n * before it begins emitting items to those Observers that have subscribed to it.\r\n *\r\n * <img src=\"./img/publish.png\" width=\"100%\">\r\n *\r\n * @param {Function} [selector] - Optional selector function which can use the multicasted source sequence as many times\r\n * as needed, without causing multiple subscriptions to the source sequence.\r\n * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\r\n * @return A ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.\r\n * @method publish\r\n * @owner Observable\r\n */\r\nfunction publish(selector) {\r\n    return publish_1.publish(selector)(this);\r\n}\r\nexports.publish = publish;\r\n"],"mappings":"AAAA,YAAY;;AACZ,IAAIA,SAAS,GAAGC,OAAO,CAAC,sBAAsB,CAAC;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,OAAO,CAACC,QAAQ,EAAE;EACvB,OAAOH,SAAS,CAACE,OAAO,CAACC,QAAQ,CAAC,CAAC,IAAI,CAAC;AAC5C;AACAC,OAAO,CAACF,OAAO,GAAGA,OAAO"},"metadata":{},"sourceType":"script","externalDependencies":[]}