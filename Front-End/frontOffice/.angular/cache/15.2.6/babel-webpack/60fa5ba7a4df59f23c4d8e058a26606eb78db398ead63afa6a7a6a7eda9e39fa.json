{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/* tslint:enable:max-line-length */\n/**\r\n * Applies an accumulator function over the source Observable, and returns each\r\n * intermediate result, with an optional seed value.\r\n *\r\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\r\n * accumulation whenever the source emits a value.</span>\r\n *\r\n * <img src=\"./img/scan.png\" width=\"100%\">\r\n *\r\n * Combines together all values emitted on the source, using an accumulator\r\n * function that knows how to join a new source value into the accumulation from\r\n * the past. Is similar to {@link reduce}, but emits the intermediate\r\n * accumulations.\r\n *\r\n * Returns an Observable that applies a specified `accumulator` function to each\r\n * item emitted by the source Observable. If a `seed` value is specified, then\r\n * that value will be used as the initial value for the accumulator. If no seed\r\n * value is specified, the first item of the source is used as the seed.\r\n *\r\n * @example <caption>Count the number of click events</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var ones = clicks.mapTo(1);\r\n * var seed = 0;\r\n * var count = ones.scan((acc, one) => acc + one, seed);\r\n * count.subscribe(x => console.log(x));\r\n *\r\n * @see {@link expand}\r\n * @see {@link mergeScan}\r\n * @see {@link reduce}\r\n *\r\n * @param {function(acc: R, value: T, index: number): R} accumulator\r\n * The accumulator function called on each source value.\r\n * @param {T|R} [seed] The initial accumulation value.\r\n * @return {Observable<R>} An observable of the accumulated values.\r\n * @method scan\r\n * @owner Observable\r\n */\nfunction scan(accumulator, seed) {\n  var hasSeed = false;\n  // providing a seed of `undefined` *should* be valid and trigger\n  // hasSeed! so don't use `seed !== undefined` checks!\n  // For this reason, we have to check it here at the original call site\n  // otherwise inside Operator/Subscriber we won't know if `undefined`\n  // means they didn't provide anything or if they literally provided `undefined`\n  if (arguments.length >= 2) {\n    hasSeed = true;\n  }\n  return function scanOperatorFunction(source) {\n    return source.lift(new ScanOperator(accumulator, seed, hasSeed));\n  };\n}\nexports.scan = scan;\nvar ScanOperator = function () {\n  function ScanOperator(accumulator, seed, hasSeed) {\n    if (hasSeed === void 0) {\n      hasSeed = false;\n    }\n    this.accumulator = accumulator;\n    this.seed = seed;\n    this.hasSeed = hasSeed;\n  }\n  ScanOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));\n  };\n  return ScanOperator;\n}();\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\nvar ScanSubscriber = function (_super) {\n  __extends(ScanSubscriber, _super);\n  function ScanSubscriber(destination, accumulator, _seed, hasSeed) {\n    _super.call(this, destination);\n    this.accumulator = accumulator;\n    this._seed = _seed;\n    this.hasSeed = hasSeed;\n    this.index = 0;\n  }\n  Object.defineProperty(ScanSubscriber.prototype, \"seed\", {\n    get: function () {\n      return this._seed;\n    },\n    set: function (value) {\n      this.hasSeed = true;\n      this._seed = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  ScanSubscriber.prototype._next = function (value) {\n    if (!this.hasSeed) {\n      this.seed = value;\n      this.destination.next(value);\n    } else {\n      return this._tryNext(value);\n    }\n  };\n  ScanSubscriber.prototype._tryNext = function (value) {\n    var index = this.index++;\n    var result;\n    try {\n      result = this.accumulator(this.seed, value, index);\n    } catch (err) {\n      this.destination.error(err);\n    }\n    this.seed = result;\n    this.destination.next(result);\n  };\n  return ScanSubscriber;\n}(Subscriber_1.Subscriber);","map":{"version":3,"names":["__extends","d","b","p","hasOwnProperty","__","constructor","prototype","Object","create","Subscriber_1","require","scan","accumulator","seed","hasSeed","arguments","length","scanOperatorFunction","source","lift","ScanOperator","exports","call","subscriber","subscribe","ScanSubscriber","_super","destination","_seed","index","defineProperty","get","set","value","enumerable","configurable","_next","next","_tryNext","result","err","error","Subscriber"],"sources":["C:/Users/HP/Desktop/4SE3/PidevSym/PiDev_Spring_Angular/Front-End/frontOffice/node_modules/ng5-slider/node_modules/rxjs/operators/scan.js"],"sourcesContent":["\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar Subscriber_1 = require('../Subscriber');\r\n/* tslint:enable:max-line-length */\r\n/**\r\n * Applies an accumulator function over the source Observable, and returns each\r\n * intermediate result, with an optional seed value.\r\n *\r\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\r\n * accumulation whenever the source emits a value.</span>\r\n *\r\n * <img src=\"./img/scan.png\" width=\"100%\">\r\n *\r\n * Combines together all values emitted on the source, using an accumulator\r\n * function that knows how to join a new source value into the accumulation from\r\n * the past. Is similar to {@link reduce}, but emits the intermediate\r\n * accumulations.\r\n *\r\n * Returns an Observable that applies a specified `accumulator` function to each\r\n * item emitted by the source Observable. If a `seed` value is specified, then\r\n * that value will be used as the initial value for the accumulator. If no seed\r\n * value is specified, the first item of the source is used as the seed.\r\n *\r\n * @example <caption>Count the number of click events</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var ones = clicks.mapTo(1);\r\n * var seed = 0;\r\n * var count = ones.scan((acc, one) => acc + one, seed);\r\n * count.subscribe(x => console.log(x));\r\n *\r\n * @see {@link expand}\r\n * @see {@link mergeScan}\r\n * @see {@link reduce}\r\n *\r\n * @param {function(acc: R, value: T, index: number): R} accumulator\r\n * The accumulator function called on each source value.\r\n * @param {T|R} [seed] The initial accumulation value.\r\n * @return {Observable<R>} An observable of the accumulated values.\r\n * @method scan\r\n * @owner Observable\r\n */\r\nfunction scan(accumulator, seed) {\r\n    var hasSeed = false;\r\n    // providing a seed of `undefined` *should* be valid and trigger\r\n    // hasSeed! so don't use `seed !== undefined` checks!\r\n    // For this reason, we have to check it here at the original call site\r\n    // otherwise inside Operator/Subscriber we won't know if `undefined`\r\n    // means they didn't provide anything or if they literally provided `undefined`\r\n    if (arguments.length >= 2) {\r\n        hasSeed = true;\r\n    }\r\n    return function scanOperatorFunction(source) {\r\n        return source.lift(new ScanOperator(accumulator, seed, hasSeed));\r\n    };\r\n}\r\nexports.scan = scan;\r\nvar ScanOperator = (function () {\r\n    function ScanOperator(accumulator, seed, hasSeed) {\r\n        if (hasSeed === void 0) { hasSeed = false; }\r\n        this.accumulator = accumulator;\r\n        this.seed = seed;\r\n        this.hasSeed = hasSeed;\r\n    }\r\n    ScanOperator.prototype.call = function (subscriber, source) {\r\n        return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));\r\n    };\r\n    return ScanOperator;\r\n}());\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nvar ScanSubscriber = (function (_super) {\r\n    __extends(ScanSubscriber, _super);\r\n    function ScanSubscriber(destination, accumulator, _seed, hasSeed) {\r\n        _super.call(this, destination);\r\n        this.accumulator = accumulator;\r\n        this._seed = _seed;\r\n        this.hasSeed = hasSeed;\r\n        this.index = 0;\r\n    }\r\n    Object.defineProperty(ScanSubscriber.prototype, \"seed\", {\r\n        get: function () {\r\n            return this._seed;\r\n        },\r\n        set: function (value) {\r\n            this.hasSeed = true;\r\n            this._seed = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    ScanSubscriber.prototype._next = function (value) {\r\n        if (!this.hasSeed) {\r\n            this.seed = value;\r\n            this.destination.next(value);\r\n        }\r\n        else {\r\n            return this._tryNext(value);\r\n        }\r\n    };\r\n    ScanSubscriber.prototype._tryNext = function (value) {\r\n        var index = this.index++;\r\n        var result;\r\n        try {\r\n            result = this.accumulator(this.seed, value, index);\r\n        }\r\n        catch (err) {\r\n            this.destination.error(err);\r\n        }\r\n        this.seed = result;\r\n        this.destination.next(result);\r\n    };\r\n    return ScanSubscriber;\r\n}(Subscriber_1.Subscriber));\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}