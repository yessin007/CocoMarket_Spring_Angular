{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nfunction refCount() {\n  return function refCountOperatorFunction(source) {\n    return source.lift(new RefCountOperator(source));\n  };\n}\nexports.refCount = refCount;\nvar RefCountOperator = function () {\n  function RefCountOperator(connectable) {\n    this.connectable = connectable;\n  }\n  RefCountOperator.prototype.call = function (subscriber, source) {\n    var connectable = this.connectable;\n    connectable._refCount++;\n    var refCounter = new RefCountSubscriber(subscriber, connectable);\n    var subscription = source.subscribe(refCounter);\n    if (!refCounter.closed) {\n      refCounter.connection = connectable.connect();\n    }\n    return subscription;\n  };\n  return RefCountOperator;\n}();\nvar RefCountSubscriber = function (_super) {\n  __extends(RefCountSubscriber, _super);\n  function RefCountSubscriber(destination, connectable) {\n    _super.call(this, destination);\n    this.connectable = connectable;\n  }\n  /** @deprecated internal use only */\n  RefCountSubscriber.prototype._unsubscribe = function () {\n    var connectable = this.connectable;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n    this.connectable = null;\n    var refCount = connectable._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n    connectable._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // Observable.range(0, 10)\n    //   .publish()\n    //   .refCount()\n    //   .take(5)\n    //   .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    var connection = this.connection;\n    var sharedConnection = connectable._connection;\n    this.connection = null;\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  };\n  return RefCountSubscriber;\n}(Subscriber_1.Subscriber);","map":{"version":3,"names":["__extends","d","b","p","hasOwnProperty","__","constructor","prototype","Object","create","Subscriber_1","require","refCount","refCountOperatorFunction","source","lift","RefCountOperator","exports","connectable","call","subscriber","_refCount","refCounter","RefCountSubscriber","subscription","subscribe","closed","connection","connect","_super","destination","_unsubscribe","sharedConnection","_connection","unsubscribe","Subscriber"],"sources":["C:/Users/HP/Desktop/4SE3/PidevSym/PiDev_Spring_Angular/Front-End/frontOffice/node_modules/ng5-slider/node_modules/rxjs/operators/refCount.js"],"sourcesContent":["\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar Subscriber_1 = require('../Subscriber');\r\nfunction refCount() {\r\n    return function refCountOperatorFunction(source) {\r\n        return source.lift(new RefCountOperator(source));\r\n    };\r\n}\r\nexports.refCount = refCount;\r\nvar RefCountOperator = (function () {\r\n    function RefCountOperator(connectable) {\r\n        this.connectable = connectable;\r\n    }\r\n    RefCountOperator.prototype.call = function (subscriber, source) {\r\n        var connectable = this.connectable;\r\n        connectable._refCount++;\r\n        var refCounter = new RefCountSubscriber(subscriber, connectable);\r\n        var subscription = source.subscribe(refCounter);\r\n        if (!refCounter.closed) {\r\n            refCounter.connection = connectable.connect();\r\n        }\r\n        return subscription;\r\n    };\r\n    return RefCountOperator;\r\n}());\r\nvar RefCountSubscriber = (function (_super) {\r\n    __extends(RefCountSubscriber, _super);\r\n    function RefCountSubscriber(destination, connectable) {\r\n        _super.call(this, destination);\r\n        this.connectable = connectable;\r\n    }\r\n    /** @deprecated internal use only */ RefCountSubscriber.prototype._unsubscribe = function () {\r\n        var connectable = this.connectable;\r\n        if (!connectable) {\r\n            this.connection = null;\r\n            return;\r\n        }\r\n        this.connectable = null;\r\n        var refCount = connectable._refCount;\r\n        if (refCount <= 0) {\r\n            this.connection = null;\r\n            return;\r\n        }\r\n        connectable._refCount = refCount - 1;\r\n        if (refCount > 1) {\r\n            this.connection = null;\r\n            return;\r\n        }\r\n        ///\r\n        // Compare the local RefCountSubscriber's connection Subscription to the\r\n        // connection Subscription on the shared ConnectableObservable. In cases\r\n        // where the ConnectableObservable source synchronously emits values, and\r\n        // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\r\n        // execution continues to here before the RefCountOperator has a chance to\r\n        // supply the RefCountSubscriber with the shared connection Subscription.\r\n        // For example:\r\n        // ```\r\n        // Observable.range(0, 10)\r\n        //   .publish()\r\n        //   .refCount()\r\n        //   .take(5)\r\n        //   .subscribe();\r\n        // ```\r\n        // In order to account for this case, RefCountSubscriber should only dispose\r\n        // the ConnectableObservable's shared connection Subscription if the\r\n        // connection Subscription exists, *and* either:\r\n        //   a. RefCountSubscriber doesn't have a reference to the shared connection\r\n        //      Subscription yet, or,\r\n        //   b. RefCountSubscriber's connection Subscription reference is identical\r\n        //      to the shared connection Subscription\r\n        ///\r\n        var connection = this.connection;\r\n        var sharedConnection = connectable._connection;\r\n        this.connection = null;\r\n        if (sharedConnection && (!connection || sharedConnection === connection)) {\r\n            sharedConnection.unsubscribe();\r\n        }\r\n    };\r\n    return RefCountSubscriber;\r\n}(Subscriber_1.Subscriber));\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}