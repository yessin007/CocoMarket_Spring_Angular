{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\n/* tslint:enable:max-line-length */\n/**\r\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\r\n *\r\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\r\n *\r\n * If a comparator function is not provided, an equality check is used by default.\r\n *\r\n * @example <caption>A simple example with numbers</caption>\r\n * Observable.of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4)\r\n *   .distinctUntilChanged()\r\n *   .subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4\r\n *\r\n * @example <caption>An example using a compare function</caption>\r\n * interface Person {\r\n *    age: number,\r\n *    name: string\r\n * }\r\n *\r\n * Observable.of<Person>(\r\n *     { age: 4, name: 'Foo'},\r\n *     { age: 7, name: 'Bar'},\r\n *     { age: 5, name: 'Foo'})\r\n *     { age: 6, name: 'Foo'})\r\n *     .distinctUntilChanged((p: Person, q: Person) => p.name === q.name)\r\n *     .subscribe(x => console.log(x));\r\n *\r\n * // displays:\r\n * // { age: 4, name: 'Foo' }\r\n * // { age: 7, name: 'Bar' }\r\n * // { age: 5, name: 'Foo' }\r\n *\r\n * @see {@link distinct}\r\n * @see {@link distinctUntilKeyChanged}\r\n *\r\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\r\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\r\n * @method distinctUntilChanged\r\n * @owner Observable\r\n */\nfunction distinctUntilChanged(compare, keySelector) {\n  return function (source) {\n    return source.lift(new DistinctUntilChangedOperator(compare, keySelector));\n  };\n}\nexports.distinctUntilChanged = distinctUntilChanged;\nvar DistinctUntilChangedOperator = function () {\n  function DistinctUntilChangedOperator(compare, keySelector) {\n    this.compare = compare;\n    this.keySelector = keySelector;\n  }\n  DistinctUntilChangedOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));\n  };\n  return DistinctUntilChangedOperator;\n}();\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\nvar DistinctUntilChangedSubscriber = function (_super) {\n  __extends(DistinctUntilChangedSubscriber, _super);\n  function DistinctUntilChangedSubscriber(destination, compare, keySelector) {\n    _super.call(this, destination);\n    this.keySelector = keySelector;\n    this.hasKey = false;\n    if (typeof compare === 'function') {\n      this.compare = compare;\n    }\n  }\n  DistinctUntilChangedSubscriber.prototype.compare = function (x, y) {\n    return x === y;\n  };\n  DistinctUntilChangedSubscriber.prototype._next = function (value) {\n    var keySelector = this.keySelector;\n    var key = value;\n    if (keySelector) {\n      key = tryCatch_1.tryCatch(this.keySelector)(value);\n      if (key === errorObject_1.errorObject) {\n        return this.destination.error(errorObject_1.errorObject.e);\n      }\n    }\n    var result = false;\n    if (this.hasKey) {\n      result = tryCatch_1.tryCatch(this.compare)(this.key, key);\n      if (result === errorObject_1.errorObject) {\n        return this.destination.error(errorObject_1.errorObject.e);\n      }\n    } else {\n      this.hasKey = true;\n    }\n    if (Boolean(result) === false) {\n      this.key = key;\n      this.destination.next(value);\n    }\n  };\n  return DistinctUntilChangedSubscriber;\n}(Subscriber_1.Subscriber);","map":{"version":3,"names":["__extends","d","b","p","hasOwnProperty","__","constructor","prototype","Object","create","Subscriber_1","require","tryCatch_1","errorObject_1","distinctUntilChanged","compare","keySelector","source","lift","DistinctUntilChangedOperator","exports","call","subscriber","subscribe","DistinctUntilChangedSubscriber","_super","destination","hasKey","x","y","_next","value","key","tryCatch","errorObject","error","e","result","Boolean","next","Subscriber"],"sources":["C:/Users/HP/Desktop/4SE3/PidevSym/PiDev_Spring_Angular/Front-End/frontOffice/node_modules/ng5-slider/node_modules/rxjs/operators/distinctUntilChanged.js"],"sourcesContent":["\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar Subscriber_1 = require('../Subscriber');\r\nvar tryCatch_1 = require('../util/tryCatch');\r\nvar errorObject_1 = require('../util/errorObject');\r\n/* tslint:enable:max-line-length */\r\n/**\r\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\r\n *\r\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\r\n *\r\n * If a comparator function is not provided, an equality check is used by default.\r\n *\r\n * @example <caption>A simple example with numbers</caption>\r\n * Observable.of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4)\r\n *   .distinctUntilChanged()\r\n *   .subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4\r\n *\r\n * @example <caption>An example using a compare function</caption>\r\n * interface Person {\r\n *    age: number,\r\n *    name: string\r\n * }\r\n *\r\n * Observable.of<Person>(\r\n *     { age: 4, name: 'Foo'},\r\n *     { age: 7, name: 'Bar'},\r\n *     { age: 5, name: 'Foo'})\r\n *     { age: 6, name: 'Foo'})\r\n *     .distinctUntilChanged((p: Person, q: Person) => p.name === q.name)\r\n *     .subscribe(x => console.log(x));\r\n *\r\n * // displays:\r\n * // { age: 4, name: 'Foo' }\r\n * // { age: 7, name: 'Bar' }\r\n * // { age: 5, name: 'Foo' }\r\n *\r\n * @see {@link distinct}\r\n * @see {@link distinctUntilKeyChanged}\r\n *\r\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\r\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\r\n * @method distinctUntilChanged\r\n * @owner Observable\r\n */\r\nfunction distinctUntilChanged(compare, keySelector) {\r\n    return function (source) { return source.lift(new DistinctUntilChangedOperator(compare, keySelector)); };\r\n}\r\nexports.distinctUntilChanged = distinctUntilChanged;\r\nvar DistinctUntilChangedOperator = (function () {\r\n    function DistinctUntilChangedOperator(compare, keySelector) {\r\n        this.compare = compare;\r\n        this.keySelector = keySelector;\r\n    }\r\n    DistinctUntilChangedOperator.prototype.call = function (subscriber, source) {\r\n        return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));\r\n    };\r\n    return DistinctUntilChangedOperator;\r\n}());\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nvar DistinctUntilChangedSubscriber = (function (_super) {\r\n    __extends(DistinctUntilChangedSubscriber, _super);\r\n    function DistinctUntilChangedSubscriber(destination, compare, keySelector) {\r\n        _super.call(this, destination);\r\n        this.keySelector = keySelector;\r\n        this.hasKey = false;\r\n        if (typeof compare === 'function') {\r\n            this.compare = compare;\r\n        }\r\n    }\r\n    DistinctUntilChangedSubscriber.prototype.compare = function (x, y) {\r\n        return x === y;\r\n    };\r\n    DistinctUntilChangedSubscriber.prototype._next = function (value) {\r\n        var keySelector = this.keySelector;\r\n        var key = value;\r\n        if (keySelector) {\r\n            key = tryCatch_1.tryCatch(this.keySelector)(value);\r\n            if (key === errorObject_1.errorObject) {\r\n                return this.destination.error(errorObject_1.errorObject.e);\r\n            }\r\n        }\r\n        var result = false;\r\n        if (this.hasKey) {\r\n            result = tryCatch_1.tryCatch(this.compare)(this.key, key);\r\n            if (result === errorObject_1.errorObject) {\r\n                return this.destination.error(errorObject_1.errorObject.e);\r\n            }\r\n        }\r\n        else {\r\n            this.hasKey = true;\r\n        }\r\n        if (Boolean(result) === false) {\r\n            this.key = key;\r\n            this.destination.next(value);\r\n        }\r\n    };\r\n    return DistinctUntilChangedSubscriber;\r\n}(Subscriber_1.Subscriber));\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}