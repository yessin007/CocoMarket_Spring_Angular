{"ast":null,"code":"\"use strict\";\n\nvar scan_1 = require('./scan');\nvar takeLast_1 = require('./takeLast');\nvar defaultIfEmpty_1 = require('./defaultIfEmpty');\nvar pipe_1 = require('../util/pipe');\n/* tslint:enable:max-line-length */\n/**\r\n * Applies an accumulator function over the source Observable, and returns the\r\n * accumulated result when the source completes, given an optional seed value.\r\n *\r\n * <span class=\"informal\">Combines together all values emitted on the source,\r\n * using an accumulator function that knows how to join a new source value into\r\n * the accumulation from the past.</span>\r\n *\r\n * <img src=\"./img/reduce.png\" width=\"100%\">\r\n *\r\n * Like\r\n * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),\r\n * `reduce` applies an `accumulator` function against an accumulation and each\r\n * value of the source Observable (from the past) to reduce it to a single\r\n * value, emitted on the output Observable. Note that `reduce` will only emit\r\n * one value, only when the source Observable completes. It is equivalent to\r\n * applying operator {@link scan} followed by operator {@link last}.\r\n *\r\n * Returns an Observable that applies a specified `accumulator` function to each\r\n * item emitted by the source Observable. If a `seed` value is specified, then\r\n * that value will be used as the initial value for the accumulator. If no seed\r\n * value is specified, the first item of the source is used as the seed.\r\n *\r\n * @example <caption>Count the number of click events that happened in 5 seconds</caption>\r\n * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')\r\n *   .takeUntil(Rx.Observable.interval(5000));\r\n * var ones = clicksInFiveSeconds.mapTo(1);\r\n * var seed = 0;\r\n * var count = ones.reduce((acc, one) => acc + one, seed);\r\n * count.subscribe(x => console.log(x));\r\n *\r\n * @see {@link count}\r\n * @see {@link expand}\r\n * @see {@link mergeScan}\r\n * @see {@link scan}\r\n *\r\n * @param {function(acc: R, value: T, index: number): R} accumulator The accumulator function\r\n * called on each source value.\r\n * @param {R} [seed] The initial accumulation value.\r\n * @return {Observable<R>} An Observable that emits a single value that is the\r\n * result of accumulating the values emitted by the source Observable.\r\n * @method reduce\r\n * @owner Observable\r\n */\nfunction reduce(accumulator, seed) {\n  // providing a seed of `undefined` *should* be valid and trigger\n  // hasSeed! so don't use `seed !== undefined` checks!\n  // For this reason, we have to check it here at the original call site\n  // otherwise inside Operator/Subscriber we won't know if `undefined`\n  // means they didn't provide anything or if they literally provided `undefined`\n  if (arguments.length >= 2) {\n    return function reduceOperatorFunctionWithSeed(source) {\n      return pipe_1.pipe(scan_1.scan(accumulator, seed), takeLast_1.takeLast(1), defaultIfEmpty_1.defaultIfEmpty(seed))(source);\n    };\n  }\n  return function reduceOperatorFunction(source) {\n    return pipe_1.pipe(scan_1.scan(function (acc, value, index) {\n      return accumulator(acc, value, index + 1);\n    }), takeLast_1.takeLast(1))(source);\n  };\n}\nexports.reduce = reduce;","map":{"version":3,"names":["scan_1","require","takeLast_1","defaultIfEmpty_1","pipe_1","reduce","accumulator","seed","arguments","length","reduceOperatorFunctionWithSeed","source","pipe","scan","takeLast","defaultIfEmpty","reduceOperatorFunction","acc","value","index","exports"],"sources":["C:/Users/HP/Desktop/4SE3/PidevSym/PiDev_Spring_Angular/Front-End/frontOffice/node_modules/ng5-slider/node_modules/rxjs/operators/reduce.js"],"sourcesContent":["\"use strict\";\r\nvar scan_1 = require('./scan');\r\nvar takeLast_1 = require('./takeLast');\r\nvar defaultIfEmpty_1 = require('./defaultIfEmpty');\r\nvar pipe_1 = require('../util/pipe');\r\n/* tslint:enable:max-line-length */\r\n/**\r\n * Applies an accumulator function over the source Observable, and returns the\r\n * accumulated result when the source completes, given an optional seed value.\r\n *\r\n * <span class=\"informal\">Combines together all values emitted on the source,\r\n * using an accumulator function that knows how to join a new source value into\r\n * the accumulation from the past.</span>\r\n *\r\n * <img src=\"./img/reduce.png\" width=\"100%\">\r\n *\r\n * Like\r\n * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),\r\n * `reduce` applies an `accumulator` function against an accumulation and each\r\n * value of the source Observable (from the past) to reduce it to a single\r\n * value, emitted on the output Observable. Note that `reduce` will only emit\r\n * one value, only when the source Observable completes. It is equivalent to\r\n * applying operator {@link scan} followed by operator {@link last}.\r\n *\r\n * Returns an Observable that applies a specified `accumulator` function to each\r\n * item emitted by the source Observable. If a `seed` value is specified, then\r\n * that value will be used as the initial value for the accumulator. If no seed\r\n * value is specified, the first item of the source is used as the seed.\r\n *\r\n * @example <caption>Count the number of click events that happened in 5 seconds</caption>\r\n * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')\r\n *   .takeUntil(Rx.Observable.interval(5000));\r\n * var ones = clicksInFiveSeconds.mapTo(1);\r\n * var seed = 0;\r\n * var count = ones.reduce((acc, one) => acc + one, seed);\r\n * count.subscribe(x => console.log(x));\r\n *\r\n * @see {@link count}\r\n * @see {@link expand}\r\n * @see {@link mergeScan}\r\n * @see {@link scan}\r\n *\r\n * @param {function(acc: R, value: T, index: number): R} accumulator The accumulator function\r\n * called on each source value.\r\n * @param {R} [seed] The initial accumulation value.\r\n * @return {Observable<R>} An Observable that emits a single value that is the\r\n * result of accumulating the values emitted by the source Observable.\r\n * @method reduce\r\n * @owner Observable\r\n */\r\nfunction reduce(accumulator, seed) {\r\n    // providing a seed of `undefined` *should* be valid and trigger\r\n    // hasSeed! so don't use `seed !== undefined` checks!\r\n    // For this reason, we have to check it here at the original call site\r\n    // otherwise inside Operator/Subscriber we won't know if `undefined`\r\n    // means they didn't provide anything or if they literally provided `undefined`\r\n    if (arguments.length >= 2) {\r\n        return function reduceOperatorFunctionWithSeed(source) {\r\n            return pipe_1.pipe(scan_1.scan(accumulator, seed), takeLast_1.takeLast(1), defaultIfEmpty_1.defaultIfEmpty(seed))(source);\r\n        };\r\n    }\r\n    return function reduceOperatorFunction(source) {\r\n        return pipe_1.pipe(scan_1.scan(function (acc, value, index) {\r\n            return accumulator(acc, value, index + 1);\r\n        }), takeLast_1.takeLast(1))(source);\r\n    };\r\n}\r\nexports.reduce = reduce;\r\n"],"mappings":"AAAA,YAAY;;AACZ,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAC9B,IAAIC,UAAU,GAAGD,OAAO,CAAC,YAAY,CAAC;AACtC,IAAIE,gBAAgB,GAAGF,OAAO,CAAC,kBAAkB,CAAC;AAClD,IAAIG,MAAM,GAAGH,OAAO,CAAC,cAAc,CAAC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASI,MAAM,CAACC,WAAW,EAAEC,IAAI,EAAE;EAC/B;EACA;EACA;EACA;EACA;EACA,IAAIC,SAAS,CAACC,MAAM,IAAI,CAAC,EAAE;IACvB,OAAO,SAASC,8BAA8B,CAACC,MAAM,EAAE;MACnD,OAAOP,MAAM,CAACQ,IAAI,CAACZ,MAAM,CAACa,IAAI,CAACP,WAAW,EAAEC,IAAI,CAAC,EAAEL,UAAU,CAACY,QAAQ,CAAC,CAAC,CAAC,EAAEX,gBAAgB,CAACY,cAAc,CAACR,IAAI,CAAC,CAAC,CAACI,MAAM,CAAC;IAC7H,CAAC;EACL;EACA,OAAO,SAASK,sBAAsB,CAACL,MAAM,EAAE;IAC3C,OAAOP,MAAM,CAACQ,IAAI,CAACZ,MAAM,CAACa,IAAI,CAAC,UAAUI,GAAG,EAAEC,KAAK,EAAEC,KAAK,EAAE;MACxD,OAAOb,WAAW,CAACW,GAAG,EAAEC,KAAK,EAAEC,KAAK,GAAG,CAAC,CAAC;IAC7C,CAAC,CAAC,EAAEjB,UAAU,CAACY,QAAQ,CAAC,CAAC,CAAC,CAAC,CAACH,MAAM,CAAC;EACvC,CAAC;AACL;AACAS,OAAO,CAACf,MAAM,GAAGA,MAAM"},"metadata":{},"sourceType":"script","externalDependencies":[]}