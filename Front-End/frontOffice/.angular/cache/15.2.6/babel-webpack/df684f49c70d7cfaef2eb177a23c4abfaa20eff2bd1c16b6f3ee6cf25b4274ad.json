{"ast":null,"code":"\"use strict\";\n\nvar ConnectableObservable_1 = require('../observable/ConnectableObservable');\n/* tslint:enable:max-line-length */\n/**\r\n * Returns an Observable that emits the results of invoking a specified selector on items\r\n * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.\r\n *\r\n * <img src=\"./img/multicast.png\" width=\"100%\">\r\n *\r\n * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate subject through\r\n * which the source sequence's elements will be multicast to the selector function\r\n * or Subject to push source elements into.\r\n * @param {Function} [selector] - Optional selector function that can use the multicasted source stream\r\n * as many times as needed, without causing multiple subscriptions to the source stream.\r\n * Subscribers to the given source will receive all notifications of the source from the\r\n * time of the subscription forward.\r\n * @return {Observable} An Observable that emits the results of invoking the selector\r\n * on the items emitted by a `ConnectableObservable` that shares a single subscription to\r\n * the underlying stream.\r\n * @method multicast\r\n * @owner Observable\r\n */\nfunction multicast(subjectOrSubjectFactory, selector) {\n  return function multicastOperatorFunction(source) {\n    var subjectFactory;\n    if (typeof subjectOrSubjectFactory === 'function') {\n      subjectFactory = subjectOrSubjectFactory;\n    } else {\n      subjectFactory = function subjectFactory() {\n        return subjectOrSubjectFactory;\n      };\n    }\n    if (typeof selector === 'function') {\n      return source.lift(new MulticastOperator(subjectFactory, selector));\n    }\n    var connectable = Object.create(source, ConnectableObservable_1.connectableObservableDescriptor);\n    connectable.source = source;\n    connectable.subjectFactory = subjectFactory;\n    return connectable;\n  };\n}\nexports.multicast = multicast;\nvar MulticastOperator = function () {\n  function MulticastOperator(subjectFactory, selector) {\n    this.subjectFactory = subjectFactory;\n    this.selector = selector;\n  }\n  MulticastOperator.prototype.call = function (subscriber, source) {\n    var selector = this.selector;\n    var subject = this.subjectFactory();\n    var subscription = selector(subject).subscribe(subscriber);\n    subscription.add(source.subscribe(subject));\n    return subscription;\n  };\n  return MulticastOperator;\n}();\nexports.MulticastOperator = MulticastOperator;","map":{"version":3,"names":["ConnectableObservable_1","require","multicast","subjectOrSubjectFactory","selector","multicastOperatorFunction","source","subjectFactory","lift","MulticastOperator","connectable","Object","create","connectableObservableDescriptor","exports","prototype","call","subscriber","subject","subscription","subscribe","add"],"sources":["C:/Users/HP/Desktop/4SE3/PidevSym/PiDev_Spring_Angular/Front-End/frontOffice/node_modules/ng5-slider/node_modules/rxjs/operators/multicast.js"],"sourcesContent":["\"use strict\";\r\nvar ConnectableObservable_1 = require('../observable/ConnectableObservable');\r\n/* tslint:enable:max-line-length */\r\n/**\r\n * Returns an Observable that emits the results of invoking a specified selector on items\r\n * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.\r\n *\r\n * <img src=\"./img/multicast.png\" width=\"100%\">\r\n *\r\n * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate subject through\r\n * which the source sequence's elements will be multicast to the selector function\r\n * or Subject to push source elements into.\r\n * @param {Function} [selector] - Optional selector function that can use the multicasted source stream\r\n * as many times as needed, without causing multiple subscriptions to the source stream.\r\n * Subscribers to the given source will receive all notifications of the source from the\r\n * time of the subscription forward.\r\n * @return {Observable} An Observable that emits the results of invoking the selector\r\n * on the items emitted by a `ConnectableObservable` that shares a single subscription to\r\n * the underlying stream.\r\n * @method multicast\r\n * @owner Observable\r\n */\r\nfunction multicast(subjectOrSubjectFactory, selector) {\r\n    return function multicastOperatorFunction(source) {\r\n        var subjectFactory;\r\n        if (typeof subjectOrSubjectFactory === 'function') {\r\n            subjectFactory = subjectOrSubjectFactory;\r\n        }\r\n        else {\r\n            subjectFactory = function subjectFactory() {\r\n                return subjectOrSubjectFactory;\r\n            };\r\n        }\r\n        if (typeof selector === 'function') {\r\n            return source.lift(new MulticastOperator(subjectFactory, selector));\r\n        }\r\n        var connectable = Object.create(source, ConnectableObservable_1.connectableObservableDescriptor);\r\n        connectable.source = source;\r\n        connectable.subjectFactory = subjectFactory;\r\n        return connectable;\r\n    };\r\n}\r\nexports.multicast = multicast;\r\nvar MulticastOperator = (function () {\r\n    function MulticastOperator(subjectFactory, selector) {\r\n        this.subjectFactory = subjectFactory;\r\n        this.selector = selector;\r\n    }\r\n    MulticastOperator.prototype.call = function (subscriber, source) {\r\n        var selector = this.selector;\r\n        var subject = this.subjectFactory();\r\n        var subscription = selector(subject).subscribe(subscriber);\r\n        subscription.add(source.subscribe(subject));\r\n        return subscription;\r\n    };\r\n    return MulticastOperator;\r\n}());\r\nexports.MulticastOperator = MulticastOperator;\r\n"],"mappings":"AAAA,YAAY;;AACZ,IAAIA,uBAAuB,GAAGC,OAAO,CAAC,qCAAqC,CAAC;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,SAAS,CAACC,uBAAuB,EAAEC,QAAQ,EAAE;EAClD,OAAO,SAASC,yBAAyB,CAACC,MAAM,EAAE;IAC9C,IAAIC,cAAc;IAClB,IAAI,OAAOJ,uBAAuB,KAAK,UAAU,EAAE;MAC/CI,cAAc,GAAGJ,uBAAuB;IAC5C,CAAC,MACI;MACDI,cAAc,GAAG,SAASA,cAAc,GAAG;QACvC,OAAOJ,uBAAuB;MAClC,CAAC;IACL;IACA,IAAI,OAAOC,QAAQ,KAAK,UAAU,EAAE;MAChC,OAAOE,MAAM,CAACE,IAAI,CAAC,IAAIC,iBAAiB,CAACF,cAAc,EAAEH,QAAQ,CAAC,CAAC;IACvE;IACA,IAAIM,WAAW,GAAGC,MAAM,CAACC,MAAM,CAACN,MAAM,EAAEN,uBAAuB,CAACa,+BAA+B,CAAC;IAChGH,WAAW,CAACJ,MAAM,GAAGA,MAAM;IAC3BI,WAAW,CAACH,cAAc,GAAGA,cAAc;IAC3C,OAAOG,WAAW;EACtB,CAAC;AACL;AACAI,OAAO,CAACZ,SAAS,GAAGA,SAAS;AAC7B,IAAIO,iBAAiB,GAAI,YAAY;EACjC,SAASA,iBAAiB,CAACF,cAAc,EAAEH,QAAQ,EAAE;IACjD,IAAI,CAACG,cAAc,GAAGA,cAAc;IACpC,IAAI,CAACH,QAAQ,GAAGA,QAAQ;EAC5B;EACAK,iBAAiB,CAACM,SAAS,CAACC,IAAI,GAAG,UAAUC,UAAU,EAAEX,MAAM,EAAE;IAC7D,IAAIF,QAAQ,GAAG,IAAI,CAACA,QAAQ;IAC5B,IAAIc,OAAO,GAAG,IAAI,CAACX,cAAc,EAAE;IACnC,IAAIY,YAAY,GAAGf,QAAQ,CAACc,OAAO,CAAC,CAACE,SAAS,CAACH,UAAU,CAAC;IAC1DE,YAAY,CAACE,GAAG,CAACf,MAAM,CAACc,SAAS,CAACF,OAAO,CAAC,CAAC;IAC3C,OAAOC,YAAY;EACvB,CAAC;EACD,OAAOV,iBAAiB;AAC5B,CAAC,EAAG;AACJK,OAAO,CAACL,iBAAiB,GAAGA,iBAAiB"},"metadata":{},"sourceType":"script","externalDependencies":[]}