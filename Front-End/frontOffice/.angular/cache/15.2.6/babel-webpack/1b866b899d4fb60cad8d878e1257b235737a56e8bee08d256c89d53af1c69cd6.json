{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Immediate_1 = require('../util/Immediate');\nvar AsyncAction_1 = require('./AsyncAction');\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\nvar AsapAction = function (_super) {\n  __extends(AsapAction, _super);\n  function AsapAction(scheduler, work) {\n    _super.call(this, scheduler, work);\n    this.scheduler = scheduler;\n    this.work = work;\n  }\n  AsapAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If a microtask has already been scheduled, don't schedule another\n    // one. If a microtask hasn't been scheduled yet, schedule one now. Return\n    // the current scheduled microtask id.\n    return scheduler.scheduled || (scheduler.scheduled = Immediate_1.Immediate.setImmediate(scheduler.flush.bind(scheduler, null)));\n  };\n  AsapAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if (delay !== null && delay > 0 || delay === null && this.delay > 0) {\n      return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);\n    }\n    // If the scheduler queue is empty, cancel the requested microtask and\n    // set the scheduled flag to undefined so the next AsapAction will schedule\n    // its own.\n    if (scheduler.actions.length === 0) {\n      Immediate_1.Immediate.clearImmediate(id);\n      scheduler.scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  };\n  return AsapAction;\n}(AsyncAction_1.AsyncAction);\nexports.AsapAction = AsapAction;","map":{"version":3,"names":["__extends","d","b","p","hasOwnProperty","__","constructor","prototype","Object","create","Immediate_1","require","AsyncAction_1","AsapAction","_super","scheduler","work","call","requestAsyncId","id","delay","actions","push","scheduled","Immediate","setImmediate","flush","bind","recycleAsyncId","length","clearImmediate","undefined","AsyncAction","exports"],"sources":["C:/Users/HP/Desktop/4SE3/PidevSym/PiDev_Spring_Angular/Front-End/frontOffice/node_modules/ng5-slider/node_modules/rxjs/scheduler/AsapAction.js"],"sourcesContent":["\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar Immediate_1 = require('../util/Immediate');\r\nvar AsyncAction_1 = require('./AsyncAction');\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nvar AsapAction = (function (_super) {\r\n    __extends(AsapAction, _super);\r\n    function AsapAction(scheduler, work) {\r\n        _super.call(this, scheduler, work);\r\n        this.scheduler = scheduler;\r\n        this.work = work;\r\n    }\r\n    AsapAction.prototype.requestAsyncId = function (scheduler, id, delay) {\r\n        if (delay === void 0) { delay = 0; }\r\n        // If delay is greater than 0, request as an async action.\r\n        if (delay !== null && delay > 0) {\r\n            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);\r\n        }\r\n        // Push the action to the end of the scheduler queue.\r\n        scheduler.actions.push(this);\r\n        // If a microtask has already been scheduled, don't schedule another\r\n        // one. If a microtask hasn't been scheduled yet, schedule one now. Return\r\n        // the current scheduled microtask id.\r\n        return scheduler.scheduled || (scheduler.scheduled = Immediate_1.Immediate.setImmediate(scheduler.flush.bind(scheduler, null)));\r\n    };\r\n    AsapAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\r\n        if (delay === void 0) { delay = 0; }\r\n        // If delay exists and is greater than 0, or if the delay is null (the\r\n        // action wasn't rescheduled) but was originally scheduled as an async\r\n        // action, then recycle as an async action.\r\n        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\r\n            return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);\r\n        }\r\n        // If the scheduler queue is empty, cancel the requested microtask and\r\n        // set the scheduled flag to undefined so the next AsapAction will schedule\r\n        // its own.\r\n        if (scheduler.actions.length === 0) {\r\n            Immediate_1.Immediate.clearImmediate(id);\r\n            scheduler.scheduled = undefined;\r\n        }\r\n        // Return undefined so the action knows to request a new async id if it's rescheduled.\r\n        return undefined;\r\n    };\r\n    return AsapAction;\r\n}(AsyncAction_1.AsyncAction));\r\nexports.AsapAction = AsapAction;\r\n"],"mappings":"AAAA,YAAY;;AACZ,IAAIA,SAAS,GAAI,IAAI,IAAI,IAAI,CAACA,SAAS,IAAK,UAAUC,CAAC,EAAEC,CAAC,EAAE;EACxD,KAAK,IAAIC,CAAC,IAAID,CAAC,EAAE,IAAIA,CAAC,CAACE,cAAc,CAACD,CAAC,CAAC,EAAEF,CAAC,CAACE,CAAC,CAAC,GAAGD,CAAC,CAACC,CAAC,CAAC;EACrD,SAASE,EAAE,GAAG;IAAE,IAAI,CAACC,WAAW,GAAGL,CAAC;EAAE;EACtCA,CAAC,CAACM,SAAS,GAAGL,CAAC,KAAK,IAAI,GAAGM,MAAM,CAACC,MAAM,CAACP,CAAC,CAAC,IAAIG,EAAE,CAACE,SAAS,GAAGL,CAAC,CAACK,SAAS,EAAE,IAAIF,EAAE,EAAE,CAAC;AACxF,CAAC;AACD,IAAIK,WAAW,GAAGC,OAAO,CAAC,mBAAmB,CAAC;AAC9C,IAAIC,aAAa,GAAGD,OAAO,CAAC,eAAe,CAAC;AAC5C;AACA;AACA;AACA;AACA;AACA,IAAIE,UAAU,GAAI,UAAUC,MAAM,EAAE;EAChCd,SAAS,CAACa,UAAU,EAAEC,MAAM,CAAC;EAC7B,SAASD,UAAU,CAACE,SAAS,EAAEC,IAAI,EAAE;IACjCF,MAAM,CAACG,IAAI,CAAC,IAAI,EAAEF,SAAS,EAAEC,IAAI,CAAC;IAClC,IAAI,CAACD,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACC,IAAI,GAAGA,IAAI;EACpB;EACAH,UAAU,CAACN,SAAS,CAACW,cAAc,GAAG,UAAUH,SAAS,EAAEI,EAAE,EAAEC,KAAK,EAAE;IAClE,IAAIA,KAAK,KAAK,KAAK,CAAC,EAAE;MAAEA,KAAK,GAAG,CAAC;IAAE;IACnC;IACA,IAAIA,KAAK,KAAK,IAAI,IAAIA,KAAK,GAAG,CAAC,EAAE;MAC7B,OAAON,MAAM,CAACP,SAAS,CAACW,cAAc,CAACD,IAAI,CAAC,IAAI,EAAEF,SAAS,EAAEI,EAAE,EAAEC,KAAK,CAAC;IAC3E;IACA;IACAL,SAAS,CAACM,OAAO,CAACC,IAAI,CAAC,IAAI,CAAC;IAC5B;IACA;IACA;IACA,OAAOP,SAAS,CAACQ,SAAS,KAAKR,SAAS,CAACQ,SAAS,GAAGb,WAAW,CAACc,SAAS,CAACC,YAAY,CAACV,SAAS,CAACW,KAAK,CAACC,IAAI,CAACZ,SAAS,EAAE,IAAI,CAAC,CAAC,CAAC;EACnI,CAAC;EACDF,UAAU,CAACN,SAAS,CAACqB,cAAc,GAAG,UAAUb,SAAS,EAAEI,EAAE,EAAEC,KAAK,EAAE;IAClE,IAAIA,KAAK,KAAK,KAAK,CAAC,EAAE;MAAEA,KAAK,GAAG,CAAC;IAAE;IACnC;IACA;IACA;IACA,IAAKA,KAAK,KAAK,IAAI,IAAIA,KAAK,GAAG,CAAC,IAAMA,KAAK,KAAK,IAAI,IAAI,IAAI,CAACA,KAAK,GAAG,CAAE,EAAE;MACrE,OAAON,MAAM,CAACP,SAAS,CAACqB,cAAc,CAACX,IAAI,CAAC,IAAI,EAAEF,SAAS,EAAEI,EAAE,EAAEC,KAAK,CAAC;IAC3E;IACA;IACA;IACA;IACA,IAAIL,SAAS,CAACM,OAAO,CAACQ,MAAM,KAAK,CAAC,EAAE;MAChCnB,WAAW,CAACc,SAAS,CAACM,cAAc,CAACX,EAAE,CAAC;MACxCJ,SAAS,CAACQ,SAAS,GAAGQ,SAAS;IACnC;IACA;IACA,OAAOA,SAAS;EACpB,CAAC;EACD,OAAOlB,UAAU;AACrB,CAAC,CAACD,aAAa,CAACoB,WAAW,CAAE;AAC7BC,OAAO,CAACpB,UAAU,GAAGA,UAAU"},"metadata":{},"sourceType":"script","externalDependencies":[]}