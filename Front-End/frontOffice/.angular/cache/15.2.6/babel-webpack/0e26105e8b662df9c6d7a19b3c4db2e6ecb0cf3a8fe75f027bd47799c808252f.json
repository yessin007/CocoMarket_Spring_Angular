{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar Subject_1 = require('../Subject');\n/**\r\n * Branch out the source Observable values as a nested Observable with each\r\n * nested Observable emitting at most `windowSize` values.\r\n *\r\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\r\n * Observable instead of an array.</span>\r\n *\r\n * <img src=\"./img/windowCount.png\" width=\"100%\">\r\n *\r\n * Returns an Observable that emits windows of items it collects from the source\r\n * Observable. The output Observable emits windows every `startWindowEvery`\r\n * items, each containing no more than `windowSize` items. When the source\r\n * Observable completes or encounters an error, the output Observable emits\r\n * the current window and propagates the notification from the source\r\n * Observable. If `startWindowEvery` is not provided, then new windows are\r\n * started immediately at the start of the source and when each window completes\r\n * with size `windowSize`.\r\n *\r\n * @example <caption>Ignore every 3rd click event, starting from the first one</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var result = clicks.windowCount(3)\r\n *   .map(win => win.skip(1)) // skip first of every 3 clicks\r\n *   .mergeAll(); // flatten the Observable-of-Observables\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * @example <caption>Ignore every 3rd click event, starting from the third one</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var result = clicks.windowCount(2, 3)\r\n *   .mergeAll(); // flatten the Observable-of-Observables\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * @see {@link window}\r\n * @see {@link windowTime}\r\n * @see {@link windowToggle}\r\n * @see {@link windowWhen}\r\n * @see {@link bufferCount}\r\n *\r\n * @param {number} windowSize The maximum number of values emitted by each\r\n * window.\r\n * @param {number} [startWindowEvery] Interval at which to start a new window.\r\n * For example if `startWindowEvery` is `2`, then a new window will be started\r\n * on every other value from the source. A new window is started at the\r\n * beginning of the source by default.\r\n * @return {Observable<Observable<T>>} An Observable of windows, which in turn\r\n * are Observable of values.\r\n * @method windowCount\r\n * @owner Observable\r\n */\nfunction windowCount(windowSize, startWindowEvery) {\n  if (startWindowEvery === void 0) {\n    startWindowEvery = 0;\n  }\n  return function windowCountOperatorFunction(source) {\n    return source.lift(new WindowCountOperator(windowSize, startWindowEvery));\n  };\n}\nexports.windowCount = windowCount;\nvar WindowCountOperator = function () {\n  function WindowCountOperator(windowSize, startWindowEvery) {\n    this.windowSize = windowSize;\n    this.startWindowEvery = startWindowEvery;\n  }\n  WindowCountOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));\n  };\n  return WindowCountOperator;\n}();\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\nvar WindowCountSubscriber = function (_super) {\n  __extends(WindowCountSubscriber, _super);\n  function WindowCountSubscriber(destination, windowSize, startWindowEvery) {\n    _super.call(this, destination);\n    this.destination = destination;\n    this.windowSize = windowSize;\n    this.startWindowEvery = startWindowEvery;\n    this.windows = [new Subject_1.Subject()];\n    this.count = 0;\n    destination.next(this.windows[0]);\n  }\n  WindowCountSubscriber.prototype._next = function (value) {\n    var startWindowEvery = this.startWindowEvery > 0 ? this.startWindowEvery : this.windowSize;\n    var destination = this.destination;\n    var windowSize = this.windowSize;\n    var windows = this.windows;\n    var len = windows.length;\n    for (var i = 0; i < len && !this.closed; i++) {\n      windows[i].next(value);\n    }\n    var c = this.count - windowSize + 1;\n    if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {\n      windows.shift().complete();\n    }\n    if (++this.count % startWindowEvery === 0 && !this.closed) {\n      var window_1 = new Subject_1.Subject();\n      windows.push(window_1);\n      destination.next(window_1);\n    }\n  };\n  WindowCountSubscriber.prototype._error = function (err) {\n    var windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.closed) {\n        windows.shift().error(err);\n      }\n    }\n    this.destination.error(err);\n  };\n  WindowCountSubscriber.prototype._complete = function () {\n    var windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.closed) {\n        windows.shift().complete();\n      }\n    }\n    this.destination.complete();\n  };\n  /** @deprecated internal use only */\n  WindowCountSubscriber.prototype._unsubscribe = function () {\n    this.count = 0;\n    this.windows = null;\n  };\n  return WindowCountSubscriber;\n}(Subscriber_1.Subscriber);","map":{"version":3,"names":["__extends","d","b","p","hasOwnProperty","__","constructor","prototype","Object","create","Subscriber_1","require","Subject_1","windowCount","windowSize","startWindowEvery","windowCountOperatorFunction","source","lift","WindowCountOperator","exports","call","subscriber","subscribe","WindowCountSubscriber","_super","destination","windows","Subject","count","next","_next","value","len","length","i","closed","c","shift","complete","window_1","push","_error","err","error","_complete","_unsubscribe","Subscriber"],"sources":["C:/Users/HP/Desktop/4SE3/PidevSym/PiDev_Spring_Angular/Front-End/frontOffice/node_modules/ng5-slider/node_modules/rxjs/operators/windowCount.js"],"sourcesContent":["\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar Subscriber_1 = require('../Subscriber');\r\nvar Subject_1 = require('../Subject');\r\n/**\r\n * Branch out the source Observable values as a nested Observable with each\r\n * nested Observable emitting at most `windowSize` values.\r\n *\r\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\r\n * Observable instead of an array.</span>\r\n *\r\n * <img src=\"./img/windowCount.png\" width=\"100%\">\r\n *\r\n * Returns an Observable that emits windows of items it collects from the source\r\n * Observable. The output Observable emits windows every `startWindowEvery`\r\n * items, each containing no more than `windowSize` items. When the source\r\n * Observable completes or encounters an error, the output Observable emits\r\n * the current window and propagates the notification from the source\r\n * Observable. If `startWindowEvery` is not provided, then new windows are\r\n * started immediately at the start of the source and when each window completes\r\n * with size `windowSize`.\r\n *\r\n * @example <caption>Ignore every 3rd click event, starting from the first one</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var result = clicks.windowCount(3)\r\n *   .map(win => win.skip(1)) // skip first of every 3 clicks\r\n *   .mergeAll(); // flatten the Observable-of-Observables\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * @example <caption>Ignore every 3rd click event, starting from the third one</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var result = clicks.windowCount(2, 3)\r\n *   .mergeAll(); // flatten the Observable-of-Observables\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * @see {@link window}\r\n * @see {@link windowTime}\r\n * @see {@link windowToggle}\r\n * @see {@link windowWhen}\r\n * @see {@link bufferCount}\r\n *\r\n * @param {number} windowSize The maximum number of values emitted by each\r\n * window.\r\n * @param {number} [startWindowEvery] Interval at which to start a new window.\r\n * For example if `startWindowEvery` is `2`, then a new window will be started\r\n * on every other value from the source. A new window is started at the\r\n * beginning of the source by default.\r\n * @return {Observable<Observable<T>>} An Observable of windows, which in turn\r\n * are Observable of values.\r\n * @method windowCount\r\n * @owner Observable\r\n */\r\nfunction windowCount(windowSize, startWindowEvery) {\r\n    if (startWindowEvery === void 0) { startWindowEvery = 0; }\r\n    return function windowCountOperatorFunction(source) {\r\n        return source.lift(new WindowCountOperator(windowSize, startWindowEvery));\r\n    };\r\n}\r\nexports.windowCount = windowCount;\r\nvar WindowCountOperator = (function () {\r\n    function WindowCountOperator(windowSize, startWindowEvery) {\r\n        this.windowSize = windowSize;\r\n        this.startWindowEvery = startWindowEvery;\r\n    }\r\n    WindowCountOperator.prototype.call = function (subscriber, source) {\r\n        return source.subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));\r\n    };\r\n    return WindowCountOperator;\r\n}());\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nvar WindowCountSubscriber = (function (_super) {\r\n    __extends(WindowCountSubscriber, _super);\r\n    function WindowCountSubscriber(destination, windowSize, startWindowEvery) {\r\n        _super.call(this, destination);\r\n        this.destination = destination;\r\n        this.windowSize = windowSize;\r\n        this.startWindowEvery = startWindowEvery;\r\n        this.windows = [new Subject_1.Subject()];\r\n        this.count = 0;\r\n        destination.next(this.windows[0]);\r\n    }\r\n    WindowCountSubscriber.prototype._next = function (value) {\r\n        var startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;\r\n        var destination = this.destination;\r\n        var windowSize = this.windowSize;\r\n        var windows = this.windows;\r\n        var len = windows.length;\r\n        for (var i = 0; i < len && !this.closed; i++) {\r\n            windows[i].next(value);\r\n        }\r\n        var c = this.count - windowSize + 1;\r\n        if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {\r\n            windows.shift().complete();\r\n        }\r\n        if (++this.count % startWindowEvery === 0 && !this.closed) {\r\n            var window_1 = new Subject_1.Subject();\r\n            windows.push(window_1);\r\n            destination.next(window_1);\r\n        }\r\n    };\r\n    WindowCountSubscriber.prototype._error = function (err) {\r\n        var windows = this.windows;\r\n        if (windows) {\r\n            while (windows.length > 0 && !this.closed) {\r\n                windows.shift().error(err);\r\n            }\r\n        }\r\n        this.destination.error(err);\r\n    };\r\n    WindowCountSubscriber.prototype._complete = function () {\r\n        var windows = this.windows;\r\n        if (windows) {\r\n            while (windows.length > 0 && !this.closed) {\r\n                windows.shift().complete();\r\n            }\r\n        }\r\n        this.destination.complete();\r\n    };\r\n    /** @deprecated internal use only */ WindowCountSubscriber.prototype._unsubscribe = function () {\r\n        this.count = 0;\r\n        this.windows = null;\r\n    };\r\n    return WindowCountSubscriber;\r\n}(Subscriber_1.Subscriber));\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}