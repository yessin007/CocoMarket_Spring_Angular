{"ast":null,"code":"\"use strict\";\n\nvar count_1 = require('../operators/count');\n/**\r\n * Counts the number of emissions on the source and emits that number when the\r\n * source completes.\r\n *\r\n * <span class=\"informal\">Tells how many values were emitted, when the source\r\n * completes.</span>\r\n *\r\n * <img src=\"./img/count.png\" width=\"100%\">\r\n *\r\n * `count` transforms an Observable that emits values into an Observable that\r\n * emits a single value that represents the number of values emitted by the\r\n * source Observable. If the source Observable terminates with an error, `count`\r\n * will pass this error notification along without emitting a value first. If\r\n * the source Observable does not terminate at all, `count` will neither emit\r\n * a value nor terminate. This operator takes an optional `predicate` function\r\n * as argument, in which case the output emission will represent the number of\r\n * source values that matched `true` with the `predicate`.\r\n *\r\n * @example <caption>Counts how many seconds have passed before the first click happened</caption>\r\n * var seconds = Rx.Observable.interval(1000);\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var secondsBeforeClick = seconds.takeUntil(clicks);\r\n * var result = secondsBeforeClick.count();\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>\r\n * var numbers = Rx.Observable.range(1, 7);\r\n * var result = numbers.count(i => i % 2 === 1);\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * // Results in:\r\n * // 4\r\n *\r\n * @see {@link max}\r\n * @see {@link min}\r\n * @see {@link reduce}\r\n *\r\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\r\n * boolean function to select what values are to be counted. It is provided with\r\n * arguments of:\r\n * - `value`: the value from the source Observable.\r\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\r\n * - `source`: the source Observable instance itself.\r\n * @return {Observable} An Observable of one number that represents the count as\r\n * described above.\r\n * @method count\r\n * @owner Observable\r\n */\nfunction count(predicate) {\n  return count_1.count(predicate)(this);\n}\nexports.count = count;","map":{"version":3,"names":["count_1","require","count","predicate","exports"],"sources":["C:/Users/HP/Desktop/4SE3/PidevSym/PiDev_Spring_Angular/Front-End/frontOffice/node_modules/ng5-slider/node_modules/rxjs/operator/count.js"],"sourcesContent":["\"use strict\";\r\nvar count_1 = require('../operators/count');\r\n/**\r\n * Counts the number of emissions on the source and emits that number when the\r\n * source completes.\r\n *\r\n * <span class=\"informal\">Tells how many values were emitted, when the source\r\n * completes.</span>\r\n *\r\n * <img src=\"./img/count.png\" width=\"100%\">\r\n *\r\n * `count` transforms an Observable that emits values into an Observable that\r\n * emits a single value that represents the number of values emitted by the\r\n * source Observable. If the source Observable terminates with an error, `count`\r\n * will pass this error notification along without emitting a value first. If\r\n * the source Observable does not terminate at all, `count` will neither emit\r\n * a value nor terminate. This operator takes an optional `predicate` function\r\n * as argument, in which case the output emission will represent the number of\r\n * source values that matched `true` with the `predicate`.\r\n *\r\n * @example <caption>Counts how many seconds have passed before the first click happened</caption>\r\n * var seconds = Rx.Observable.interval(1000);\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var secondsBeforeClick = seconds.takeUntil(clicks);\r\n * var result = secondsBeforeClick.count();\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>\r\n * var numbers = Rx.Observable.range(1, 7);\r\n * var result = numbers.count(i => i % 2 === 1);\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * // Results in:\r\n * // 4\r\n *\r\n * @see {@link max}\r\n * @see {@link min}\r\n * @see {@link reduce}\r\n *\r\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\r\n * boolean function to select what values are to be counted. It is provided with\r\n * arguments of:\r\n * - `value`: the value from the source Observable.\r\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\r\n * - `source`: the source Observable instance itself.\r\n * @return {Observable} An Observable of one number that represents the count as\r\n * described above.\r\n * @method count\r\n * @owner Observable\r\n */\r\nfunction count(predicate) {\r\n    return count_1.count(predicate)(this);\r\n}\r\nexports.count = count;\r\n"],"mappings":"AAAA,YAAY;;AACZ,IAAIA,OAAO,GAAGC,OAAO,CAAC,oBAAoB,CAAC;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,KAAK,CAACC,SAAS,EAAE;EACtB,OAAOH,OAAO,CAACE,KAAK,CAACC,SAAS,CAAC,CAAC,IAAI,CAAC;AACzC;AACAC,OAAO,CAACF,KAAK,GAAGA,KAAK"},"metadata":{},"sourceType":"script","externalDependencies":[]}