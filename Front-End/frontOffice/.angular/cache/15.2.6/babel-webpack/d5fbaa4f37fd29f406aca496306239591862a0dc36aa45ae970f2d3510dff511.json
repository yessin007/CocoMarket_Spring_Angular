{"ast":null,"code":"\"use strict\";\n\nvar retry_1 = require('../operators/retry');\n/**\r\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\r\n * calls `error`, this method will resubscribe to the source Observable for a maximum of `count` resubscriptions (given\r\n * as a number parameter) rather than propagating the `error` call.\r\n *\r\n * <img src=\"./img/retry.png\" width=\"100%\">\r\n *\r\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\r\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\r\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\r\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\r\n * @param {number} count - Number of retry attempts before failing.\r\n * @return {Observable} The source Observable modified with the retry logic.\r\n * @method retry\r\n * @owner Observable\r\n */\nfunction retry(count) {\n  if (count === void 0) {\n    count = -1;\n  }\n  return retry_1.retry(count)(this);\n}\nexports.retry = retry;","map":{"version":3,"names":["retry_1","require","retry","count","exports"],"sources":["C:/Users/HP/Desktop/4SE3/PidevSym/PiDev_Spring_Angular/Front-End/frontOffice/node_modules/ng5-slider/node_modules/rxjs/operator/retry.js"],"sourcesContent":["\"use strict\";\r\nvar retry_1 = require('../operators/retry');\r\n/**\r\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\r\n * calls `error`, this method will resubscribe to the source Observable for a maximum of `count` resubscriptions (given\r\n * as a number parameter) rather than propagating the `error` call.\r\n *\r\n * <img src=\"./img/retry.png\" width=\"100%\">\r\n *\r\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\r\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\r\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\r\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\r\n * @param {number} count - Number of retry attempts before failing.\r\n * @return {Observable} The source Observable modified with the retry logic.\r\n * @method retry\r\n * @owner Observable\r\n */\r\nfunction retry(count) {\r\n    if (count === void 0) { count = -1; }\r\n    return retry_1.retry(count)(this);\r\n}\r\nexports.retry = retry;\r\n"],"mappings":"AAAA,YAAY;;AACZ,IAAIA,OAAO,GAAGC,OAAO,CAAC,oBAAoB,CAAC;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,KAAK,CAACC,KAAK,EAAE;EAClB,IAAIA,KAAK,KAAK,KAAK,CAAC,EAAE;IAAEA,KAAK,GAAG,CAAC,CAAC;EAAE;EACpC,OAAOH,OAAO,CAACE,KAAK,CAACC,KAAK,CAAC,CAAC,IAAI,CAAC;AACrC;AACAC,OAAO,CAACF,KAAK,GAAGA,KAAK"},"metadata":{},"sourceType":"script","externalDependencies":[]}