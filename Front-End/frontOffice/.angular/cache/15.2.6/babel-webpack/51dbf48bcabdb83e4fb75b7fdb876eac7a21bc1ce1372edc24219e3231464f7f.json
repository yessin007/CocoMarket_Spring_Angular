{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar async_1 = require('../scheduler/async');\n/**\r\n * Emits the most recently emitted value from the source Observable within\r\n * periodic time intervals.\r\n *\r\n * <span class=\"informal\">Samples the source Observable at periodic time\r\n * intervals, emitting what it samples.</span>\r\n *\r\n * <img src=\"./img/sampleTime.png\" width=\"100%\">\r\n *\r\n * `sampleTime` periodically looks at the source Observable and emits whichever\r\n * value it has most recently emitted since the previous sampling, unless the\r\n * source has not emitted anything since the previous sampling. The sampling\r\n * happens periodically in time every `period` milliseconds (or the time unit\r\n * defined by the optional `scheduler` argument). The sampling starts as soon as\r\n * the output Observable is subscribed.\r\n *\r\n * @example <caption>Every second, emit the most recent click at most once</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var result = clicks.sampleTime(1000);\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * @see {@link auditTime}\r\n * @see {@link debounceTime}\r\n * @see {@link delay}\r\n * @see {@link sample}\r\n * @see {@link throttleTime}\r\n *\r\n * @param {number} period The sampling period expressed in milliseconds or the\r\n * time unit determined internally by the optional `scheduler`.\r\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\r\n * managing the timers that handle the sampling.\r\n * @return {Observable<T>} An Observable that emits the results of sampling the\r\n * values emitted by the source Observable at the specified time interval.\r\n * @method sampleTime\r\n * @owner Observable\r\n */\nfunction sampleTime(period, scheduler) {\n  if (scheduler === void 0) {\n    scheduler = async_1.async;\n  }\n  return function (source) {\n    return source.lift(new SampleTimeOperator(period, scheduler));\n  };\n}\nexports.sampleTime = sampleTime;\nvar SampleTimeOperator = function () {\n  function SampleTimeOperator(period, scheduler) {\n    this.period = period;\n    this.scheduler = scheduler;\n  }\n  SampleTimeOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));\n  };\n  return SampleTimeOperator;\n}();\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\nvar SampleTimeSubscriber = function (_super) {\n  __extends(SampleTimeSubscriber, _super);\n  function SampleTimeSubscriber(destination, period, scheduler) {\n    _super.call(this, destination);\n    this.period = period;\n    this.scheduler = scheduler;\n    this.hasValue = false;\n    this.add(scheduler.schedule(dispatchNotification, period, {\n      subscriber: this,\n      period: period\n    }));\n  }\n  SampleTimeSubscriber.prototype._next = function (value) {\n    this.lastValue = value;\n    this.hasValue = true;\n  };\n  SampleTimeSubscriber.prototype.notifyNext = function () {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.lastValue);\n    }\n  };\n  return SampleTimeSubscriber;\n}(Subscriber_1.Subscriber);\nfunction dispatchNotification(state) {\n  var subscriber = state.subscriber,\n    period = state.period;\n  subscriber.notifyNext();\n  this.schedule(state, period);\n}","map":{"version":3,"names":["__extends","d","b","p","hasOwnProperty","__","constructor","prototype","Object","create","Subscriber_1","require","async_1","sampleTime","period","scheduler","async","source","lift","SampleTimeOperator","exports","call","subscriber","subscribe","SampleTimeSubscriber","_super","destination","hasValue","add","schedule","dispatchNotification","_next","value","lastValue","notifyNext","next","Subscriber","state"],"sources":["C:/Users/HP/Desktop/4SE3/PidevSym/PiDev_Spring_Angular/Front-End/frontOffice/node_modules/ng5-slider/node_modules/rxjs/operators/sampleTime.js"],"sourcesContent":["\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar Subscriber_1 = require('../Subscriber');\r\nvar async_1 = require('../scheduler/async');\r\n/**\r\n * Emits the most recently emitted value from the source Observable within\r\n * periodic time intervals.\r\n *\r\n * <span class=\"informal\">Samples the source Observable at periodic time\r\n * intervals, emitting what it samples.</span>\r\n *\r\n * <img src=\"./img/sampleTime.png\" width=\"100%\">\r\n *\r\n * `sampleTime` periodically looks at the source Observable and emits whichever\r\n * value it has most recently emitted since the previous sampling, unless the\r\n * source has not emitted anything since the previous sampling. The sampling\r\n * happens periodically in time every `period` milliseconds (or the time unit\r\n * defined by the optional `scheduler` argument). The sampling starts as soon as\r\n * the output Observable is subscribed.\r\n *\r\n * @example <caption>Every second, emit the most recent click at most once</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var result = clicks.sampleTime(1000);\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * @see {@link auditTime}\r\n * @see {@link debounceTime}\r\n * @see {@link delay}\r\n * @see {@link sample}\r\n * @see {@link throttleTime}\r\n *\r\n * @param {number} period The sampling period expressed in milliseconds or the\r\n * time unit determined internally by the optional `scheduler`.\r\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\r\n * managing the timers that handle the sampling.\r\n * @return {Observable<T>} An Observable that emits the results of sampling the\r\n * values emitted by the source Observable at the specified time interval.\r\n * @method sampleTime\r\n * @owner Observable\r\n */\r\nfunction sampleTime(period, scheduler) {\r\n    if (scheduler === void 0) { scheduler = async_1.async; }\r\n    return function (source) { return source.lift(new SampleTimeOperator(period, scheduler)); };\r\n}\r\nexports.sampleTime = sampleTime;\r\nvar SampleTimeOperator = (function () {\r\n    function SampleTimeOperator(period, scheduler) {\r\n        this.period = period;\r\n        this.scheduler = scheduler;\r\n    }\r\n    SampleTimeOperator.prototype.call = function (subscriber, source) {\r\n        return source.subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));\r\n    };\r\n    return SampleTimeOperator;\r\n}());\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nvar SampleTimeSubscriber = (function (_super) {\r\n    __extends(SampleTimeSubscriber, _super);\r\n    function SampleTimeSubscriber(destination, period, scheduler) {\r\n        _super.call(this, destination);\r\n        this.period = period;\r\n        this.scheduler = scheduler;\r\n        this.hasValue = false;\r\n        this.add(scheduler.schedule(dispatchNotification, period, { subscriber: this, period: period }));\r\n    }\r\n    SampleTimeSubscriber.prototype._next = function (value) {\r\n        this.lastValue = value;\r\n        this.hasValue = true;\r\n    };\r\n    SampleTimeSubscriber.prototype.notifyNext = function () {\r\n        if (this.hasValue) {\r\n            this.hasValue = false;\r\n            this.destination.next(this.lastValue);\r\n        }\r\n    };\r\n    return SampleTimeSubscriber;\r\n}(Subscriber_1.Subscriber));\r\nfunction dispatchNotification(state) {\r\n    var subscriber = state.subscriber, period = state.period;\r\n    subscriber.notifyNext();\r\n    this.schedule(state, period);\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}