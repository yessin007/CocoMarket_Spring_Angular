{"ast":null,"code":"\"use strict\";\n\nvar max_1 = require('../operators/max');\n/**\r\n * The Max operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\r\n * and when source Observable completes it emits a single item: the item with the largest value.\r\n *\r\n * <img src=\"./img/max.png\" width=\"100%\">\r\n *\r\n * @example <caption>Get the maximal value of a series of numbers</caption>\r\n * Rx.Observable.of(5, 4, 7, 2, 8)\r\n *   .max()\r\n *   .subscribe(x => console.log(x)); // -> 8\r\n *\r\n * @example <caption>Use a comparer function to get the maximal item</caption>\r\n * interface Person {\r\n *   age: number,\r\n *   name: string\r\n * }\r\n * Observable.of<Person>({age: 7, name: 'Foo'},\r\n *                       {age: 5, name: 'Bar'},\r\n *                       {age: 9, name: 'Beer'})\r\n *           .max<Person>((a: Person, b: Person) => a.age < b.age ? -1 : 1)\r\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Beer'\r\n * }\r\n *\r\n * @see {@link min}\r\n *\r\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\r\n * value of two items.\r\n * @return {Observable} An Observable that emits item with the largest value.\r\n * @method max\r\n * @owner Observable\r\n */\nfunction max(comparer) {\n  return max_1.max(comparer)(this);\n}\nexports.max = max;","map":{"version":3,"names":["max_1","require","max","comparer","exports"],"sources":["C:/Users/HP/Desktop/4SE3/PidevSym/PiDev_Spring_Angular/Front-End/frontOffice/node_modules/ng5-slider/node_modules/rxjs/operator/max.js"],"sourcesContent":["\"use strict\";\r\nvar max_1 = require('../operators/max');\r\n/**\r\n * The Max operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\r\n * and when source Observable completes it emits a single item: the item with the largest value.\r\n *\r\n * <img src=\"./img/max.png\" width=\"100%\">\r\n *\r\n * @example <caption>Get the maximal value of a series of numbers</caption>\r\n * Rx.Observable.of(5, 4, 7, 2, 8)\r\n *   .max()\r\n *   .subscribe(x => console.log(x)); // -> 8\r\n *\r\n * @example <caption>Use a comparer function to get the maximal item</caption>\r\n * interface Person {\r\n *   age: number,\r\n *   name: string\r\n * }\r\n * Observable.of<Person>({age: 7, name: 'Foo'},\r\n *                       {age: 5, name: 'Bar'},\r\n *                       {age: 9, name: 'Beer'})\r\n *           .max<Person>((a: Person, b: Person) => a.age < b.age ? -1 : 1)\r\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Beer'\r\n * }\r\n *\r\n * @see {@link min}\r\n *\r\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\r\n * value of two items.\r\n * @return {Observable} An Observable that emits item with the largest value.\r\n * @method max\r\n * @owner Observable\r\n */\r\nfunction max(comparer) {\r\n    return max_1.max(comparer)(this);\r\n}\r\nexports.max = max;\r\n"],"mappings":"AAAA,YAAY;;AACZ,IAAIA,KAAK,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,GAAG,CAACC,QAAQ,EAAE;EACnB,OAAOH,KAAK,CAACE,GAAG,CAACC,QAAQ,CAAC,CAAC,IAAI,CAAC;AACpC;AACAC,OAAO,CAACF,GAAG,GAAGA,GAAG"},"metadata":{},"sourceType":"script","externalDependencies":[]}