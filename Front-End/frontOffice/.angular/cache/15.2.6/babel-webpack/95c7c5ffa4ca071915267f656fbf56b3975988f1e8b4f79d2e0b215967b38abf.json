{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('../Subject');\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\r\n * Branch out the source Observable values as a nested Observable using a\r\n * factory function of closing Observables to determine when to start a new\r\n * window.\r\n *\r\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\r\n * Observable instead of an array.</span>\r\n *\r\n * <img src=\"./img/windowWhen.png\" width=\"100%\">\r\n *\r\n * Returns an Observable that emits windows of items it collects from the source\r\n * Observable. The output Observable emits connected, non-overlapping windows.\r\n * It emits the current window and opens a new one whenever the Observable\r\n * produced by the specified `closingSelector` function emits an item. The first\r\n * window is opened immediately when subscribing to the output Observable.\r\n *\r\n * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var result = clicks\r\n *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))\r\n *   .map(win => win.take(2)) // each window has at most 2 emissions\r\n *   .mergeAll(); // flatten the Observable-of-Observables\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * @see {@link window}\r\n * @see {@link windowCount}\r\n * @see {@link windowTime}\r\n * @see {@link windowToggle}\r\n * @see {@link bufferWhen}\r\n *\r\n * @param {function(): Observable} closingSelector A function that takes no\r\n * arguments and returns an Observable that signals (on either `next` or\r\n * `complete`) when to close the previous window and start a new one.\r\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\r\n * are Observables.\r\n * @method windowWhen\r\n * @owner Observable\r\n */\nfunction windowWhen(closingSelector) {\n  return function windowWhenOperatorFunction(source) {\n    return source.lift(new WindowOperator(closingSelector));\n  };\n}\nexports.windowWhen = windowWhen;\nvar WindowOperator = function () {\n  function WindowOperator(closingSelector) {\n    this.closingSelector = closingSelector;\n  }\n  WindowOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new WindowSubscriber(subscriber, this.closingSelector));\n  };\n  return WindowOperator;\n}();\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\nvar WindowSubscriber = function (_super) {\n  __extends(WindowSubscriber, _super);\n  function WindowSubscriber(destination, closingSelector) {\n    _super.call(this, destination);\n    this.destination = destination;\n    this.closingSelector = closingSelector;\n    this.openWindow();\n  }\n  WindowSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n    this.openWindow(innerSub);\n  };\n  WindowSubscriber.prototype.notifyError = function (error, innerSub) {\n    this._error(error);\n  };\n  WindowSubscriber.prototype.notifyComplete = function (innerSub) {\n    this.openWindow(innerSub);\n  };\n  WindowSubscriber.prototype._next = function (value) {\n    this.window.next(value);\n  };\n  WindowSubscriber.prototype._error = function (err) {\n    this.window.error(err);\n    this.destination.error(err);\n    this.unsubscribeClosingNotification();\n  };\n  WindowSubscriber.prototype._complete = function () {\n    this.window.complete();\n    this.destination.complete();\n    this.unsubscribeClosingNotification();\n  };\n  WindowSubscriber.prototype.unsubscribeClosingNotification = function () {\n    if (this.closingNotification) {\n      this.closingNotification.unsubscribe();\n    }\n  };\n  WindowSubscriber.prototype.openWindow = function (innerSub) {\n    if (innerSub === void 0) {\n      innerSub = null;\n    }\n    if (innerSub) {\n      this.remove(innerSub);\n      innerSub.unsubscribe();\n    }\n    var prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n    var window = this.window = new Subject_1.Subject();\n    this.destination.next(window);\n    var closingNotifier = tryCatch_1.tryCatch(this.closingSelector)();\n    if (closingNotifier === errorObject_1.errorObject) {\n      var err = errorObject_1.errorObject.e;\n      this.destination.error(err);\n      this.window.error(err);\n    } else {\n      this.add(this.closingNotification = subscribeToResult_1.subscribeToResult(this, closingNotifier));\n    }\n  };\n  return WindowSubscriber;\n}(OuterSubscriber_1.OuterSubscriber);","map":{"version":3,"names":["__extends","d","b","p","hasOwnProperty","__","constructor","prototype","Object","create","Subject_1","require","tryCatch_1","errorObject_1","OuterSubscriber_1","subscribeToResult_1","windowWhen","closingSelector","windowWhenOperatorFunction","source","lift","WindowOperator","exports","call","subscriber","subscribe","WindowSubscriber","_super","destination","openWindow","notifyNext","outerValue","innerValue","outerIndex","innerIndex","innerSub","notifyError","error","_error","notifyComplete","_next","value","window","next","err","unsubscribeClosingNotification","_complete","complete","closingNotification","unsubscribe","remove","prevWindow","Subject","closingNotifier","tryCatch","errorObject","e","add","subscribeToResult","OuterSubscriber"],"sources":["C:/Users/HP/Desktop/4SE3/PidevSym/PiDev_Spring_Angular/Front-End/frontOffice/node_modules/ng5-slider/node_modules/rxjs/operators/windowWhen.js"],"sourcesContent":["\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar Subject_1 = require('../Subject');\r\nvar tryCatch_1 = require('../util/tryCatch');\r\nvar errorObject_1 = require('../util/errorObject');\r\nvar OuterSubscriber_1 = require('../OuterSubscriber');\r\nvar subscribeToResult_1 = require('../util/subscribeToResult');\r\n/**\r\n * Branch out the source Observable values as a nested Observable using a\r\n * factory function of closing Observables to determine when to start a new\r\n * window.\r\n *\r\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\r\n * Observable instead of an array.</span>\r\n *\r\n * <img src=\"./img/windowWhen.png\" width=\"100%\">\r\n *\r\n * Returns an Observable that emits windows of items it collects from the source\r\n * Observable. The output Observable emits connected, non-overlapping windows.\r\n * It emits the current window and opens a new one whenever the Observable\r\n * produced by the specified `closingSelector` function emits an item. The first\r\n * window is opened immediately when subscribing to the output Observable.\r\n *\r\n * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var result = clicks\r\n *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))\r\n *   .map(win => win.take(2)) // each window has at most 2 emissions\r\n *   .mergeAll(); // flatten the Observable-of-Observables\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * @see {@link window}\r\n * @see {@link windowCount}\r\n * @see {@link windowTime}\r\n * @see {@link windowToggle}\r\n * @see {@link bufferWhen}\r\n *\r\n * @param {function(): Observable} closingSelector A function that takes no\r\n * arguments and returns an Observable that signals (on either `next` or\r\n * `complete`) when to close the previous window and start a new one.\r\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\r\n * are Observables.\r\n * @method windowWhen\r\n * @owner Observable\r\n */\r\nfunction windowWhen(closingSelector) {\r\n    return function windowWhenOperatorFunction(source) {\r\n        return source.lift(new WindowOperator(closingSelector));\r\n    };\r\n}\r\nexports.windowWhen = windowWhen;\r\nvar WindowOperator = (function () {\r\n    function WindowOperator(closingSelector) {\r\n        this.closingSelector = closingSelector;\r\n    }\r\n    WindowOperator.prototype.call = function (subscriber, source) {\r\n        return source.subscribe(new WindowSubscriber(subscriber, this.closingSelector));\r\n    };\r\n    return WindowOperator;\r\n}());\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nvar WindowSubscriber = (function (_super) {\r\n    __extends(WindowSubscriber, _super);\r\n    function WindowSubscriber(destination, closingSelector) {\r\n        _super.call(this, destination);\r\n        this.destination = destination;\r\n        this.closingSelector = closingSelector;\r\n        this.openWindow();\r\n    }\r\n    WindowSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\r\n        this.openWindow(innerSub);\r\n    };\r\n    WindowSubscriber.prototype.notifyError = function (error, innerSub) {\r\n        this._error(error);\r\n    };\r\n    WindowSubscriber.prototype.notifyComplete = function (innerSub) {\r\n        this.openWindow(innerSub);\r\n    };\r\n    WindowSubscriber.prototype._next = function (value) {\r\n        this.window.next(value);\r\n    };\r\n    WindowSubscriber.prototype._error = function (err) {\r\n        this.window.error(err);\r\n        this.destination.error(err);\r\n        this.unsubscribeClosingNotification();\r\n    };\r\n    WindowSubscriber.prototype._complete = function () {\r\n        this.window.complete();\r\n        this.destination.complete();\r\n        this.unsubscribeClosingNotification();\r\n    };\r\n    WindowSubscriber.prototype.unsubscribeClosingNotification = function () {\r\n        if (this.closingNotification) {\r\n            this.closingNotification.unsubscribe();\r\n        }\r\n    };\r\n    WindowSubscriber.prototype.openWindow = function (innerSub) {\r\n        if (innerSub === void 0) { innerSub = null; }\r\n        if (innerSub) {\r\n            this.remove(innerSub);\r\n            innerSub.unsubscribe();\r\n        }\r\n        var prevWindow = this.window;\r\n        if (prevWindow) {\r\n            prevWindow.complete();\r\n        }\r\n        var window = this.window = new Subject_1.Subject();\r\n        this.destination.next(window);\r\n        var closingNotifier = tryCatch_1.tryCatch(this.closingSelector)();\r\n        if (closingNotifier === errorObject_1.errorObject) {\r\n            var err = errorObject_1.errorObject.e;\r\n            this.destination.error(err);\r\n            this.window.error(err);\r\n        }\r\n        else {\r\n            this.add(this.closingNotification = subscribeToResult_1.subscribeToResult(this, closingNotifier));\r\n        }\r\n    };\r\n    return WindowSubscriber;\r\n}(OuterSubscriber_1.OuterSubscriber));\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}