{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar FromObservable_1 = require('../observable/FromObservable');\nvar isArray_1 = require('../util/isArray');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/* tslint:enable:max-line-length */\n/**\r\n * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one\r\n * that was passed.\r\n *\r\n * <span class=\"informal\">Execute series of Observables no matter what, even if it means swallowing errors.</span>\r\n *\r\n * <img src=\"./img/onErrorResumeNext.png\" width=\"100%\">\r\n *\r\n * `onErrorResumeNext` is an operator that accepts a series of Observables, provided either directly as\r\n * arguments or as an array. If no single Observable is provided, returned Observable will simply behave the same\r\n * as the source.\r\n *\r\n * `onErrorResumeNext` returns an Observable that starts by subscribing and re-emitting values from the source Observable.\r\n * When its stream of values ends - no matter if Observable completed or emitted an error - `onErrorResumeNext`\r\n * will subscribe to the first Observable that was passed as an argument to the method. It will start re-emitting\r\n * its values as well and - again - when that stream ends, `onErrorResumeNext` will proceed to subscribing yet another\r\n * Observable in provided series, no matter if previous Observable completed or ended with an error. This will\r\n * be happening until there is no more Observables left in the series, at which point returned Observable will\r\n * complete - even if the last subscribed stream ended with an error.\r\n *\r\n * `onErrorResumeNext` can be therefore thought of as version of {@link concat} operator, which is more permissive\r\n * when it comes to the errors emitted by its input Observables. While `concat` subscribes to the next Observable\r\n * in series only if previous one successfully completed, `onErrorResumeNext` subscribes even if it ended with\r\n * an error.\r\n *\r\n * Note that you do not get any access to errors emitted by the Observables. In particular do not\r\n * expect these errors to appear in error callback passed to {@link subscribe}. If you want to take\r\n * specific actions based on what error was emitted by an Observable, you should try out {@link catch} instead.\r\n *\r\n *\r\n * @example <caption>Subscribe to the next Observable after map fails</caption>\r\n * Rx.Observable.of(1, 2, 3, 0)\r\n *   .map(x => {\r\n *       if (x === 0) { throw Error(); }\r\n         return 10 / x;\r\n *   })\r\n *   .onErrorResumeNext(Rx.Observable.of(1, 2, 3))\r\n *   .subscribe(\r\n *     val => console.log(val),\r\n *     err => console.log(err),          // Will never be called.\r\n *     () => console.log('that\\'s it!')\r\n *   );\r\n *\r\n * // Logs:\r\n * // 10\r\n * // 5\r\n * // 3.3333333333333335\r\n * // 1\r\n * // 2\r\n * // 3\r\n * // \"that's it!\"\r\n *\r\n * @see {@link concat}\r\n * @see {@link catch}\r\n *\r\n * @param {...ObservableInput} observables Observables passed either directly or as an array.\r\n * @return {Observable} An Observable that emits values from source Observable, but - if it errors - subscribes\r\n * to the next passed Observable and so on, until it completes or runs out of Observables.\r\n * @method onErrorResumeNext\r\n * @owner Observable\r\n */\nfunction onErrorResumeNext() {\n  var nextSources = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    nextSources[_i - 0] = arguments[_i];\n  }\n  if (nextSources.length === 1 && isArray_1.isArray(nextSources[0])) {\n    nextSources = nextSources[0];\n  }\n  return function (source) {\n    return source.lift(new OnErrorResumeNextOperator(nextSources));\n  };\n}\nexports.onErrorResumeNext = onErrorResumeNext;\n/* tslint:enable:max-line-length */\nfunction onErrorResumeNextStatic() {\n  var nextSources = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    nextSources[_i - 0] = arguments[_i];\n  }\n  var source = null;\n  if (nextSources.length === 1 && isArray_1.isArray(nextSources[0])) {\n    nextSources = nextSources[0];\n  }\n  source = nextSources.shift();\n  return new FromObservable_1.FromObservable(source, null).lift(new OnErrorResumeNextOperator(nextSources));\n}\nexports.onErrorResumeNextStatic = onErrorResumeNextStatic;\nvar OnErrorResumeNextOperator = function () {\n  function OnErrorResumeNextOperator(nextSources) {\n    this.nextSources = nextSources;\n  }\n  OnErrorResumeNextOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));\n  };\n  return OnErrorResumeNextOperator;\n}();\nvar OnErrorResumeNextSubscriber = function (_super) {\n  __extends(OnErrorResumeNextSubscriber, _super);\n  function OnErrorResumeNextSubscriber(destination, nextSources) {\n    _super.call(this, destination);\n    this.destination = destination;\n    this.nextSources = nextSources;\n  }\n  OnErrorResumeNextSubscriber.prototype.notifyError = function (error, innerSub) {\n    this.subscribeToNextSource();\n  };\n  OnErrorResumeNextSubscriber.prototype.notifyComplete = function (innerSub) {\n    this.subscribeToNextSource();\n  };\n  OnErrorResumeNextSubscriber.prototype._error = function (err) {\n    this.subscribeToNextSource();\n  };\n  OnErrorResumeNextSubscriber.prototype._complete = function () {\n    this.subscribeToNextSource();\n  };\n  OnErrorResumeNextSubscriber.prototype.subscribeToNextSource = function () {\n    var next = this.nextSources.shift();\n    if (next) {\n      this.add(subscribeToResult_1.subscribeToResult(this, next));\n    } else {\n      this.destination.complete();\n    }\n  };\n  return OnErrorResumeNextSubscriber;\n}(OuterSubscriber_1.OuterSubscriber);","map":{"version":3,"names":["__extends","d","b","p","hasOwnProperty","__","constructor","prototype","Object","create","FromObservable_1","require","isArray_1","OuterSubscriber_1","subscribeToResult_1","onErrorResumeNext","nextSources","_i","arguments","length","isArray","source","lift","OnErrorResumeNextOperator","exports","onErrorResumeNextStatic","shift","FromObservable","call","subscriber","subscribe","OnErrorResumeNextSubscriber","_super","destination","notifyError","error","innerSub","subscribeToNextSource","notifyComplete","_error","err","_complete","next","add","subscribeToResult","complete","OuterSubscriber"],"sources":["C:/Users/HP/Desktop/4SE3/PidevSym/PiDev_Spring_Angular/Front-End/frontOffice/node_modules/ng5-slider/node_modules/rxjs/operators/onErrorResumeNext.js"],"sourcesContent":["\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar FromObservable_1 = require('../observable/FromObservable');\r\nvar isArray_1 = require('../util/isArray');\r\nvar OuterSubscriber_1 = require('../OuterSubscriber');\r\nvar subscribeToResult_1 = require('../util/subscribeToResult');\r\n/* tslint:enable:max-line-length */\r\n/**\r\n * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one\r\n * that was passed.\r\n *\r\n * <span class=\"informal\">Execute series of Observables no matter what, even if it means swallowing errors.</span>\r\n *\r\n * <img src=\"./img/onErrorResumeNext.png\" width=\"100%\">\r\n *\r\n * `onErrorResumeNext` is an operator that accepts a series of Observables, provided either directly as\r\n * arguments or as an array. If no single Observable is provided, returned Observable will simply behave the same\r\n * as the source.\r\n *\r\n * `onErrorResumeNext` returns an Observable that starts by subscribing and re-emitting values from the source Observable.\r\n * When its stream of values ends - no matter if Observable completed or emitted an error - `onErrorResumeNext`\r\n * will subscribe to the first Observable that was passed as an argument to the method. It will start re-emitting\r\n * its values as well and - again - when that stream ends, `onErrorResumeNext` will proceed to subscribing yet another\r\n * Observable in provided series, no matter if previous Observable completed or ended with an error. This will\r\n * be happening until there is no more Observables left in the series, at which point returned Observable will\r\n * complete - even if the last subscribed stream ended with an error.\r\n *\r\n * `onErrorResumeNext` can be therefore thought of as version of {@link concat} operator, which is more permissive\r\n * when it comes to the errors emitted by its input Observables. While `concat` subscribes to the next Observable\r\n * in series only if previous one successfully completed, `onErrorResumeNext` subscribes even if it ended with\r\n * an error.\r\n *\r\n * Note that you do not get any access to errors emitted by the Observables. In particular do not\r\n * expect these errors to appear in error callback passed to {@link subscribe}. If you want to take\r\n * specific actions based on what error was emitted by an Observable, you should try out {@link catch} instead.\r\n *\r\n *\r\n * @example <caption>Subscribe to the next Observable after map fails</caption>\r\n * Rx.Observable.of(1, 2, 3, 0)\r\n *   .map(x => {\r\n *       if (x === 0) { throw Error(); }\r\n         return 10 / x;\r\n *   })\r\n *   .onErrorResumeNext(Rx.Observable.of(1, 2, 3))\r\n *   .subscribe(\r\n *     val => console.log(val),\r\n *     err => console.log(err),          // Will never be called.\r\n *     () => console.log('that\\'s it!')\r\n *   );\r\n *\r\n * // Logs:\r\n * // 10\r\n * // 5\r\n * // 3.3333333333333335\r\n * // 1\r\n * // 2\r\n * // 3\r\n * // \"that's it!\"\r\n *\r\n * @see {@link concat}\r\n * @see {@link catch}\r\n *\r\n * @param {...ObservableInput} observables Observables passed either directly or as an array.\r\n * @return {Observable} An Observable that emits values from source Observable, but - if it errors - subscribes\r\n * to the next passed Observable and so on, until it completes or runs out of Observables.\r\n * @method onErrorResumeNext\r\n * @owner Observable\r\n */\r\nfunction onErrorResumeNext() {\r\n    var nextSources = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        nextSources[_i - 0] = arguments[_i];\r\n    }\r\n    if (nextSources.length === 1 && isArray_1.isArray(nextSources[0])) {\r\n        nextSources = nextSources[0];\r\n    }\r\n    return function (source) { return source.lift(new OnErrorResumeNextOperator(nextSources)); };\r\n}\r\nexports.onErrorResumeNext = onErrorResumeNext;\r\n/* tslint:enable:max-line-length */\r\nfunction onErrorResumeNextStatic() {\r\n    var nextSources = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        nextSources[_i - 0] = arguments[_i];\r\n    }\r\n    var source = null;\r\n    if (nextSources.length === 1 && isArray_1.isArray(nextSources[0])) {\r\n        nextSources = nextSources[0];\r\n    }\r\n    source = nextSources.shift();\r\n    return new FromObservable_1.FromObservable(source, null).lift(new OnErrorResumeNextOperator(nextSources));\r\n}\r\nexports.onErrorResumeNextStatic = onErrorResumeNextStatic;\r\nvar OnErrorResumeNextOperator = (function () {\r\n    function OnErrorResumeNextOperator(nextSources) {\r\n        this.nextSources = nextSources;\r\n    }\r\n    OnErrorResumeNextOperator.prototype.call = function (subscriber, source) {\r\n        return source.subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));\r\n    };\r\n    return OnErrorResumeNextOperator;\r\n}());\r\nvar OnErrorResumeNextSubscriber = (function (_super) {\r\n    __extends(OnErrorResumeNextSubscriber, _super);\r\n    function OnErrorResumeNextSubscriber(destination, nextSources) {\r\n        _super.call(this, destination);\r\n        this.destination = destination;\r\n        this.nextSources = nextSources;\r\n    }\r\n    OnErrorResumeNextSubscriber.prototype.notifyError = function (error, innerSub) {\r\n        this.subscribeToNextSource();\r\n    };\r\n    OnErrorResumeNextSubscriber.prototype.notifyComplete = function (innerSub) {\r\n        this.subscribeToNextSource();\r\n    };\r\n    OnErrorResumeNextSubscriber.prototype._error = function (err) {\r\n        this.subscribeToNextSource();\r\n    };\r\n    OnErrorResumeNextSubscriber.prototype._complete = function () {\r\n        this.subscribeToNextSource();\r\n    };\r\n    OnErrorResumeNextSubscriber.prototype.subscribeToNextSource = function () {\r\n        var next = this.nextSources.shift();\r\n        if (next) {\r\n            this.add(subscribeToResult_1.subscribeToResult(this, next));\r\n        }\r\n        else {\r\n            this.destination.complete();\r\n        }\r\n    };\r\n    return OnErrorResumeNextSubscriber;\r\n}(OuterSubscriber_1.OuterSubscriber));\r\n"],"mappings":"AAAA,YAAY;;AACZ,IAAIA,SAAS,GAAI,IAAI,IAAI,IAAI,CAACA,SAAS,IAAK,UAAUC,CAAC,EAAEC,CAAC,EAAE;EACxD,KAAK,IAAIC,CAAC,IAAID,CAAC,EAAE,IAAIA,CAAC,CAACE,cAAc,CAACD,CAAC,CAAC,EAAEF,CAAC,CAACE,CAAC,CAAC,GAAGD,CAAC,CAACC,CAAC,CAAC;EACrD,SAASE,EAAE,GAAG;IAAE,IAAI,CAACC,WAAW,GAAGL,CAAC;EAAE;EACtCA,CAAC,CAACM,SAAS,GAAGL,CAAC,KAAK,IAAI,GAAGM,MAAM,CAACC,MAAM,CAACP,CAAC,CAAC,IAAIG,EAAE,CAACE,SAAS,GAAGL,CAAC,CAACK,SAAS,EAAE,IAAIF,EAAE,EAAE,CAAC;AACxF,CAAC;AACD,IAAIK,gBAAgB,GAAGC,OAAO,CAAC,8BAA8B,CAAC;AAC9D,IAAIC,SAAS,GAAGD,OAAO,CAAC,iBAAiB,CAAC;AAC1C,IAAIE,iBAAiB,GAAGF,OAAO,CAAC,oBAAoB,CAAC;AACrD,IAAIG,mBAAmB,GAAGH,OAAO,CAAC,2BAA2B,CAAC;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASI,iBAAiB,GAAG;EACzB,IAAIC,WAAW,GAAG,EAAE;EACpB,KAAK,IAAIC,EAAE,GAAG,CAAC,EAAEA,EAAE,GAAGC,SAAS,CAACC,MAAM,EAAEF,EAAE,EAAE,EAAE;IAC1CD,WAAW,CAACC,EAAE,GAAG,CAAC,CAAC,GAAGC,SAAS,CAACD,EAAE,CAAC;EACvC;EACA,IAAID,WAAW,CAACG,MAAM,KAAK,CAAC,IAAIP,SAAS,CAACQ,OAAO,CAACJ,WAAW,CAAC,CAAC,CAAC,CAAC,EAAE;IAC/DA,WAAW,GAAGA,WAAW,CAAC,CAAC,CAAC;EAChC;EACA,OAAO,UAAUK,MAAM,EAAE;IAAE,OAAOA,MAAM,CAACC,IAAI,CAAC,IAAIC,yBAAyB,CAACP,WAAW,CAAC,CAAC;EAAE,CAAC;AAChG;AACAQ,OAAO,CAACT,iBAAiB,GAAGA,iBAAiB;AAC7C;AACA,SAASU,uBAAuB,GAAG;EAC/B,IAAIT,WAAW,GAAG,EAAE;EACpB,KAAK,IAAIC,EAAE,GAAG,CAAC,EAAEA,EAAE,GAAGC,SAAS,CAACC,MAAM,EAAEF,EAAE,EAAE,EAAE;IAC1CD,WAAW,CAACC,EAAE,GAAG,CAAC,CAAC,GAAGC,SAAS,CAACD,EAAE,CAAC;EACvC;EACA,IAAII,MAAM,GAAG,IAAI;EACjB,IAAIL,WAAW,CAACG,MAAM,KAAK,CAAC,IAAIP,SAAS,CAACQ,OAAO,CAACJ,WAAW,CAAC,CAAC,CAAC,CAAC,EAAE;IAC/DA,WAAW,GAAGA,WAAW,CAAC,CAAC,CAAC;EAChC;EACAK,MAAM,GAAGL,WAAW,CAACU,KAAK,EAAE;EAC5B,OAAO,IAAIhB,gBAAgB,CAACiB,cAAc,CAACN,MAAM,EAAE,IAAI,CAAC,CAACC,IAAI,CAAC,IAAIC,yBAAyB,CAACP,WAAW,CAAC,CAAC;AAC7G;AACAQ,OAAO,CAACC,uBAAuB,GAAGA,uBAAuB;AACzD,IAAIF,yBAAyB,GAAI,YAAY;EACzC,SAASA,yBAAyB,CAACP,WAAW,EAAE;IAC5C,IAAI,CAACA,WAAW,GAAGA,WAAW;EAClC;EACAO,yBAAyB,CAAChB,SAAS,CAACqB,IAAI,GAAG,UAAUC,UAAU,EAAER,MAAM,EAAE;IACrE,OAAOA,MAAM,CAACS,SAAS,CAAC,IAAIC,2BAA2B,CAACF,UAAU,EAAE,IAAI,CAACb,WAAW,CAAC,CAAC;EAC1F,CAAC;EACD,OAAOO,yBAAyB;AACpC,CAAC,EAAG;AACJ,IAAIQ,2BAA2B,GAAI,UAAUC,MAAM,EAAE;EACjDhC,SAAS,CAAC+B,2BAA2B,EAAEC,MAAM,CAAC;EAC9C,SAASD,2BAA2B,CAACE,WAAW,EAAEjB,WAAW,EAAE;IAC3DgB,MAAM,CAACJ,IAAI,CAAC,IAAI,EAAEK,WAAW,CAAC;IAC9B,IAAI,CAACA,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACjB,WAAW,GAAGA,WAAW;EAClC;EACAe,2BAA2B,CAACxB,SAAS,CAAC2B,WAAW,GAAG,UAAUC,KAAK,EAAEC,QAAQ,EAAE;IAC3E,IAAI,CAACC,qBAAqB,EAAE;EAChC,CAAC;EACDN,2BAA2B,CAACxB,SAAS,CAAC+B,cAAc,GAAG,UAAUF,QAAQ,EAAE;IACvE,IAAI,CAACC,qBAAqB,EAAE;EAChC,CAAC;EACDN,2BAA2B,CAACxB,SAAS,CAACgC,MAAM,GAAG,UAAUC,GAAG,EAAE;IAC1D,IAAI,CAACH,qBAAqB,EAAE;EAChC,CAAC;EACDN,2BAA2B,CAACxB,SAAS,CAACkC,SAAS,GAAG,YAAY;IAC1D,IAAI,CAACJ,qBAAqB,EAAE;EAChC,CAAC;EACDN,2BAA2B,CAACxB,SAAS,CAAC8B,qBAAqB,GAAG,YAAY;IACtE,IAAIK,IAAI,GAAG,IAAI,CAAC1B,WAAW,CAACU,KAAK,EAAE;IACnC,IAAIgB,IAAI,EAAE;MACN,IAAI,CAACC,GAAG,CAAC7B,mBAAmB,CAAC8B,iBAAiB,CAAC,IAAI,EAAEF,IAAI,CAAC,CAAC;IAC/D,CAAC,MACI;MACD,IAAI,CAACT,WAAW,CAACY,QAAQ,EAAE;IAC/B;EACJ,CAAC;EACD,OAAOd,2BAA2B;AACtC,CAAC,CAAClB,iBAAiB,CAACiC,eAAe,CAAE"},"metadata":{},"sourceType":"script","externalDependencies":[]}