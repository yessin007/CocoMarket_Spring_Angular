{"ast":null,"code":"\"use strict\";\n\nvar map_1 = require('./map');\n/**\r\n * Maps each source value (an object) to its specified nested property.\r\n *\r\n * <span class=\"informal\">Like {@link map}, but meant only for picking one of\r\n * the nested properties of every emitted object.</span>\r\n *\r\n * <img src=\"./img/pluck.png\" width=\"100%\">\r\n *\r\n * Given a list of strings describing a path to an object property, retrieves\r\n * the value of a specified nested property from all values in the source\r\n * Observable. If a property can't be resolved, it will return `undefined` for\r\n * that value.\r\n *\r\n * @example <caption>Map every click to the tagName of the clicked target element</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var tagNames = clicks.pluck('target', 'tagName');\r\n * tagNames.subscribe(x => console.log(x));\r\n *\r\n * @see {@link map}\r\n *\r\n * @param {...string} properties The nested properties to pluck from each source\r\n * value (an object).\r\n * @return {Observable} A new Observable of property values from the source values.\r\n * @method pluck\r\n * @owner Observable\r\n */\nfunction pluck() {\n  var properties = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    properties[_i - 0] = arguments[_i];\n  }\n  var length = properties.length;\n  if (length === 0) {\n    throw new Error('list of properties cannot be empty.');\n  }\n  return function (source) {\n    return map_1.map(plucker(properties, length))(source);\n  };\n}\nexports.pluck = pluck;\nfunction plucker(props, length) {\n  var mapper = function (x) {\n    var currentProp = x;\n    for (var i = 0; i < length; i++) {\n      var p = currentProp[props[i]];\n      if (typeof p !== 'undefined') {\n        currentProp = p;\n      } else {\n        return undefined;\n      }\n    }\n    return currentProp;\n  };\n  return mapper;\n}","map":{"version":3,"names":["map_1","require","pluck","properties","_i","arguments","length","Error","source","map","plucker","exports","props","mapper","x","currentProp","i","p","undefined"],"sources":["C:/Users/HP/Desktop/4SE3/PidevSym/PiDev_Spring_Angular/Front-End/frontOffice/node_modules/ng5-slider/node_modules/rxjs/operators/pluck.js"],"sourcesContent":["\"use strict\";\r\nvar map_1 = require('./map');\r\n/**\r\n * Maps each source value (an object) to its specified nested property.\r\n *\r\n * <span class=\"informal\">Like {@link map}, but meant only for picking one of\r\n * the nested properties of every emitted object.</span>\r\n *\r\n * <img src=\"./img/pluck.png\" width=\"100%\">\r\n *\r\n * Given a list of strings describing a path to an object property, retrieves\r\n * the value of a specified nested property from all values in the source\r\n * Observable. If a property can't be resolved, it will return `undefined` for\r\n * that value.\r\n *\r\n * @example <caption>Map every click to the tagName of the clicked target element</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var tagNames = clicks.pluck('target', 'tagName');\r\n * tagNames.subscribe(x => console.log(x));\r\n *\r\n * @see {@link map}\r\n *\r\n * @param {...string} properties The nested properties to pluck from each source\r\n * value (an object).\r\n * @return {Observable} A new Observable of property values from the source values.\r\n * @method pluck\r\n * @owner Observable\r\n */\r\nfunction pluck() {\r\n    var properties = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        properties[_i - 0] = arguments[_i];\r\n    }\r\n    var length = properties.length;\r\n    if (length === 0) {\r\n        throw new Error('list of properties cannot be empty.');\r\n    }\r\n    return function (source) { return map_1.map(plucker(properties, length))(source); };\r\n}\r\nexports.pluck = pluck;\r\nfunction plucker(props, length) {\r\n    var mapper = function (x) {\r\n        var currentProp = x;\r\n        for (var i = 0; i < length; i++) {\r\n            var p = currentProp[props[i]];\r\n            if (typeof p !== 'undefined') {\r\n                currentProp = p;\r\n            }\r\n            else {\r\n                return undefined;\r\n            }\r\n        }\r\n        return currentProp;\r\n    };\r\n    return mapper;\r\n}\r\n"],"mappings":"AAAA,YAAY;;AACZ,IAAIA,KAAK,GAAGC,OAAO,CAAC,OAAO,CAAC;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,KAAK,GAAG;EACb,IAAIC,UAAU,GAAG,EAAE;EACnB,KAAK,IAAIC,EAAE,GAAG,CAAC,EAAEA,EAAE,GAAGC,SAAS,CAACC,MAAM,EAAEF,EAAE,EAAE,EAAE;IAC1CD,UAAU,CAACC,EAAE,GAAG,CAAC,CAAC,GAAGC,SAAS,CAACD,EAAE,CAAC;EACtC;EACA,IAAIE,MAAM,GAAGH,UAAU,CAACG,MAAM;EAC9B,IAAIA,MAAM,KAAK,CAAC,EAAE;IACd,MAAM,IAAIC,KAAK,CAAC,qCAAqC,CAAC;EAC1D;EACA,OAAO,UAAUC,MAAM,EAAE;IAAE,OAAOR,KAAK,CAACS,GAAG,CAACC,OAAO,CAACP,UAAU,EAAEG,MAAM,CAAC,CAAC,CAACE,MAAM,CAAC;EAAE,CAAC;AACvF;AACAG,OAAO,CAACT,KAAK,GAAGA,KAAK;AACrB,SAASQ,OAAO,CAACE,KAAK,EAAEN,MAAM,EAAE;EAC5B,IAAIO,MAAM,GAAG,UAAUC,CAAC,EAAE;IACtB,IAAIC,WAAW,GAAGD,CAAC;IACnB,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGV,MAAM,EAAEU,CAAC,EAAE,EAAE;MAC7B,IAAIC,CAAC,GAAGF,WAAW,CAACH,KAAK,CAACI,CAAC,CAAC,CAAC;MAC7B,IAAI,OAAOC,CAAC,KAAK,WAAW,EAAE;QAC1BF,WAAW,GAAGE,CAAC;MACnB,CAAC,MACI;QACD,OAAOC,SAAS;MACpB;IACJ;IACA,OAAOH,WAAW;EACtB,CAAC;EACD,OAAOF,MAAM;AACjB"},"metadata":{},"sourceType":"script","externalDependencies":[]}