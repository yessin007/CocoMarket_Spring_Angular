{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscription_1 = require('../Subscription');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n/**\r\n * Buffers the source Observable values starting from an emission from\r\n * `openings` and ending when the output of `closingSelector` emits.\r\n *\r\n * <span class=\"informal\">Collects values from the past as an array. Starts\r\n * collecting only when `opening` emits, and calls the `closingSelector`\r\n * function to get an Observable that tells when to close the buffer.</span>\r\n *\r\n * <img src=\"./img/bufferToggle.png\" width=\"100%\">\r\n *\r\n * Buffers values from the source by opening the buffer via signals from an\r\n * Observable provided to `openings`, and closing and sending the buffers when\r\n * a Subscribable or Promise returned by the `closingSelector` function emits.\r\n *\r\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var openings = Rx.Observable.interval(1000);\r\n * var buffered = clicks.bufferToggle(openings, i =>\r\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\r\n * );\r\n * buffered.subscribe(x => console.log(x));\r\n *\r\n * @see {@link buffer}\r\n * @see {@link bufferCount}\r\n * @see {@link bufferTime}\r\n * @see {@link bufferWhen}\r\n * @see {@link windowToggle}\r\n *\r\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\r\n * buffers.\r\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\r\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\r\n * which, when it emits, signals that the associated buffer should be emitted\r\n * and cleared.\r\n * @return {Observable<T[]>} An observable of arrays of buffered values.\r\n * @method bufferToggle\r\n * @owner Observable\r\n */\nfunction bufferToggle(openings, closingSelector) {\n  return function bufferToggleOperatorFunction(source) {\n    return source.lift(new BufferToggleOperator(openings, closingSelector));\n  };\n}\nexports.bufferToggle = bufferToggle;\nvar BufferToggleOperator = function () {\n  function BufferToggleOperator(openings, closingSelector) {\n    this.openings = openings;\n    this.closingSelector = closingSelector;\n  }\n  BufferToggleOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));\n  };\n  return BufferToggleOperator;\n}();\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\nvar BufferToggleSubscriber = function (_super) {\n  __extends(BufferToggleSubscriber, _super);\n  function BufferToggleSubscriber(destination, openings, closingSelector) {\n    _super.call(this, destination);\n    this.openings = openings;\n    this.closingSelector = closingSelector;\n    this.contexts = [];\n    this.add(subscribeToResult_1.subscribeToResult(this, openings));\n  }\n  BufferToggleSubscriber.prototype._next = function (value) {\n    var contexts = this.contexts;\n    var len = contexts.length;\n    for (var i = 0; i < len; i++) {\n      contexts[i].buffer.push(value);\n    }\n  };\n  BufferToggleSubscriber.prototype._error = function (err) {\n    var contexts = this.contexts;\n    while (contexts.length > 0) {\n      var context = contexts.shift();\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    _super.prototype._error.call(this, err);\n  };\n  BufferToggleSubscriber.prototype._complete = function () {\n    var contexts = this.contexts;\n    while (contexts.length > 0) {\n      var context = contexts.shift();\n      this.destination.next(context.buffer);\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    _super.prototype._complete.call(this);\n  };\n  BufferToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n    outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);\n  };\n  BufferToggleSubscriber.prototype.notifyComplete = function (innerSub) {\n    this.closeBuffer(innerSub.context);\n  };\n  BufferToggleSubscriber.prototype.openBuffer = function (value) {\n    try {\n      var closingSelector = this.closingSelector;\n      var closingNotifier = closingSelector.call(this, value);\n      if (closingNotifier) {\n        this.trySubscribe(closingNotifier);\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  };\n  BufferToggleSubscriber.prototype.closeBuffer = function (context) {\n    var contexts = this.contexts;\n    if (contexts && context) {\n      var buffer = context.buffer,\n        subscription = context.subscription;\n      this.destination.next(buffer);\n      contexts.splice(contexts.indexOf(context), 1);\n      this.remove(subscription);\n      subscription.unsubscribe();\n    }\n  };\n  BufferToggleSubscriber.prototype.trySubscribe = function (closingNotifier) {\n    var contexts = this.contexts;\n    var buffer = [];\n    var subscription = new Subscription_1.Subscription();\n    var context = {\n      buffer: buffer,\n      subscription: subscription\n    };\n    contexts.push(context);\n    var innerSubscription = subscribeToResult_1.subscribeToResult(this, closingNotifier, context);\n    if (!innerSubscription || innerSubscription.closed) {\n      this.closeBuffer(context);\n    } else {\n      innerSubscription.context = context;\n      this.add(innerSubscription);\n      subscription.add(innerSubscription);\n    }\n  };\n  return BufferToggleSubscriber;\n}(OuterSubscriber_1.OuterSubscriber);","map":{"version":3,"names":["__extends","d","b","p","hasOwnProperty","__","constructor","prototype","Object","create","Subscription_1","require","subscribeToResult_1","OuterSubscriber_1","bufferToggle","openings","closingSelector","bufferToggleOperatorFunction","source","lift","BufferToggleOperator","exports","call","subscriber","subscribe","BufferToggleSubscriber","_super","destination","contexts","add","subscribeToResult","_next","value","len","length","i","buffer","push","_error","err","context","shift","subscription","unsubscribe","_complete","next","notifyNext","outerValue","innerValue","outerIndex","innerIndex","innerSub","closeBuffer","openBuffer","notifyComplete","closingNotifier","trySubscribe","splice","indexOf","remove","Subscription","innerSubscription","closed","OuterSubscriber"],"sources":["C:/Users/HP/Desktop/4SE3/PidevSym/PiDev_Spring_Angular/Front-End/frontOffice/node_modules/ng5-slider/node_modules/rxjs/operators/bufferToggle.js"],"sourcesContent":["\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar Subscription_1 = require('../Subscription');\r\nvar subscribeToResult_1 = require('../util/subscribeToResult');\r\nvar OuterSubscriber_1 = require('../OuterSubscriber');\r\n/**\r\n * Buffers the source Observable values starting from an emission from\r\n * `openings` and ending when the output of `closingSelector` emits.\r\n *\r\n * <span class=\"informal\">Collects values from the past as an array. Starts\r\n * collecting only when `opening` emits, and calls the `closingSelector`\r\n * function to get an Observable that tells when to close the buffer.</span>\r\n *\r\n * <img src=\"./img/bufferToggle.png\" width=\"100%\">\r\n *\r\n * Buffers values from the source by opening the buffer via signals from an\r\n * Observable provided to `openings`, and closing and sending the buffers when\r\n * a Subscribable or Promise returned by the `closingSelector` function emits.\r\n *\r\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var openings = Rx.Observable.interval(1000);\r\n * var buffered = clicks.bufferToggle(openings, i =>\r\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\r\n * );\r\n * buffered.subscribe(x => console.log(x));\r\n *\r\n * @see {@link buffer}\r\n * @see {@link bufferCount}\r\n * @see {@link bufferTime}\r\n * @see {@link bufferWhen}\r\n * @see {@link windowToggle}\r\n *\r\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\r\n * buffers.\r\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\r\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\r\n * which, when it emits, signals that the associated buffer should be emitted\r\n * and cleared.\r\n * @return {Observable<T[]>} An observable of arrays of buffered values.\r\n * @method bufferToggle\r\n * @owner Observable\r\n */\r\nfunction bufferToggle(openings, closingSelector) {\r\n    return function bufferToggleOperatorFunction(source) {\r\n        return source.lift(new BufferToggleOperator(openings, closingSelector));\r\n    };\r\n}\r\nexports.bufferToggle = bufferToggle;\r\nvar BufferToggleOperator = (function () {\r\n    function BufferToggleOperator(openings, closingSelector) {\r\n        this.openings = openings;\r\n        this.closingSelector = closingSelector;\r\n    }\r\n    BufferToggleOperator.prototype.call = function (subscriber, source) {\r\n        return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));\r\n    };\r\n    return BufferToggleOperator;\r\n}());\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nvar BufferToggleSubscriber = (function (_super) {\r\n    __extends(BufferToggleSubscriber, _super);\r\n    function BufferToggleSubscriber(destination, openings, closingSelector) {\r\n        _super.call(this, destination);\r\n        this.openings = openings;\r\n        this.closingSelector = closingSelector;\r\n        this.contexts = [];\r\n        this.add(subscribeToResult_1.subscribeToResult(this, openings));\r\n    }\r\n    BufferToggleSubscriber.prototype._next = function (value) {\r\n        var contexts = this.contexts;\r\n        var len = contexts.length;\r\n        for (var i = 0; i < len; i++) {\r\n            contexts[i].buffer.push(value);\r\n        }\r\n    };\r\n    BufferToggleSubscriber.prototype._error = function (err) {\r\n        var contexts = this.contexts;\r\n        while (contexts.length > 0) {\r\n            var context = contexts.shift();\r\n            context.subscription.unsubscribe();\r\n            context.buffer = null;\r\n            context.subscription = null;\r\n        }\r\n        this.contexts = null;\r\n        _super.prototype._error.call(this, err);\r\n    };\r\n    BufferToggleSubscriber.prototype._complete = function () {\r\n        var contexts = this.contexts;\r\n        while (contexts.length > 0) {\r\n            var context = contexts.shift();\r\n            this.destination.next(context.buffer);\r\n            context.subscription.unsubscribe();\r\n            context.buffer = null;\r\n            context.subscription = null;\r\n        }\r\n        this.contexts = null;\r\n        _super.prototype._complete.call(this);\r\n    };\r\n    BufferToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\r\n        outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);\r\n    };\r\n    BufferToggleSubscriber.prototype.notifyComplete = function (innerSub) {\r\n        this.closeBuffer(innerSub.context);\r\n    };\r\n    BufferToggleSubscriber.prototype.openBuffer = function (value) {\r\n        try {\r\n            var closingSelector = this.closingSelector;\r\n            var closingNotifier = closingSelector.call(this, value);\r\n            if (closingNotifier) {\r\n                this.trySubscribe(closingNotifier);\r\n            }\r\n        }\r\n        catch (err) {\r\n            this._error(err);\r\n        }\r\n    };\r\n    BufferToggleSubscriber.prototype.closeBuffer = function (context) {\r\n        var contexts = this.contexts;\r\n        if (contexts && context) {\r\n            var buffer = context.buffer, subscription = context.subscription;\r\n            this.destination.next(buffer);\r\n            contexts.splice(contexts.indexOf(context), 1);\r\n            this.remove(subscription);\r\n            subscription.unsubscribe();\r\n        }\r\n    };\r\n    BufferToggleSubscriber.prototype.trySubscribe = function (closingNotifier) {\r\n        var contexts = this.contexts;\r\n        var buffer = [];\r\n        var subscription = new Subscription_1.Subscription();\r\n        var context = { buffer: buffer, subscription: subscription };\r\n        contexts.push(context);\r\n        var innerSubscription = subscribeToResult_1.subscribeToResult(this, closingNotifier, context);\r\n        if (!innerSubscription || innerSubscription.closed) {\r\n            this.closeBuffer(context);\r\n        }\r\n        else {\r\n            innerSubscription.context = context;\r\n            this.add(innerSubscription);\r\n            subscription.add(innerSubscription);\r\n        }\r\n    };\r\n    return BufferToggleSubscriber;\r\n}(OuterSubscriber_1.OuterSubscriber));\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}