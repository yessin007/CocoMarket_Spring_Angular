{"ast":null,"code":"\"use strict\";\n\nvar distinctUntilKeyChanged_1 = require('../operators/distinctUntilKeyChanged');\n/* tslint:enable:max-line-length */\n/**\r\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item,\r\n * using a property accessed by using the key provided to check if the two items are distinct.\r\n *\r\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\r\n *\r\n * If a comparator function is not provided, an equality check is used by default.\r\n *\r\n * @example <caption>An example comparing the name of persons</caption>\r\n *\r\n *  interface Person {\r\n *     age: number,\r\n *     name: string\r\n *  }\r\n *\r\n * Observable.of<Person>(\r\n *     { age: 4, name: 'Foo'},\r\n *     { age: 7, name: 'Bar'},\r\n *     { age: 5, name: 'Foo'},\r\n *     { age: 6, name: 'Foo'})\r\n *     .distinctUntilKeyChanged('name')\r\n *     .subscribe(x => console.log(x));\r\n *\r\n * // displays:\r\n * // { age: 4, name: 'Foo' }\r\n * // { age: 7, name: 'Bar' }\r\n * // { age: 5, name: 'Foo' }\r\n *\r\n * @example <caption>An example comparing the first letters of the name</caption>\r\n *\r\n * interface Person {\r\n *     age: number,\r\n *     name: string\r\n *  }\r\n *\r\n * Observable.of<Person>(\r\n *     { age: 4, name: 'Foo1'},\r\n *     { age: 7, name: 'Bar'},\r\n *     { age: 5, name: 'Foo2'},\r\n *     { age: 6, name: 'Foo3'})\r\n *     .distinctUntilKeyChanged('name', (x: string, y: string) => x.substring(0, 3) === y.substring(0, 3))\r\n *     .subscribe(x => console.log(x));\r\n *\r\n * // displays:\r\n * // { age: 4, name: 'Foo1' }\r\n * // { age: 7, name: 'Bar' }\r\n * // { age: 5, name: 'Foo2' }\r\n *\r\n * @see {@link distinct}\r\n * @see {@link distinctUntilChanged}\r\n *\r\n * @param {string} key String key for object property lookup on each item.\r\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\r\n * @return {Observable} An Observable that emits items from the source Observable with distinct values based on the key specified.\r\n * @method distinctUntilKeyChanged\r\n * @owner Observable\r\n */\nfunction distinctUntilKeyChanged(key, compare) {\n  return distinctUntilKeyChanged_1.distinctUntilKeyChanged(key, compare)(this);\n}\nexports.distinctUntilKeyChanged = distinctUntilKeyChanged;","map":{"version":3,"names":["distinctUntilKeyChanged_1","require","distinctUntilKeyChanged","key","compare","exports"],"sources":["C:/Users/HP/Desktop/4SE3/PidevSym/PiDev_Spring_Angular/Front-End/frontOffice/node_modules/ng5-slider/node_modules/rxjs/operator/distinctUntilKeyChanged.js"],"sourcesContent":["\"use strict\";\r\nvar distinctUntilKeyChanged_1 = require('../operators/distinctUntilKeyChanged');\r\n/* tslint:enable:max-line-length */\r\n/**\r\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item,\r\n * using a property accessed by using the key provided to check if the two items are distinct.\r\n *\r\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\r\n *\r\n * If a comparator function is not provided, an equality check is used by default.\r\n *\r\n * @example <caption>An example comparing the name of persons</caption>\r\n *\r\n *  interface Person {\r\n *     age: number,\r\n *     name: string\r\n *  }\r\n *\r\n * Observable.of<Person>(\r\n *     { age: 4, name: 'Foo'},\r\n *     { age: 7, name: 'Bar'},\r\n *     { age: 5, name: 'Foo'},\r\n *     { age: 6, name: 'Foo'})\r\n *     .distinctUntilKeyChanged('name')\r\n *     .subscribe(x => console.log(x));\r\n *\r\n * // displays:\r\n * // { age: 4, name: 'Foo' }\r\n * // { age: 7, name: 'Bar' }\r\n * // { age: 5, name: 'Foo' }\r\n *\r\n * @example <caption>An example comparing the first letters of the name</caption>\r\n *\r\n * interface Person {\r\n *     age: number,\r\n *     name: string\r\n *  }\r\n *\r\n * Observable.of<Person>(\r\n *     { age: 4, name: 'Foo1'},\r\n *     { age: 7, name: 'Bar'},\r\n *     { age: 5, name: 'Foo2'},\r\n *     { age: 6, name: 'Foo3'})\r\n *     .distinctUntilKeyChanged('name', (x: string, y: string) => x.substring(0, 3) === y.substring(0, 3))\r\n *     .subscribe(x => console.log(x));\r\n *\r\n * // displays:\r\n * // { age: 4, name: 'Foo1' }\r\n * // { age: 7, name: 'Bar' }\r\n * // { age: 5, name: 'Foo2' }\r\n *\r\n * @see {@link distinct}\r\n * @see {@link distinctUntilChanged}\r\n *\r\n * @param {string} key String key for object property lookup on each item.\r\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\r\n * @return {Observable} An Observable that emits items from the source Observable with distinct values based on the key specified.\r\n * @method distinctUntilKeyChanged\r\n * @owner Observable\r\n */\r\nfunction distinctUntilKeyChanged(key, compare) {\r\n    return distinctUntilKeyChanged_1.distinctUntilKeyChanged(key, compare)(this);\r\n}\r\nexports.distinctUntilKeyChanged = distinctUntilKeyChanged;\r\n"],"mappings":"AAAA,YAAY;;AACZ,IAAIA,yBAAyB,GAAGC,OAAO,CAAC,sCAAsC,CAAC;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,uBAAuB,CAACC,GAAG,EAAEC,OAAO,EAAE;EAC3C,OAAOJ,yBAAyB,CAACE,uBAAuB,CAACC,GAAG,EAAEC,OAAO,CAAC,CAAC,IAAI,CAAC;AAChF;AACAC,OAAO,CAACH,uBAAuB,GAAGA,uBAAuB"},"metadata":{},"sourceType":"script","externalDependencies":[]}