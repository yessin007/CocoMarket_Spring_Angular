{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/* tslint:enable:max-line-length */\n/**\r\n * Recursively projects each source value to an Observable which is merged in\r\n * the output Observable.\r\n *\r\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\r\n * projection function to every source value as well as every output value.\r\n * It's recursive.</span>\r\n *\r\n * <img src=\"./img/expand.png\" width=\"100%\">\r\n *\r\n * Returns an Observable that emits items based on applying a function that you\r\n * supply to each item emitted by the source Observable, where that function\r\n * returns an Observable, and then merging those resulting Observables and\r\n * emitting the results of this merger. *Expand* will re-emit on the output\r\n * Observable every source value. Then, each output value is given to the\r\n * `project` function which returns an inner Observable to be merged on the\r\n * output Observable. Those output values resulting from the projection are also\r\n * given to the `project` function to produce new output values. This is how\r\n * *expand* behaves recursively.\r\n *\r\n * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var powersOfTwo = clicks\r\n *   .mapTo(1)\r\n *   .expand(x => Rx.Observable.of(2 * x).delay(1000))\r\n *   .take(10);\r\n * powersOfTwo.subscribe(x => console.log(x));\r\n *\r\n * @see {@link mergeMap}\r\n * @see {@link mergeScan}\r\n *\r\n * @param {function(value: T, index: number) => Observable} project A function\r\n * that, when applied to an item emitted by the source or the output Observable,\r\n * returns an Observable.\r\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\r\n * Observables being subscribed to concurrently.\r\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\r\n * each projected inner Observable.\r\n * @return {Observable} An Observable that emits the source values and also\r\n * result of applying the projection function to each value emitted on the\r\n * output Observable and and merging the results of the Observables obtained\r\n * from this transformation.\r\n * @method expand\r\n * @owner Observable\r\n */\nfunction expand(project, concurrent, scheduler) {\n  if (concurrent === void 0) {\n    concurrent = Number.POSITIVE_INFINITY;\n  }\n  if (scheduler === void 0) {\n    scheduler = undefined;\n  }\n  concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n  return function (source) {\n    return source.lift(new ExpandOperator(project, concurrent, scheduler));\n  };\n}\nexports.expand = expand;\nvar ExpandOperator = function () {\n  function ExpandOperator(project, concurrent, scheduler) {\n    this.project = project;\n    this.concurrent = concurrent;\n    this.scheduler = scheduler;\n  }\n  ExpandOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\n  };\n  return ExpandOperator;\n}();\nexports.ExpandOperator = ExpandOperator;\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\nvar ExpandSubscriber = function (_super) {\n  __extends(ExpandSubscriber, _super);\n  function ExpandSubscriber(destination, project, concurrent, scheduler) {\n    _super.call(this, destination);\n    this.project = project;\n    this.concurrent = concurrent;\n    this.scheduler = scheduler;\n    this.index = 0;\n    this.active = 0;\n    this.hasCompleted = false;\n    if (concurrent < Number.POSITIVE_INFINITY) {\n      this.buffer = [];\n    }\n  }\n  ExpandSubscriber.dispatch = function (arg) {\n    var subscriber = arg.subscriber,\n      result = arg.result,\n      value = arg.value,\n      index = arg.index;\n    subscriber.subscribeToProjection(result, value, index);\n  };\n  ExpandSubscriber.prototype._next = function (value) {\n    var destination = this.destination;\n    if (destination.closed) {\n      this._complete();\n      return;\n    }\n    var index = this.index++;\n    if (this.active < this.concurrent) {\n      destination.next(value);\n      var result = tryCatch_1.tryCatch(this.project)(value, index);\n      if (result === errorObject_1.errorObject) {\n        destination.error(errorObject_1.errorObject.e);\n      } else if (!this.scheduler) {\n        this.subscribeToProjection(result, value, index);\n      } else {\n        var state = {\n          subscriber: this,\n          result: result,\n          value: value,\n          index: index\n        };\n        this.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  };\n  ExpandSubscriber.prototype.subscribeToProjection = function (result, value, index) {\n    this.active++;\n    this.add(subscribeToResult_1.subscribeToResult(this, result, value, index));\n  };\n  ExpandSubscriber.prototype._complete = function () {\n    this.hasCompleted = true;\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  };\n  ExpandSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n    this._next(innerValue);\n  };\n  ExpandSubscriber.prototype.notifyComplete = function (innerSub) {\n    var buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer && buffer.length > 0) {\n      this._next(buffer.shift());\n    }\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  };\n  return ExpandSubscriber;\n}(OuterSubscriber_1.OuterSubscriber);\nexports.ExpandSubscriber = ExpandSubscriber;","map":{"version":3,"names":["__extends","d","b","p","hasOwnProperty","__","constructor","prototype","Object","create","tryCatch_1","require","errorObject_1","OuterSubscriber_1","subscribeToResult_1","expand","project","concurrent","scheduler","Number","POSITIVE_INFINITY","undefined","source","lift","ExpandOperator","exports","call","subscriber","subscribe","ExpandSubscriber","_super","destination","index","active","hasCompleted","buffer","dispatch","arg","result","value","subscribeToProjection","_next","closed","_complete","next","tryCatch","errorObject","error","e","state","add","schedule","push","subscribeToResult","complete","notifyNext","outerValue","innerValue","outerIndex","innerIndex","innerSub","notifyComplete","remove","length","shift","OuterSubscriber"],"sources":["C:/Users/HP/Desktop/4SE3/PidevSym/PiDev_Spring_Angular/Front-End/frontOffice/node_modules/ng5-slider/node_modules/rxjs/operators/expand.js"],"sourcesContent":["\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar tryCatch_1 = require('../util/tryCatch');\r\nvar errorObject_1 = require('../util/errorObject');\r\nvar OuterSubscriber_1 = require('../OuterSubscriber');\r\nvar subscribeToResult_1 = require('../util/subscribeToResult');\r\n/* tslint:enable:max-line-length */\r\n/**\r\n * Recursively projects each source value to an Observable which is merged in\r\n * the output Observable.\r\n *\r\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\r\n * projection function to every source value as well as every output value.\r\n * It's recursive.</span>\r\n *\r\n * <img src=\"./img/expand.png\" width=\"100%\">\r\n *\r\n * Returns an Observable that emits items based on applying a function that you\r\n * supply to each item emitted by the source Observable, where that function\r\n * returns an Observable, and then merging those resulting Observables and\r\n * emitting the results of this merger. *Expand* will re-emit on the output\r\n * Observable every source value. Then, each output value is given to the\r\n * `project` function which returns an inner Observable to be merged on the\r\n * output Observable. Those output values resulting from the projection are also\r\n * given to the `project` function to produce new output values. This is how\r\n * *expand* behaves recursively.\r\n *\r\n * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var powersOfTwo = clicks\r\n *   .mapTo(1)\r\n *   .expand(x => Rx.Observable.of(2 * x).delay(1000))\r\n *   .take(10);\r\n * powersOfTwo.subscribe(x => console.log(x));\r\n *\r\n * @see {@link mergeMap}\r\n * @see {@link mergeScan}\r\n *\r\n * @param {function(value: T, index: number) => Observable} project A function\r\n * that, when applied to an item emitted by the source or the output Observable,\r\n * returns an Observable.\r\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\r\n * Observables being subscribed to concurrently.\r\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\r\n * each projected inner Observable.\r\n * @return {Observable} An Observable that emits the source values and also\r\n * result of applying the projection function to each value emitted on the\r\n * output Observable and and merging the results of the Observables obtained\r\n * from this transformation.\r\n * @method expand\r\n * @owner Observable\r\n */\r\nfunction expand(project, concurrent, scheduler) {\r\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\r\n    if (scheduler === void 0) { scheduler = undefined; }\r\n    concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\r\n    return function (source) { return source.lift(new ExpandOperator(project, concurrent, scheduler)); };\r\n}\r\nexports.expand = expand;\r\nvar ExpandOperator = (function () {\r\n    function ExpandOperator(project, concurrent, scheduler) {\r\n        this.project = project;\r\n        this.concurrent = concurrent;\r\n        this.scheduler = scheduler;\r\n    }\r\n    ExpandOperator.prototype.call = function (subscriber, source) {\r\n        return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\r\n    };\r\n    return ExpandOperator;\r\n}());\r\nexports.ExpandOperator = ExpandOperator;\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nvar ExpandSubscriber = (function (_super) {\r\n    __extends(ExpandSubscriber, _super);\r\n    function ExpandSubscriber(destination, project, concurrent, scheduler) {\r\n        _super.call(this, destination);\r\n        this.project = project;\r\n        this.concurrent = concurrent;\r\n        this.scheduler = scheduler;\r\n        this.index = 0;\r\n        this.active = 0;\r\n        this.hasCompleted = false;\r\n        if (concurrent < Number.POSITIVE_INFINITY) {\r\n            this.buffer = [];\r\n        }\r\n    }\r\n    ExpandSubscriber.dispatch = function (arg) {\r\n        var subscriber = arg.subscriber, result = arg.result, value = arg.value, index = arg.index;\r\n        subscriber.subscribeToProjection(result, value, index);\r\n    };\r\n    ExpandSubscriber.prototype._next = function (value) {\r\n        var destination = this.destination;\r\n        if (destination.closed) {\r\n            this._complete();\r\n            return;\r\n        }\r\n        var index = this.index++;\r\n        if (this.active < this.concurrent) {\r\n            destination.next(value);\r\n            var result = tryCatch_1.tryCatch(this.project)(value, index);\r\n            if (result === errorObject_1.errorObject) {\r\n                destination.error(errorObject_1.errorObject.e);\r\n            }\r\n            else if (!this.scheduler) {\r\n                this.subscribeToProjection(result, value, index);\r\n            }\r\n            else {\r\n                var state = { subscriber: this, result: result, value: value, index: index };\r\n                this.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));\r\n            }\r\n        }\r\n        else {\r\n            this.buffer.push(value);\r\n        }\r\n    };\r\n    ExpandSubscriber.prototype.subscribeToProjection = function (result, value, index) {\r\n        this.active++;\r\n        this.add(subscribeToResult_1.subscribeToResult(this, result, value, index));\r\n    };\r\n    ExpandSubscriber.prototype._complete = function () {\r\n        this.hasCompleted = true;\r\n        if (this.hasCompleted && this.active === 0) {\r\n            this.destination.complete();\r\n        }\r\n    };\r\n    ExpandSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\r\n        this._next(innerValue);\r\n    };\r\n    ExpandSubscriber.prototype.notifyComplete = function (innerSub) {\r\n        var buffer = this.buffer;\r\n        this.remove(innerSub);\r\n        this.active--;\r\n        if (buffer && buffer.length > 0) {\r\n            this._next(buffer.shift());\r\n        }\r\n        if (this.hasCompleted && this.active === 0) {\r\n            this.destination.complete();\r\n        }\r\n    };\r\n    return ExpandSubscriber;\r\n}(OuterSubscriber_1.OuterSubscriber));\r\nexports.ExpandSubscriber = ExpandSubscriber;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}