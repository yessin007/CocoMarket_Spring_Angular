{"ast":null,"code":"\"use strict\";\n\nvar mergeScan_1 = require('../operators/mergeScan');\n/**\r\n * Applies an accumulator function over the source Observable where the\r\n * accumulator function itself returns an Observable, then each intermediate\r\n * Observable returned is merged into the output Observable.\r\n *\r\n * <span class=\"informal\">It's like {@link scan}, but the Observables returned\r\n * by the accumulator are merged into the outer Observable.</span>\r\n *\r\n * @example <caption>Count the number of click events</caption>\r\n * const click$ = Rx.Observable.fromEvent(document, 'click');\r\n * const one$ = click$.mapTo(1);\r\n * const seed = 0;\r\n * const count$ = one$.mergeScan((acc, one) => Rx.Observable.of(acc + one), seed);\r\n * count$.subscribe(x => console.log(x));\r\n *\r\n * // Results:\r\n * 1\r\n * 2\r\n * 3\r\n * 4\r\n * // ...and so on for each click\r\n *\r\n * @param {function(acc: R, value: T): Observable<R>} accumulator\r\n * The accumulator function called on each source value.\r\n * @param seed The initial accumulation value.\r\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of\r\n * input Observables being subscribed to concurrently.\r\n * @return {Observable<R>} An observable of the accumulated values.\r\n * @method mergeScan\r\n * @owner Observable\r\n */\nfunction mergeScan(accumulator, seed, concurrent) {\n  if (concurrent === void 0) {\n    concurrent = Number.POSITIVE_INFINITY;\n  }\n  return mergeScan_1.mergeScan(accumulator, seed, concurrent)(this);\n}\nexports.mergeScan = mergeScan;","map":{"version":3,"names":["mergeScan_1","require","mergeScan","accumulator","seed","concurrent","Number","POSITIVE_INFINITY","exports"],"sources":["C:/Users/HP/Desktop/4SE3/PidevSym/PiDev_Spring_Angular/Front-End/frontOffice/node_modules/ng5-slider/node_modules/rxjs/operator/mergeScan.js"],"sourcesContent":["\"use strict\";\r\nvar mergeScan_1 = require('../operators/mergeScan');\r\n/**\r\n * Applies an accumulator function over the source Observable where the\r\n * accumulator function itself returns an Observable, then each intermediate\r\n * Observable returned is merged into the output Observable.\r\n *\r\n * <span class=\"informal\">It's like {@link scan}, but the Observables returned\r\n * by the accumulator are merged into the outer Observable.</span>\r\n *\r\n * @example <caption>Count the number of click events</caption>\r\n * const click$ = Rx.Observable.fromEvent(document, 'click');\r\n * const one$ = click$.mapTo(1);\r\n * const seed = 0;\r\n * const count$ = one$.mergeScan((acc, one) => Rx.Observable.of(acc + one), seed);\r\n * count$.subscribe(x => console.log(x));\r\n *\r\n * // Results:\r\n * 1\r\n * 2\r\n * 3\r\n * 4\r\n * // ...and so on for each click\r\n *\r\n * @param {function(acc: R, value: T): Observable<R>} accumulator\r\n * The accumulator function called on each source value.\r\n * @param seed The initial accumulation value.\r\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of\r\n * input Observables being subscribed to concurrently.\r\n * @return {Observable<R>} An observable of the accumulated values.\r\n * @method mergeScan\r\n * @owner Observable\r\n */\r\nfunction mergeScan(accumulator, seed, concurrent) {\r\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\r\n    return mergeScan_1.mergeScan(accumulator, seed, concurrent)(this);\r\n}\r\nexports.mergeScan = mergeScan;\r\n"],"mappings":"AAAA,YAAY;;AACZ,IAAIA,WAAW,GAAGC,OAAO,CAAC,wBAAwB,CAAC;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,SAAS,CAACC,WAAW,EAAEC,IAAI,EAAEC,UAAU,EAAE;EAC9C,IAAIA,UAAU,KAAK,KAAK,CAAC,EAAE;IAAEA,UAAU,GAAGC,MAAM,CAACC,iBAAiB;EAAE;EACpE,OAAOP,WAAW,CAACE,SAAS,CAACC,WAAW,EAAEC,IAAI,EAAEC,UAAU,CAAC,CAAC,IAAI,CAAC;AACrE;AACAG,OAAO,CAACN,SAAS,GAAGA,SAAS"},"metadata":{},"sourceType":"script","externalDependencies":[]}