{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar ArrayObservable_1 = require('../observable/ArrayObservable');\nvar isArray_1 = require('../util/isArray');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar none = {};\n/* tslint:enable:max-line-length */\n/**\r\n * Combines multiple Observables to create an Observable whose values are\r\n * calculated from the latest values of each of its input Observables.\r\n *\r\n * <span class=\"informal\">Whenever any input Observable emits a value, it\r\n * computes a formula using the latest values from all the inputs, then emits\r\n * the output of that formula.</span>\r\n *\r\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\r\n *\r\n * `combineLatest` combines the values from this Observable with values from\r\n * Observables passed as arguments. This is done by subscribing to each\r\n * Observable, in order, and collecting an array of each of the most recent\r\n * values any time any of the input Observables emits, then either taking that\r\n * array and passing it as arguments to an optional `project` function and\r\n * emitting the return value of that, or just emitting the array of recent\r\n * values directly if there is no `project` function.\r\n *\r\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\r\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\r\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\r\n * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));\r\n * bmi.subscribe(x => console.log('BMI is ' + x));\r\n *\r\n * // With output to console:\r\n * // BMI is 24.212293388429753\r\n * // BMI is 23.93948099205209\r\n * // BMI is 23.671253629592222\r\n *\r\n * @see {@link combineAll}\r\n * @see {@link merge}\r\n * @see {@link withLatestFrom}\r\n *\r\n * @param {ObservableInput} other An input Observable to combine with the source\r\n * Observable. More than one input Observables may be given as argument.\r\n * @param {function} [project] An optional function to project the values from\r\n * the combined latest values into a new value on the output Observable.\r\n * @return {Observable} An Observable of projected values from the most recent\r\n * values from each input Observable, or an array of the most recent values from\r\n * each input Observable.\r\n * @method combineLatest\r\n * @owner Observable\r\n */\nfunction combineLatest() {\n  var observables = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    observables[_i - 0] = arguments[_i];\n  }\n  var project = null;\n  if (typeof observables[observables.length - 1] === 'function') {\n    project = observables.pop();\n  }\n  // if the first and only other argument besides the resultSelector is an array\n  // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n  if (observables.length === 1 && isArray_1.isArray(observables[0])) {\n    observables = observables[0].slice();\n  }\n  return function (source) {\n    return source.lift.call(new ArrayObservable_1.ArrayObservable([source].concat(observables)), new CombineLatestOperator(project));\n  };\n}\nexports.combineLatest = combineLatest;\nvar CombineLatestOperator = function () {\n  function CombineLatestOperator(project) {\n    this.project = project;\n  }\n  CombineLatestOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new CombineLatestSubscriber(subscriber, this.project));\n  };\n  return CombineLatestOperator;\n}();\nexports.CombineLatestOperator = CombineLatestOperator;\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\nvar CombineLatestSubscriber = function (_super) {\n  __extends(CombineLatestSubscriber, _super);\n  function CombineLatestSubscriber(destination, project) {\n    _super.call(this, destination);\n    this.project = project;\n    this.active = 0;\n    this.values = [];\n    this.observables = [];\n  }\n  CombineLatestSubscriber.prototype._next = function (observable) {\n    this.values.push(none);\n    this.observables.push(observable);\n  };\n  CombineLatestSubscriber.prototype._complete = function () {\n    var observables = this.observables;\n    var len = observables.length;\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      this.active = len;\n      this.toRespond = len;\n      for (var i = 0; i < len; i++) {\n        var observable = observables[i];\n        this.add(subscribeToResult_1.subscribeToResult(this, observable, observable, i));\n      }\n    }\n  };\n  CombineLatestSubscriber.prototype.notifyComplete = function (unused) {\n    if ((this.active -= 1) === 0) {\n      this.destination.complete();\n    }\n  };\n  CombineLatestSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n    var values = this.values;\n    var oldVal = values[outerIndex];\n    var toRespond = !this.toRespond ? 0 : oldVal === none ? --this.toRespond : this.toRespond;\n    values[outerIndex] = innerValue;\n    if (toRespond === 0) {\n      if (this.project) {\n        this._tryProject(values);\n      } else {\n        this.destination.next(values.slice());\n      }\n    }\n  };\n  CombineLatestSubscriber.prototype._tryProject = function (values) {\n    var result;\n    try {\n      result = this.project.apply(this, values);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  };\n  return CombineLatestSubscriber;\n}(OuterSubscriber_1.OuterSubscriber);\nexports.CombineLatestSubscriber = CombineLatestSubscriber;","map":{"version":3,"names":["__extends","d","b","p","hasOwnProperty","__","constructor","prototype","Object","create","ArrayObservable_1","require","isArray_1","OuterSubscriber_1","subscribeToResult_1","none","combineLatest","observables","_i","arguments","length","project","pop","isArray","slice","source","lift","call","ArrayObservable","concat","CombineLatestOperator","exports","subscriber","subscribe","CombineLatestSubscriber","_super","destination","active","values","_next","observable","push","_complete","len","complete","toRespond","i","add","subscribeToResult","notifyComplete","unused","notifyNext","outerValue","innerValue","outerIndex","innerIndex","innerSub","oldVal","_tryProject","next","result","apply","err","error","OuterSubscriber"],"sources":["C:/Users/HP/Desktop/4SE3/PidevSym/PiDev_Spring_Angular/Front-End/frontOffice/node_modules/ng5-slider/node_modules/rxjs/operators/combineLatest.js"],"sourcesContent":["\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar ArrayObservable_1 = require('../observable/ArrayObservable');\r\nvar isArray_1 = require('../util/isArray');\r\nvar OuterSubscriber_1 = require('../OuterSubscriber');\r\nvar subscribeToResult_1 = require('../util/subscribeToResult');\r\nvar none = {};\r\n/* tslint:enable:max-line-length */\r\n/**\r\n * Combines multiple Observables to create an Observable whose values are\r\n * calculated from the latest values of each of its input Observables.\r\n *\r\n * <span class=\"informal\">Whenever any input Observable emits a value, it\r\n * computes a formula using the latest values from all the inputs, then emits\r\n * the output of that formula.</span>\r\n *\r\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\r\n *\r\n * `combineLatest` combines the values from this Observable with values from\r\n * Observables passed as arguments. This is done by subscribing to each\r\n * Observable, in order, and collecting an array of each of the most recent\r\n * values any time any of the input Observables emits, then either taking that\r\n * array and passing it as arguments to an optional `project` function and\r\n * emitting the return value of that, or just emitting the array of recent\r\n * values directly if there is no `project` function.\r\n *\r\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\r\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\r\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\r\n * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));\r\n * bmi.subscribe(x => console.log('BMI is ' + x));\r\n *\r\n * // With output to console:\r\n * // BMI is 24.212293388429753\r\n * // BMI is 23.93948099205209\r\n * // BMI is 23.671253629592222\r\n *\r\n * @see {@link combineAll}\r\n * @see {@link merge}\r\n * @see {@link withLatestFrom}\r\n *\r\n * @param {ObservableInput} other An input Observable to combine with the source\r\n * Observable. More than one input Observables may be given as argument.\r\n * @param {function} [project] An optional function to project the values from\r\n * the combined latest values into a new value on the output Observable.\r\n * @return {Observable} An Observable of projected values from the most recent\r\n * values from each input Observable, or an array of the most recent values from\r\n * each input Observable.\r\n * @method combineLatest\r\n * @owner Observable\r\n */\r\nfunction combineLatest() {\r\n    var observables = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        observables[_i - 0] = arguments[_i];\r\n    }\r\n    var project = null;\r\n    if (typeof observables[observables.length - 1] === 'function') {\r\n        project = observables.pop();\r\n    }\r\n    // if the first and only other argument besides the resultSelector is an array\r\n    // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\r\n    if (observables.length === 1 && isArray_1.isArray(observables[0])) {\r\n        observables = observables[0].slice();\r\n    }\r\n    return function (source) { return source.lift.call(new ArrayObservable_1.ArrayObservable([source].concat(observables)), new CombineLatestOperator(project)); };\r\n}\r\nexports.combineLatest = combineLatest;\r\nvar CombineLatestOperator = (function () {\r\n    function CombineLatestOperator(project) {\r\n        this.project = project;\r\n    }\r\n    CombineLatestOperator.prototype.call = function (subscriber, source) {\r\n        return source.subscribe(new CombineLatestSubscriber(subscriber, this.project));\r\n    };\r\n    return CombineLatestOperator;\r\n}());\r\nexports.CombineLatestOperator = CombineLatestOperator;\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nvar CombineLatestSubscriber = (function (_super) {\r\n    __extends(CombineLatestSubscriber, _super);\r\n    function CombineLatestSubscriber(destination, project) {\r\n        _super.call(this, destination);\r\n        this.project = project;\r\n        this.active = 0;\r\n        this.values = [];\r\n        this.observables = [];\r\n    }\r\n    CombineLatestSubscriber.prototype._next = function (observable) {\r\n        this.values.push(none);\r\n        this.observables.push(observable);\r\n    };\r\n    CombineLatestSubscriber.prototype._complete = function () {\r\n        var observables = this.observables;\r\n        var len = observables.length;\r\n        if (len === 0) {\r\n            this.destination.complete();\r\n        }\r\n        else {\r\n            this.active = len;\r\n            this.toRespond = len;\r\n            for (var i = 0; i < len; i++) {\r\n                var observable = observables[i];\r\n                this.add(subscribeToResult_1.subscribeToResult(this, observable, observable, i));\r\n            }\r\n        }\r\n    };\r\n    CombineLatestSubscriber.prototype.notifyComplete = function (unused) {\r\n        if ((this.active -= 1) === 0) {\r\n            this.destination.complete();\r\n        }\r\n    };\r\n    CombineLatestSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\r\n        var values = this.values;\r\n        var oldVal = values[outerIndex];\r\n        var toRespond = !this.toRespond\r\n            ? 0\r\n            : oldVal === none ? --this.toRespond : this.toRespond;\r\n        values[outerIndex] = innerValue;\r\n        if (toRespond === 0) {\r\n            if (this.project) {\r\n                this._tryProject(values);\r\n            }\r\n            else {\r\n                this.destination.next(values.slice());\r\n            }\r\n        }\r\n    };\r\n    CombineLatestSubscriber.prototype._tryProject = function (values) {\r\n        var result;\r\n        try {\r\n            result = this.project.apply(this, values);\r\n        }\r\n        catch (err) {\r\n            this.destination.error(err);\r\n            return;\r\n        }\r\n        this.destination.next(result);\r\n    };\r\n    return CombineLatestSubscriber;\r\n}(OuterSubscriber_1.OuterSubscriber));\r\nexports.CombineLatestSubscriber = CombineLatestSubscriber;\r\n"],"mappings":"AAAA,YAAY;;AACZ,IAAIA,SAAS,GAAI,IAAI,IAAI,IAAI,CAACA,SAAS,IAAK,UAAUC,CAAC,EAAEC,CAAC,EAAE;EACxD,KAAK,IAAIC,CAAC,IAAID,CAAC,EAAE,IAAIA,CAAC,CAACE,cAAc,CAACD,CAAC,CAAC,EAAEF,CAAC,CAACE,CAAC,CAAC,GAAGD,CAAC,CAACC,CAAC,CAAC;EACrD,SAASE,EAAE,GAAG;IAAE,IAAI,CAACC,WAAW,GAAGL,CAAC;EAAE;EACtCA,CAAC,CAACM,SAAS,GAAGL,CAAC,KAAK,IAAI,GAAGM,MAAM,CAACC,MAAM,CAACP,CAAC,CAAC,IAAIG,EAAE,CAACE,SAAS,GAAGL,CAAC,CAACK,SAAS,EAAE,IAAIF,EAAE,EAAE,CAAC;AACxF,CAAC;AACD,IAAIK,iBAAiB,GAAGC,OAAO,CAAC,+BAA+B,CAAC;AAChE,IAAIC,SAAS,GAAGD,OAAO,CAAC,iBAAiB,CAAC;AAC1C,IAAIE,iBAAiB,GAAGF,OAAO,CAAC,oBAAoB,CAAC;AACrD,IAAIG,mBAAmB,GAAGH,OAAO,CAAC,2BAA2B,CAAC;AAC9D,IAAII,IAAI,GAAG,CAAC,CAAC;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,aAAa,GAAG;EACrB,IAAIC,WAAW,GAAG,EAAE;EACpB,KAAK,IAAIC,EAAE,GAAG,CAAC,EAAEA,EAAE,GAAGC,SAAS,CAACC,MAAM,EAAEF,EAAE,EAAE,EAAE;IAC1CD,WAAW,CAACC,EAAE,GAAG,CAAC,CAAC,GAAGC,SAAS,CAACD,EAAE,CAAC;EACvC;EACA,IAAIG,OAAO,GAAG,IAAI;EAClB,IAAI,OAAOJ,WAAW,CAACA,WAAW,CAACG,MAAM,GAAG,CAAC,CAAC,KAAK,UAAU,EAAE;IAC3DC,OAAO,GAAGJ,WAAW,CAACK,GAAG,EAAE;EAC/B;EACA;EACA;EACA,IAAIL,WAAW,CAACG,MAAM,KAAK,CAAC,IAAIR,SAAS,CAACW,OAAO,CAACN,WAAW,CAAC,CAAC,CAAC,CAAC,EAAE;IAC/DA,WAAW,GAAGA,WAAW,CAAC,CAAC,CAAC,CAACO,KAAK,EAAE;EACxC;EACA,OAAO,UAAUC,MAAM,EAAE;IAAE,OAAOA,MAAM,CAACC,IAAI,CAACC,IAAI,CAAC,IAAIjB,iBAAiB,CAACkB,eAAe,CAAC,CAACH,MAAM,CAAC,CAACI,MAAM,CAACZ,WAAW,CAAC,CAAC,EAAE,IAAIa,qBAAqB,CAACT,OAAO,CAAC,CAAC;EAAE,CAAC;AAClK;AACAU,OAAO,CAACf,aAAa,GAAGA,aAAa;AACrC,IAAIc,qBAAqB,GAAI,YAAY;EACrC,SAASA,qBAAqB,CAACT,OAAO,EAAE;IACpC,IAAI,CAACA,OAAO,GAAGA,OAAO;EAC1B;EACAS,qBAAqB,CAACvB,SAAS,CAACoB,IAAI,GAAG,UAAUK,UAAU,EAAEP,MAAM,EAAE;IACjE,OAAOA,MAAM,CAACQ,SAAS,CAAC,IAAIC,uBAAuB,CAACF,UAAU,EAAE,IAAI,CAACX,OAAO,CAAC,CAAC;EAClF,CAAC;EACD,OAAOS,qBAAqB;AAChC,CAAC,EAAG;AACJC,OAAO,CAACD,qBAAqB,GAAGA,qBAAqB;AACrD;AACA;AACA;AACA;AACA;AACA,IAAII,uBAAuB,GAAI,UAAUC,MAAM,EAAE;EAC7CnC,SAAS,CAACkC,uBAAuB,EAAEC,MAAM,CAAC;EAC1C,SAASD,uBAAuB,CAACE,WAAW,EAAEf,OAAO,EAAE;IACnDc,MAAM,CAACR,IAAI,CAAC,IAAI,EAAES,WAAW,CAAC;IAC9B,IAAI,CAACf,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACgB,MAAM,GAAG,CAAC;IACf,IAAI,CAACC,MAAM,GAAG,EAAE;IAChB,IAAI,CAACrB,WAAW,GAAG,EAAE;EACzB;EACAiB,uBAAuB,CAAC3B,SAAS,CAACgC,KAAK,GAAG,UAAUC,UAAU,EAAE;IAC5D,IAAI,CAACF,MAAM,CAACG,IAAI,CAAC1B,IAAI,CAAC;IACtB,IAAI,CAACE,WAAW,CAACwB,IAAI,CAACD,UAAU,CAAC;EACrC,CAAC;EACDN,uBAAuB,CAAC3B,SAAS,CAACmC,SAAS,GAAG,YAAY;IACtD,IAAIzB,WAAW,GAAG,IAAI,CAACA,WAAW;IAClC,IAAI0B,GAAG,GAAG1B,WAAW,CAACG,MAAM;IAC5B,IAAIuB,GAAG,KAAK,CAAC,EAAE;MACX,IAAI,CAACP,WAAW,CAACQ,QAAQ,EAAE;IAC/B,CAAC,MACI;MACD,IAAI,CAACP,MAAM,GAAGM,GAAG;MACjB,IAAI,CAACE,SAAS,GAAGF,GAAG;MACpB,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,GAAG,EAAEG,CAAC,EAAE,EAAE;QAC1B,IAAIN,UAAU,GAAGvB,WAAW,CAAC6B,CAAC,CAAC;QAC/B,IAAI,CAACC,GAAG,CAACjC,mBAAmB,CAACkC,iBAAiB,CAAC,IAAI,EAAER,UAAU,EAAEA,UAAU,EAAEM,CAAC,CAAC,CAAC;MACpF;IACJ;EACJ,CAAC;EACDZ,uBAAuB,CAAC3B,SAAS,CAAC0C,cAAc,GAAG,UAAUC,MAAM,EAAE;IACjE,IAAI,CAAC,IAAI,CAACb,MAAM,IAAI,CAAC,MAAM,CAAC,EAAE;MAC1B,IAAI,CAACD,WAAW,CAACQ,QAAQ,EAAE;IAC/B;EACJ,CAAC;EACDV,uBAAuB,CAAC3B,SAAS,CAAC4C,UAAU,GAAG,UAAUC,UAAU,EAAEC,UAAU,EAAEC,UAAU,EAAEC,UAAU,EAAEC,QAAQ,EAAE;IAC/G,IAAIlB,MAAM,GAAG,IAAI,CAACA,MAAM;IACxB,IAAImB,MAAM,GAAGnB,MAAM,CAACgB,UAAU,CAAC;IAC/B,IAAIT,SAAS,GAAG,CAAC,IAAI,CAACA,SAAS,GACzB,CAAC,GACDY,MAAM,KAAK1C,IAAI,GAAG,EAAE,IAAI,CAAC8B,SAAS,GAAG,IAAI,CAACA,SAAS;IACzDP,MAAM,CAACgB,UAAU,CAAC,GAAGD,UAAU;IAC/B,IAAIR,SAAS,KAAK,CAAC,EAAE;MACjB,IAAI,IAAI,CAACxB,OAAO,EAAE;QACd,IAAI,CAACqC,WAAW,CAACpB,MAAM,CAAC;MAC5B,CAAC,MACI;QACD,IAAI,CAACF,WAAW,CAACuB,IAAI,CAACrB,MAAM,CAACd,KAAK,EAAE,CAAC;MACzC;IACJ;EACJ,CAAC;EACDU,uBAAuB,CAAC3B,SAAS,CAACmD,WAAW,GAAG,UAAUpB,MAAM,EAAE;IAC9D,IAAIsB,MAAM;IACV,IAAI;MACAA,MAAM,GAAG,IAAI,CAACvC,OAAO,CAACwC,KAAK,CAAC,IAAI,EAAEvB,MAAM,CAAC;IAC7C,CAAC,CACD,OAAOwB,GAAG,EAAE;MACR,IAAI,CAAC1B,WAAW,CAAC2B,KAAK,CAACD,GAAG,CAAC;MAC3B;IACJ;IACA,IAAI,CAAC1B,WAAW,CAACuB,IAAI,CAACC,MAAM,CAAC;EACjC,CAAC;EACD,OAAO1B,uBAAuB;AAClC,CAAC,CAACrB,iBAAiB,CAACmD,eAAe,CAAE;AACrCjC,OAAO,CAACG,uBAAuB,GAAGA,uBAAuB"},"metadata":{},"sourceType":"script","externalDependencies":[]}