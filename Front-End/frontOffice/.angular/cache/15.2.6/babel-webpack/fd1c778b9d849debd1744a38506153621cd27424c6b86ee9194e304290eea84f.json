{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @extends {Ignored}\r\n * @hide true\r\n */\nvar RangeObservable = function (_super) {\n  __extends(RangeObservable, _super);\n  function RangeObservable(start, count, scheduler) {\n    _super.call(this);\n    this.start = start;\n    this._count = count;\n    this.scheduler = scheduler;\n  }\n  /**\r\n   * Creates an Observable that emits a sequence of numbers within a specified\r\n   * range.\r\n   *\r\n   * <span class=\"informal\">Emits a sequence of numbers in a range.</span>\r\n   *\r\n   * <img src=\"./img/range.png\" width=\"100%\">\r\n   *\r\n   * `range` operator emits a range of sequential integers, in order, where you\r\n   * select the `start` of the range and its `length`. By default, uses no\r\n   * IScheduler and just delivers the notifications synchronously, but may use\r\n   * an optional IScheduler to regulate those deliveries.\r\n   *\r\n   * @example <caption>Emits the numbers 1 to 10</caption>\r\n   * var numbers = Rx.Observable.range(1, 10);\r\n   * numbers.subscribe(x => console.log(x));\r\n   *\r\n   * @see {@link timer}\r\n   * @see {@link interval}\r\n   *\r\n   * @param {number} [start=0] The value of the first integer in the sequence.\r\n   * @param {number} [count=0] The number of sequential integers to generate.\r\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\r\n   * the emissions of the notifications.\r\n   * @return {Observable} An Observable of numbers that emits a finite range of\r\n   * sequential integers.\r\n   * @static true\r\n   * @name range\r\n   * @owner Observable\r\n   */\n  RangeObservable.create = function (start, count, scheduler) {\n    if (start === void 0) {\n      start = 0;\n    }\n    if (count === void 0) {\n      count = 0;\n    }\n    return new RangeObservable(start, count, scheduler);\n  };\n  RangeObservable.dispatch = function (state) {\n    var start = state.start,\n      index = state.index,\n      count = state.count,\n      subscriber = state.subscriber;\n    if (index >= count) {\n      subscriber.complete();\n      return;\n    }\n    subscriber.next(start);\n    if (subscriber.closed) {\n      return;\n    }\n    state.index = index + 1;\n    state.start = start + 1;\n    this.schedule(state);\n  };\n  /** @deprecated internal use only */\n  RangeObservable.prototype._subscribe = function (subscriber) {\n    var index = 0;\n    var start = this.start;\n    var count = this._count;\n    var scheduler = this.scheduler;\n    if (scheduler) {\n      return scheduler.schedule(RangeObservable.dispatch, 0, {\n        index: index,\n        count: count,\n        start: start,\n        subscriber: subscriber\n      });\n    } else {\n      do {\n        if (index++ >= count) {\n          subscriber.complete();\n          break;\n        }\n        subscriber.next(start++);\n        if (subscriber.closed) {\n          break;\n        }\n      } while (true);\n    }\n  };\n  return RangeObservable;\n}(Observable_1.Observable);\nexports.RangeObservable = RangeObservable;","map":{"version":3,"names":["__extends","d","b","p","hasOwnProperty","__","constructor","prototype","Object","create","Observable_1","require","RangeObservable","_super","start","count","scheduler","call","_count","dispatch","state","index","subscriber","complete","next","closed","schedule","_subscribe","Observable","exports"],"sources":["C:/Users/HP/Desktop/4SE3/PidevSym/PiDev_Spring_Angular/Front-End/frontOffice/node_modules/ng5-slider/node_modules/rxjs/observable/RangeObservable.js"],"sourcesContent":["\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar Observable_1 = require('../Observable');\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @extends {Ignored}\r\n * @hide true\r\n */\r\nvar RangeObservable = (function (_super) {\r\n    __extends(RangeObservable, _super);\r\n    function RangeObservable(start, count, scheduler) {\r\n        _super.call(this);\r\n        this.start = start;\r\n        this._count = count;\r\n        this.scheduler = scheduler;\r\n    }\r\n    /**\r\n     * Creates an Observable that emits a sequence of numbers within a specified\r\n     * range.\r\n     *\r\n     * <span class=\"informal\">Emits a sequence of numbers in a range.</span>\r\n     *\r\n     * <img src=\"./img/range.png\" width=\"100%\">\r\n     *\r\n     * `range` operator emits a range of sequential integers, in order, where you\r\n     * select the `start` of the range and its `length`. By default, uses no\r\n     * IScheduler and just delivers the notifications synchronously, but may use\r\n     * an optional IScheduler to regulate those deliveries.\r\n     *\r\n     * @example <caption>Emits the numbers 1 to 10</caption>\r\n     * var numbers = Rx.Observable.range(1, 10);\r\n     * numbers.subscribe(x => console.log(x));\r\n     *\r\n     * @see {@link timer}\r\n     * @see {@link interval}\r\n     *\r\n     * @param {number} [start=0] The value of the first integer in the sequence.\r\n     * @param {number} [count=0] The number of sequential integers to generate.\r\n     * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\r\n     * the emissions of the notifications.\r\n     * @return {Observable} An Observable of numbers that emits a finite range of\r\n     * sequential integers.\r\n     * @static true\r\n     * @name range\r\n     * @owner Observable\r\n     */\r\n    RangeObservable.create = function (start, count, scheduler) {\r\n        if (start === void 0) { start = 0; }\r\n        if (count === void 0) { count = 0; }\r\n        return new RangeObservable(start, count, scheduler);\r\n    };\r\n    RangeObservable.dispatch = function (state) {\r\n        var start = state.start, index = state.index, count = state.count, subscriber = state.subscriber;\r\n        if (index >= count) {\r\n            subscriber.complete();\r\n            return;\r\n        }\r\n        subscriber.next(start);\r\n        if (subscriber.closed) {\r\n            return;\r\n        }\r\n        state.index = index + 1;\r\n        state.start = start + 1;\r\n        this.schedule(state);\r\n    };\r\n    /** @deprecated internal use only */ RangeObservable.prototype._subscribe = function (subscriber) {\r\n        var index = 0;\r\n        var start = this.start;\r\n        var count = this._count;\r\n        var scheduler = this.scheduler;\r\n        if (scheduler) {\r\n            return scheduler.schedule(RangeObservable.dispatch, 0, {\r\n                index: index, count: count, start: start, subscriber: subscriber\r\n            });\r\n        }\r\n        else {\r\n            do {\r\n                if (index++ >= count) {\r\n                    subscriber.complete();\r\n                    break;\r\n                }\r\n                subscriber.next(start++);\r\n                if (subscriber.closed) {\r\n                    break;\r\n                }\r\n            } while (true);\r\n        }\r\n    };\r\n    return RangeObservable;\r\n}(Observable_1.Observable));\r\nexports.RangeObservable = RangeObservable;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}