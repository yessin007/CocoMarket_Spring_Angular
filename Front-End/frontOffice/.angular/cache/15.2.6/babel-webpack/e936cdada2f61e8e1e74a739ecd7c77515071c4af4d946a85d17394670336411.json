{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\r\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\r\n * calls `error`, this method will resubscribe to the source Observable for a maximum of `count` resubscriptions (given\r\n * as a number parameter) rather than propagating the `error` call.\r\n *\r\n * <img src=\"./img/retry.png\" width=\"100%\">\r\n *\r\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\r\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\r\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\r\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\r\n * @param {number} count - Number of retry attempts before failing.\r\n * @return {Observable} The source Observable modified with the retry logic.\r\n * @method retry\r\n * @owner Observable\r\n */\nfunction retry(count) {\n  if (count === void 0) {\n    count = -1;\n  }\n  return function (source) {\n    return source.lift(new RetryOperator(count, source));\n  };\n}\nexports.retry = retry;\nvar RetryOperator = function () {\n  function RetryOperator(count, source) {\n    this.count = count;\n    this.source = source;\n  }\n  RetryOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));\n  };\n  return RetryOperator;\n}();\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\nvar RetrySubscriber = function (_super) {\n  __extends(RetrySubscriber, _super);\n  function RetrySubscriber(destination, count, source) {\n    _super.call(this, destination);\n    this.count = count;\n    this.source = source;\n  }\n  RetrySubscriber.prototype.error = function (err) {\n    if (!this.isStopped) {\n      var _a = this,\n        source = _a.source,\n        count = _a.count;\n      if (count === 0) {\n        return _super.prototype.error.call(this, err);\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      source.subscribe(this._unsubscribeAndRecycle());\n    }\n  };\n  return RetrySubscriber;\n}(Subscriber_1.Subscriber);","map":{"version":3,"names":["__extends","d","b","p","hasOwnProperty","__","constructor","prototype","Object","create","Subscriber_1","require","retry","count","source","lift","RetryOperator","exports","call","subscriber","subscribe","RetrySubscriber","_super","destination","error","err","isStopped","_a","_unsubscribeAndRecycle","Subscriber"],"sources":["C:/Users/HP/Desktop/4SE3/PidevSym/PiDev_Spring_Angular/Front-End/frontOffice/node_modules/ng5-slider/node_modules/rxjs/operators/retry.js"],"sourcesContent":["\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar Subscriber_1 = require('../Subscriber');\r\n/**\r\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\r\n * calls `error`, this method will resubscribe to the source Observable for a maximum of `count` resubscriptions (given\r\n * as a number parameter) rather than propagating the `error` call.\r\n *\r\n * <img src=\"./img/retry.png\" width=\"100%\">\r\n *\r\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\r\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\r\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\r\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\r\n * @param {number} count - Number of retry attempts before failing.\r\n * @return {Observable} The source Observable modified with the retry logic.\r\n * @method retry\r\n * @owner Observable\r\n */\r\nfunction retry(count) {\r\n    if (count === void 0) { count = -1; }\r\n    return function (source) { return source.lift(new RetryOperator(count, source)); };\r\n}\r\nexports.retry = retry;\r\nvar RetryOperator = (function () {\r\n    function RetryOperator(count, source) {\r\n        this.count = count;\r\n        this.source = source;\r\n    }\r\n    RetryOperator.prototype.call = function (subscriber, source) {\r\n        return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));\r\n    };\r\n    return RetryOperator;\r\n}());\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nvar RetrySubscriber = (function (_super) {\r\n    __extends(RetrySubscriber, _super);\r\n    function RetrySubscriber(destination, count, source) {\r\n        _super.call(this, destination);\r\n        this.count = count;\r\n        this.source = source;\r\n    }\r\n    RetrySubscriber.prototype.error = function (err) {\r\n        if (!this.isStopped) {\r\n            var _a = this, source = _a.source, count = _a.count;\r\n            if (count === 0) {\r\n                return _super.prototype.error.call(this, err);\r\n            }\r\n            else if (count > -1) {\r\n                this.count = count - 1;\r\n            }\r\n            source.subscribe(this._unsubscribeAndRecycle());\r\n        }\r\n    };\r\n    return RetrySubscriber;\r\n}(Subscriber_1.Subscriber));\r\n"],"mappings":"AAAA,YAAY;;AACZ,IAAIA,SAAS,GAAI,IAAI,IAAI,IAAI,CAACA,SAAS,IAAK,UAAUC,CAAC,EAAEC,CAAC,EAAE;EACxD,KAAK,IAAIC,CAAC,IAAID,CAAC,EAAE,IAAIA,CAAC,CAACE,cAAc,CAACD,CAAC,CAAC,EAAEF,CAAC,CAACE,CAAC,CAAC,GAAGD,CAAC,CAACC,CAAC,CAAC;EACrD,SAASE,EAAE,GAAG;IAAE,IAAI,CAACC,WAAW,GAAGL,CAAC;EAAE;EACtCA,CAAC,CAACM,SAAS,GAAGL,CAAC,KAAK,IAAI,GAAGM,MAAM,CAACC,MAAM,CAACP,CAAC,CAAC,IAAIG,EAAE,CAACE,SAAS,GAAGL,CAAC,CAACK,SAAS,EAAE,IAAIF,EAAE,EAAE,CAAC;AACxF,CAAC;AACD,IAAIK,YAAY,GAAGC,OAAO,CAAC,eAAe,CAAC;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,KAAK,CAACC,KAAK,EAAE;EAClB,IAAIA,KAAK,KAAK,KAAK,CAAC,EAAE;IAAEA,KAAK,GAAG,CAAC,CAAC;EAAE;EACpC,OAAO,UAAUC,MAAM,EAAE;IAAE,OAAOA,MAAM,CAACC,IAAI,CAAC,IAAIC,aAAa,CAACH,KAAK,EAAEC,MAAM,CAAC,CAAC;EAAE,CAAC;AACtF;AACAG,OAAO,CAACL,KAAK,GAAGA,KAAK;AACrB,IAAII,aAAa,GAAI,YAAY;EAC7B,SAASA,aAAa,CAACH,KAAK,EAAEC,MAAM,EAAE;IAClC,IAAI,CAACD,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,MAAM,GAAGA,MAAM;EACxB;EACAE,aAAa,CAACT,SAAS,CAACW,IAAI,GAAG,UAAUC,UAAU,EAAEL,MAAM,EAAE;IACzD,OAAOA,MAAM,CAACM,SAAS,CAAC,IAAIC,eAAe,CAACF,UAAU,EAAE,IAAI,CAACN,KAAK,EAAE,IAAI,CAACC,MAAM,CAAC,CAAC;EACrF,CAAC;EACD,OAAOE,aAAa;AACxB,CAAC,EAAG;AACJ;AACA;AACA;AACA;AACA;AACA,IAAIK,eAAe,GAAI,UAAUC,MAAM,EAAE;EACrCtB,SAAS,CAACqB,eAAe,EAAEC,MAAM,CAAC;EAClC,SAASD,eAAe,CAACE,WAAW,EAAEV,KAAK,EAAEC,MAAM,EAAE;IACjDQ,MAAM,CAACJ,IAAI,CAAC,IAAI,EAAEK,WAAW,CAAC;IAC9B,IAAI,CAACV,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,MAAM,GAAGA,MAAM;EACxB;EACAO,eAAe,CAACd,SAAS,CAACiB,KAAK,GAAG,UAAUC,GAAG,EAAE;IAC7C,IAAI,CAAC,IAAI,CAACC,SAAS,EAAE;MACjB,IAAIC,EAAE,GAAG,IAAI;QAAEb,MAAM,GAAGa,EAAE,CAACb,MAAM;QAAED,KAAK,GAAGc,EAAE,CAACd,KAAK;MACnD,IAAIA,KAAK,KAAK,CAAC,EAAE;QACb,OAAOS,MAAM,CAACf,SAAS,CAACiB,KAAK,CAACN,IAAI,CAAC,IAAI,EAAEO,GAAG,CAAC;MACjD,CAAC,MACI,IAAIZ,KAAK,GAAG,CAAC,CAAC,EAAE;QACjB,IAAI,CAACA,KAAK,GAAGA,KAAK,GAAG,CAAC;MAC1B;MACAC,MAAM,CAACM,SAAS,CAAC,IAAI,CAACQ,sBAAsB,EAAE,CAAC;IACnD;EACJ,CAAC;EACD,OAAOP,eAAe;AAC1B,CAAC,CAACX,YAAY,CAACmB,UAAU,CAAE"},"metadata":{},"sourceType":"script","externalDependencies":[]}