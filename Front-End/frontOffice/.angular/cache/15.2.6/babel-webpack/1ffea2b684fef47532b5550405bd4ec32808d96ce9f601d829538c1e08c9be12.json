{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar async_1 = require('../scheduler/async');\nvar isDate_1 = require('../util/isDate');\nvar Subscriber_1 = require('../Subscriber');\nvar TimeoutError_1 = require('../util/TimeoutError');\n/**\r\n *\r\n * Errors if Observable does not emit a value in given time span.\r\n *\r\n * <span class=\"informal\">Timeouts on Observable that doesn't emit values fast enough.</span>\r\n *\r\n * <img src=\"./img/timeout.png\" width=\"100%\">\r\n *\r\n * `timeout` operator accepts as an argument either a number or a Date.\r\n *\r\n * If number was provided, it returns an Observable that behaves like a source\r\n * Observable, unless there is a period of time where there is no value emitted.\r\n * So if you provide `100` as argument and first value comes after 50ms from\r\n * the moment of subscription, this value will be simply re-emitted by the resulting\r\n * Observable. If however after that 100ms passes without a second value being emitted,\r\n * stream will end with an error and source Observable will be unsubscribed.\r\n * These checks are performed throughout whole lifecycle of Observable - from the moment\r\n * it was subscribed to, until it completes or errors itself. Thus every value must be\r\n * emitted within specified period since previous value.\r\n *\r\n * If provided argument was Date, returned Observable behaves differently. It throws\r\n * if Observable did not complete before provided Date. This means that periods between\r\n * emission of particular values do not matter in this case. If Observable did not complete\r\n * before provided Date, source Observable will be unsubscribed. Other than that, resulting\r\n * stream behaves just as source Observable.\r\n *\r\n * `timeout` accepts also a Scheduler as a second parameter. It is used to schedule moment (or moments)\r\n * when returned Observable will check if source stream emitted value or completed.\r\n *\r\n * @example <caption>Check if ticks are emitted within certain timespan</caption>\r\n * const seconds = Rx.Observable.interval(1000);\r\n *\r\n * seconds.timeout(1100) // Let's use bigger timespan to be safe,\r\n *                       // since `interval` might fire a bit later then scheduled.\r\n * .subscribe(\r\n *     value => console.log(value), // Will emit numbers just as regular `interval` would.\r\n *     err => console.log(err) // Will never be called.\r\n * );\r\n *\r\n * seconds.timeout(900).subscribe(\r\n *     value => console.log(value), // Will never be called.\r\n *     err => console.log(err) // Will emit error before even first value is emitted,\r\n *                             // since it did not arrive within 900ms period.\r\n * );\r\n *\r\n * @example <caption>Use Date to check if Observable completed</caption>\r\n * const seconds = Rx.Observable.interval(1000);\r\n *\r\n * seconds.timeout(new Date(\"December 17, 2020 03:24:00\"))\r\n * .subscribe(\r\n *     value => console.log(value), // Will emit values as regular `interval` would\r\n *                                  // until December 17, 2020 at 03:24:00.\r\n *     err => console.log(err) // On December 17, 2020 at 03:24:00 it will emit an error,\r\n *                             // since Observable did not complete by then.\r\n * );\r\n *\r\n * @see {@link timeoutWith}\r\n *\r\n * @param {number|Date} due Number specifying period within which Observable must emit values\r\n *                          or Date specifying before when Observable should complete\r\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\r\n * @return {Observable<T>} Observable that mirrors behaviour of source, unless timeout checks fail.\r\n * @method timeout\r\n * @owner Observable\r\n */\nfunction timeout(due, scheduler) {\n  if (scheduler === void 0) {\n    scheduler = async_1.async;\n  }\n  var absoluteTimeout = isDate_1.isDate(due);\n  var waitFor = absoluteTimeout ? +due - scheduler.now() : Math.abs(due);\n  return function (source) {\n    return source.lift(new TimeoutOperator(waitFor, absoluteTimeout, scheduler, new TimeoutError_1.TimeoutError()));\n  };\n}\nexports.timeout = timeout;\nvar TimeoutOperator = function () {\n  function TimeoutOperator(waitFor, absoluteTimeout, scheduler, errorInstance) {\n    this.waitFor = waitFor;\n    this.absoluteTimeout = absoluteTimeout;\n    this.scheduler = scheduler;\n    this.errorInstance = errorInstance;\n  }\n  TimeoutOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new TimeoutSubscriber(subscriber, this.absoluteTimeout, this.waitFor, this.scheduler, this.errorInstance));\n  };\n  return TimeoutOperator;\n}();\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\nvar TimeoutSubscriber = function (_super) {\n  __extends(TimeoutSubscriber, _super);\n  function TimeoutSubscriber(destination, absoluteTimeout, waitFor, scheduler, errorInstance) {\n    _super.call(this, destination);\n    this.absoluteTimeout = absoluteTimeout;\n    this.waitFor = waitFor;\n    this.scheduler = scheduler;\n    this.errorInstance = errorInstance;\n    this.action = null;\n    this.scheduleTimeout();\n  }\n  TimeoutSubscriber.dispatchTimeout = function (subscriber) {\n    subscriber.error(subscriber.errorInstance);\n  };\n  TimeoutSubscriber.prototype.scheduleTimeout = function () {\n    var action = this.action;\n    if (action) {\n      // Recycle the action if we've already scheduled one. All the production\n      // Scheduler Actions mutate their state/delay time and return themeselves.\n      // VirtualActions are immutable, so they create and return a clone. In this\n      // case, we need to set the action reference to the most recent VirtualAction,\n      // to ensure that's the one we clone from next time.\n      this.action = action.schedule(this, this.waitFor);\n    } else {\n      this.add(this.action = this.scheduler.schedule(TimeoutSubscriber.dispatchTimeout, this.waitFor, this));\n    }\n  };\n  TimeoutSubscriber.prototype._next = function (value) {\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n    _super.prototype._next.call(this, value);\n  };\n  /** @deprecated internal use only */\n  TimeoutSubscriber.prototype._unsubscribe = function () {\n    this.action = null;\n    this.scheduler = null;\n    this.errorInstance = null;\n  };\n  return TimeoutSubscriber;\n}(Subscriber_1.Subscriber);","map":{"version":3,"names":["__extends","d","b","p","hasOwnProperty","__","constructor","prototype","Object","create","async_1","require","isDate_1","Subscriber_1","TimeoutError_1","timeout","due","scheduler","async","absoluteTimeout","isDate","waitFor","now","Math","abs","source","lift","TimeoutOperator","TimeoutError","exports","errorInstance","call","subscriber","subscribe","TimeoutSubscriber","_super","destination","action","scheduleTimeout","dispatchTimeout","error","schedule","add","_next","value","_unsubscribe","Subscriber"],"sources":["C:/Users/HP/Desktop/4SE3/PidevSym/PiDev_Spring_Angular/Front-End/frontOffice/node_modules/ng5-slider/node_modules/rxjs/operators/timeout.js"],"sourcesContent":["\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar async_1 = require('../scheduler/async');\r\nvar isDate_1 = require('../util/isDate');\r\nvar Subscriber_1 = require('../Subscriber');\r\nvar TimeoutError_1 = require('../util/TimeoutError');\r\n/**\r\n *\r\n * Errors if Observable does not emit a value in given time span.\r\n *\r\n * <span class=\"informal\">Timeouts on Observable that doesn't emit values fast enough.</span>\r\n *\r\n * <img src=\"./img/timeout.png\" width=\"100%\">\r\n *\r\n * `timeout` operator accepts as an argument either a number or a Date.\r\n *\r\n * If number was provided, it returns an Observable that behaves like a source\r\n * Observable, unless there is a period of time where there is no value emitted.\r\n * So if you provide `100` as argument and first value comes after 50ms from\r\n * the moment of subscription, this value will be simply re-emitted by the resulting\r\n * Observable. If however after that 100ms passes without a second value being emitted,\r\n * stream will end with an error and source Observable will be unsubscribed.\r\n * These checks are performed throughout whole lifecycle of Observable - from the moment\r\n * it was subscribed to, until it completes or errors itself. Thus every value must be\r\n * emitted within specified period since previous value.\r\n *\r\n * If provided argument was Date, returned Observable behaves differently. It throws\r\n * if Observable did not complete before provided Date. This means that periods between\r\n * emission of particular values do not matter in this case. If Observable did not complete\r\n * before provided Date, source Observable will be unsubscribed. Other than that, resulting\r\n * stream behaves just as source Observable.\r\n *\r\n * `timeout` accepts also a Scheduler as a second parameter. It is used to schedule moment (or moments)\r\n * when returned Observable will check if source stream emitted value or completed.\r\n *\r\n * @example <caption>Check if ticks are emitted within certain timespan</caption>\r\n * const seconds = Rx.Observable.interval(1000);\r\n *\r\n * seconds.timeout(1100) // Let's use bigger timespan to be safe,\r\n *                       // since `interval` might fire a bit later then scheduled.\r\n * .subscribe(\r\n *     value => console.log(value), // Will emit numbers just as regular `interval` would.\r\n *     err => console.log(err) // Will never be called.\r\n * );\r\n *\r\n * seconds.timeout(900).subscribe(\r\n *     value => console.log(value), // Will never be called.\r\n *     err => console.log(err) // Will emit error before even first value is emitted,\r\n *                             // since it did not arrive within 900ms period.\r\n * );\r\n *\r\n * @example <caption>Use Date to check if Observable completed</caption>\r\n * const seconds = Rx.Observable.interval(1000);\r\n *\r\n * seconds.timeout(new Date(\"December 17, 2020 03:24:00\"))\r\n * .subscribe(\r\n *     value => console.log(value), // Will emit values as regular `interval` would\r\n *                                  // until December 17, 2020 at 03:24:00.\r\n *     err => console.log(err) // On December 17, 2020 at 03:24:00 it will emit an error,\r\n *                             // since Observable did not complete by then.\r\n * );\r\n *\r\n * @see {@link timeoutWith}\r\n *\r\n * @param {number|Date} due Number specifying period within which Observable must emit values\r\n *                          or Date specifying before when Observable should complete\r\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\r\n * @return {Observable<T>} Observable that mirrors behaviour of source, unless timeout checks fail.\r\n * @method timeout\r\n * @owner Observable\r\n */\r\nfunction timeout(due, scheduler) {\r\n    if (scheduler === void 0) { scheduler = async_1.async; }\r\n    var absoluteTimeout = isDate_1.isDate(due);\r\n    var waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(due);\r\n    return function (source) { return source.lift(new TimeoutOperator(waitFor, absoluteTimeout, scheduler, new TimeoutError_1.TimeoutError())); };\r\n}\r\nexports.timeout = timeout;\r\nvar TimeoutOperator = (function () {\r\n    function TimeoutOperator(waitFor, absoluteTimeout, scheduler, errorInstance) {\r\n        this.waitFor = waitFor;\r\n        this.absoluteTimeout = absoluteTimeout;\r\n        this.scheduler = scheduler;\r\n        this.errorInstance = errorInstance;\r\n    }\r\n    TimeoutOperator.prototype.call = function (subscriber, source) {\r\n        return source.subscribe(new TimeoutSubscriber(subscriber, this.absoluteTimeout, this.waitFor, this.scheduler, this.errorInstance));\r\n    };\r\n    return TimeoutOperator;\r\n}());\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nvar TimeoutSubscriber = (function (_super) {\r\n    __extends(TimeoutSubscriber, _super);\r\n    function TimeoutSubscriber(destination, absoluteTimeout, waitFor, scheduler, errorInstance) {\r\n        _super.call(this, destination);\r\n        this.absoluteTimeout = absoluteTimeout;\r\n        this.waitFor = waitFor;\r\n        this.scheduler = scheduler;\r\n        this.errorInstance = errorInstance;\r\n        this.action = null;\r\n        this.scheduleTimeout();\r\n    }\r\n    TimeoutSubscriber.dispatchTimeout = function (subscriber) {\r\n        subscriber.error(subscriber.errorInstance);\r\n    };\r\n    TimeoutSubscriber.prototype.scheduleTimeout = function () {\r\n        var action = this.action;\r\n        if (action) {\r\n            // Recycle the action if we've already scheduled one. All the production\r\n            // Scheduler Actions mutate their state/delay time and return themeselves.\r\n            // VirtualActions are immutable, so they create and return a clone. In this\r\n            // case, we need to set the action reference to the most recent VirtualAction,\r\n            // to ensure that's the one we clone from next time.\r\n            this.action = action.schedule(this, this.waitFor);\r\n        }\r\n        else {\r\n            this.add(this.action = this.scheduler.schedule(TimeoutSubscriber.dispatchTimeout, this.waitFor, this));\r\n        }\r\n    };\r\n    TimeoutSubscriber.prototype._next = function (value) {\r\n        if (!this.absoluteTimeout) {\r\n            this.scheduleTimeout();\r\n        }\r\n        _super.prototype._next.call(this, value);\r\n    };\r\n    /** @deprecated internal use only */ TimeoutSubscriber.prototype._unsubscribe = function () {\r\n        this.action = null;\r\n        this.scheduler = null;\r\n        this.errorInstance = null;\r\n    };\r\n    return TimeoutSubscriber;\r\n}(Subscriber_1.Subscriber));\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}