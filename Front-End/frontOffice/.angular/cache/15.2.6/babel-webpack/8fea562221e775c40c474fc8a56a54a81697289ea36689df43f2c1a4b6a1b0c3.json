{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/* tslint:enable:max-line-length */\n/**\r\n * Projects each source value to an Observable which is merged in the output\r\n * Observable, emitting values only from the most recently projected Observable.\r\n *\r\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\r\n * these inner Observables using {@link switch}.</span>\r\n *\r\n * <img src=\"./img/switchMap.png\" width=\"100%\">\r\n *\r\n * Returns an Observable that emits items based on applying a function that you\r\n * supply to each item emitted by the source Observable, where that function\r\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\r\n * inner Observables, the output Observable begins emitting the items emitted by\r\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\r\n * stops emitting items from the earlier-emitted inner Observable and begins\r\n * emitting items from the new one. It continues to behave like this for\r\n * subsequent inner Observables.\r\n *\r\n * @example <caption>Rerun an interval Observable on every click event</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * @see {@link concatMap}\r\n * @see {@link exhaustMap}\r\n * @see {@link mergeMap}\r\n * @see {@link switch}\r\n * @see {@link switchMapTo}\r\n *\r\n * @param {function(value: T, ?index: number): ObservableInput} project A function\r\n * that, when applied to an item emitted by the source Observable, returns an\r\n * Observable.\r\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\r\n * A function to produce the value on the output Observable based on the values\r\n * and the indices of the source (outer) emission and the inner Observable\r\n * emission. The arguments passed to this function are:\r\n * - `outerValue`: the value that came from the source\r\n * - `innerValue`: the value that came from the projected Observable\r\n * - `outerIndex`: the \"index\" of the value that came from the source\r\n * - `innerIndex`: the \"index\" of the value from the projected Observable\r\n * @return {Observable} An Observable that emits the result of applying the\r\n * projection function (and the optional `resultSelector`) to each item emitted\r\n * by the source Observable and taking only the values from the most recently\r\n * projected inner Observable.\r\n * @method switchMap\r\n * @owner Observable\r\n */\nfunction switchMap(project, resultSelector) {\n  return function switchMapOperatorFunction(source) {\n    return source.lift(new SwitchMapOperator(project, resultSelector));\n  };\n}\nexports.switchMap = switchMap;\nvar SwitchMapOperator = function () {\n  function SwitchMapOperator(project, resultSelector) {\n    this.project = project;\n    this.resultSelector = resultSelector;\n  }\n  SwitchMapOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new SwitchMapSubscriber(subscriber, this.project, this.resultSelector));\n  };\n  return SwitchMapOperator;\n}();\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\nvar SwitchMapSubscriber = function (_super) {\n  __extends(SwitchMapSubscriber, _super);\n  function SwitchMapSubscriber(destination, project, resultSelector) {\n    _super.call(this, destination);\n    this.project = project;\n    this.resultSelector = resultSelector;\n    this.index = 0;\n  }\n  SwitchMapSubscriber.prototype._next = function (value) {\n    var result;\n    var index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (error) {\n      this.destination.error(error);\n      return;\n    }\n    this._innerSub(result, value, index);\n  };\n  SwitchMapSubscriber.prototype._innerSub = function (result, value, index) {\n    var innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult_1.subscribeToResult(this, result, value, index));\n  };\n  SwitchMapSubscriber.prototype._complete = function () {\n    var innerSubscription = this.innerSubscription;\n    if (!innerSubscription || innerSubscription.closed) {\n      _super.prototype._complete.call(this);\n    }\n  };\n  /** @deprecated internal use only */\n  SwitchMapSubscriber.prototype._unsubscribe = function () {\n    this.innerSubscription = null;\n  };\n  SwitchMapSubscriber.prototype.notifyComplete = function (innerSub) {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      _super.prototype._complete.call(this);\n    }\n  };\n  SwitchMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n    if (this.resultSelector) {\n      this._tryNotifyNext(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  };\n  SwitchMapSubscriber.prototype._tryNotifyNext = function (outerValue, innerValue, outerIndex, innerIndex) {\n    var result;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  };\n  return SwitchMapSubscriber;\n}(OuterSubscriber_1.OuterSubscriber);","map":{"version":3,"names":["__extends","d","b","p","hasOwnProperty","__","constructor","prototype","Object","create","OuterSubscriber_1","require","subscribeToResult_1","switchMap","project","resultSelector","switchMapOperatorFunction","source","lift","SwitchMapOperator","exports","call","subscriber","subscribe","SwitchMapSubscriber","_super","destination","index","_next","value","result","error","_innerSub","innerSubscription","unsubscribe","add","subscribeToResult","_complete","closed","_unsubscribe","notifyComplete","innerSub","remove","isStopped","notifyNext","outerValue","innerValue","outerIndex","innerIndex","_tryNotifyNext","next","err","OuterSubscriber"],"sources":["C:/Users/HP/Desktop/4SE3/PidevSym/PiDev_Spring_Angular/Front-End/frontOffice/node_modules/ng5-slider/node_modules/rxjs/operators/switchMap.js"],"sourcesContent":["\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar OuterSubscriber_1 = require('../OuterSubscriber');\r\nvar subscribeToResult_1 = require('../util/subscribeToResult');\r\n/* tslint:enable:max-line-length */\r\n/**\r\n * Projects each source value to an Observable which is merged in the output\r\n * Observable, emitting values only from the most recently projected Observable.\r\n *\r\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\r\n * these inner Observables using {@link switch}.</span>\r\n *\r\n * <img src=\"./img/switchMap.png\" width=\"100%\">\r\n *\r\n * Returns an Observable that emits items based on applying a function that you\r\n * supply to each item emitted by the source Observable, where that function\r\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\r\n * inner Observables, the output Observable begins emitting the items emitted by\r\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\r\n * stops emitting items from the earlier-emitted inner Observable and begins\r\n * emitting items from the new one. It continues to behave like this for\r\n * subsequent inner Observables.\r\n *\r\n * @example <caption>Rerun an interval Observable on every click event</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * @see {@link concatMap}\r\n * @see {@link exhaustMap}\r\n * @see {@link mergeMap}\r\n * @see {@link switch}\r\n * @see {@link switchMapTo}\r\n *\r\n * @param {function(value: T, ?index: number): ObservableInput} project A function\r\n * that, when applied to an item emitted by the source Observable, returns an\r\n * Observable.\r\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\r\n * A function to produce the value on the output Observable based on the values\r\n * and the indices of the source (outer) emission and the inner Observable\r\n * emission. The arguments passed to this function are:\r\n * - `outerValue`: the value that came from the source\r\n * - `innerValue`: the value that came from the projected Observable\r\n * - `outerIndex`: the \"index\" of the value that came from the source\r\n * - `innerIndex`: the \"index\" of the value from the projected Observable\r\n * @return {Observable} An Observable that emits the result of applying the\r\n * projection function (and the optional `resultSelector`) to each item emitted\r\n * by the source Observable and taking only the values from the most recently\r\n * projected inner Observable.\r\n * @method switchMap\r\n * @owner Observable\r\n */\r\nfunction switchMap(project, resultSelector) {\r\n    return function switchMapOperatorFunction(source) {\r\n        return source.lift(new SwitchMapOperator(project, resultSelector));\r\n    };\r\n}\r\nexports.switchMap = switchMap;\r\nvar SwitchMapOperator = (function () {\r\n    function SwitchMapOperator(project, resultSelector) {\r\n        this.project = project;\r\n        this.resultSelector = resultSelector;\r\n    }\r\n    SwitchMapOperator.prototype.call = function (subscriber, source) {\r\n        return source.subscribe(new SwitchMapSubscriber(subscriber, this.project, this.resultSelector));\r\n    };\r\n    return SwitchMapOperator;\r\n}());\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nvar SwitchMapSubscriber = (function (_super) {\r\n    __extends(SwitchMapSubscriber, _super);\r\n    function SwitchMapSubscriber(destination, project, resultSelector) {\r\n        _super.call(this, destination);\r\n        this.project = project;\r\n        this.resultSelector = resultSelector;\r\n        this.index = 0;\r\n    }\r\n    SwitchMapSubscriber.prototype._next = function (value) {\r\n        var result;\r\n        var index = this.index++;\r\n        try {\r\n            result = this.project(value, index);\r\n        }\r\n        catch (error) {\r\n            this.destination.error(error);\r\n            return;\r\n        }\r\n        this._innerSub(result, value, index);\r\n    };\r\n    SwitchMapSubscriber.prototype._innerSub = function (result, value, index) {\r\n        var innerSubscription = this.innerSubscription;\r\n        if (innerSubscription) {\r\n            innerSubscription.unsubscribe();\r\n        }\r\n        this.add(this.innerSubscription = subscribeToResult_1.subscribeToResult(this, result, value, index));\r\n    };\r\n    SwitchMapSubscriber.prototype._complete = function () {\r\n        var innerSubscription = this.innerSubscription;\r\n        if (!innerSubscription || innerSubscription.closed) {\r\n            _super.prototype._complete.call(this);\r\n        }\r\n    };\r\n    /** @deprecated internal use only */ SwitchMapSubscriber.prototype._unsubscribe = function () {\r\n        this.innerSubscription = null;\r\n    };\r\n    SwitchMapSubscriber.prototype.notifyComplete = function (innerSub) {\r\n        this.remove(innerSub);\r\n        this.innerSubscription = null;\r\n        if (this.isStopped) {\r\n            _super.prototype._complete.call(this);\r\n        }\r\n    };\r\n    SwitchMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\r\n        if (this.resultSelector) {\r\n            this._tryNotifyNext(outerValue, innerValue, outerIndex, innerIndex);\r\n        }\r\n        else {\r\n            this.destination.next(innerValue);\r\n        }\r\n    };\r\n    SwitchMapSubscriber.prototype._tryNotifyNext = function (outerValue, innerValue, outerIndex, innerIndex) {\r\n        var result;\r\n        try {\r\n            result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\r\n        }\r\n        catch (err) {\r\n            this.destination.error(err);\r\n            return;\r\n        }\r\n        this.destination.next(result);\r\n    };\r\n    return SwitchMapSubscriber;\r\n}(OuterSubscriber_1.OuterSubscriber));\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}