{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\r\n * Ignores source values for a duration determined by another Observable, then\r\n * emits the most recent value from the source Observable, then repeats this\r\n * process.\r\n *\r\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\r\n * duration is determined by a second Observable.</span>\r\n *\r\n * <img src=\"./img/audit.png\" width=\"100%\">\r\n *\r\n * `audit` is similar to `throttle`, but emits the last value from the silenced\r\n * time window, instead of the first value. `audit` emits the most recent value\r\n * from the source Observable on the output Observable as soon as its internal\r\n * timer becomes disabled, and ignores source values while the timer is enabled.\r\n * Initially, the timer is disabled. As soon as the first source value arrives,\r\n * the timer is enabled by calling the `durationSelector` function with the\r\n * source value, which returns the \"duration\" Observable. When the duration\r\n * Observable emits a value or completes, the timer is disabled, then the most\r\n * recent source value is emitted on the output Observable, and this process\r\n * repeats for the next source value.\r\n *\r\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var result = clicks.audit(ev => Rx.Observable.interval(1000));\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * @see {@link auditTime}\r\n * @see {@link debounce}\r\n * @see {@link delayWhen}\r\n * @see {@link sample}\r\n * @see {@link throttle}\r\n *\r\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\r\n * that receives a value from the source Observable, for computing the silencing\r\n * duration, returned as an Observable or a Promise.\r\n * @return {Observable<T>} An Observable that performs rate-limiting of\r\n * emissions from the source Observable.\r\n * @method audit\r\n * @owner Observable\r\n */\nfunction audit(durationSelector) {\n  return function auditOperatorFunction(source) {\n    return source.lift(new AuditOperator(durationSelector));\n  };\n}\nexports.audit = audit;\nvar AuditOperator = function () {\n  function AuditOperator(durationSelector) {\n    this.durationSelector = durationSelector;\n  }\n  AuditOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new AuditSubscriber(subscriber, this.durationSelector));\n  };\n  return AuditOperator;\n}();\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\nvar AuditSubscriber = function (_super) {\n  __extends(AuditSubscriber, _super);\n  function AuditSubscriber(destination, durationSelector) {\n    _super.call(this, destination);\n    this.durationSelector = durationSelector;\n    this.hasValue = false;\n  }\n  AuditSubscriber.prototype._next = function (value) {\n    this.value = value;\n    this.hasValue = true;\n    if (!this.throttled) {\n      var duration = tryCatch_1.tryCatch(this.durationSelector)(value);\n      if (duration === errorObject_1.errorObject) {\n        this.destination.error(errorObject_1.errorObject.e);\n      } else {\n        var innerSubscription = subscribeToResult_1.subscribeToResult(this, duration);\n        if (innerSubscription.closed) {\n          this.clearThrottle();\n        } else {\n          this.add(this.throttled = innerSubscription);\n        }\n      }\n    }\n  };\n  AuditSubscriber.prototype.clearThrottle = function () {\n    var _a = this,\n      value = _a.value,\n      hasValue = _a.hasValue,\n      throttled = _a.throttled;\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n    if (hasValue) {\n      this.value = null;\n      this.hasValue = false;\n      this.destination.next(value);\n    }\n  };\n  AuditSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex) {\n    this.clearThrottle();\n  };\n  AuditSubscriber.prototype.notifyComplete = function () {\n    this.clearThrottle();\n  };\n  return AuditSubscriber;\n}(OuterSubscriber_1.OuterSubscriber);","map":{"version":3,"names":["__extends","d","b","p","hasOwnProperty","__","constructor","prototype","Object","create","tryCatch_1","require","errorObject_1","OuterSubscriber_1","subscribeToResult_1","audit","durationSelector","auditOperatorFunction","source","lift","AuditOperator","exports","call","subscriber","subscribe","AuditSubscriber","_super","destination","hasValue","_next","value","throttled","duration","tryCatch","errorObject","error","e","innerSubscription","subscribeToResult","closed","clearThrottle","add","_a","remove","unsubscribe","next","notifyNext","outerValue","innerValue","outerIndex","innerIndex","notifyComplete","OuterSubscriber"],"sources":["C:/Users/HP/Desktop/4SE3/PidevSym/PiDev_Spring_Angular/Front-End/frontOffice/node_modules/ng5-slider/node_modules/rxjs/operators/audit.js"],"sourcesContent":["\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar tryCatch_1 = require('../util/tryCatch');\r\nvar errorObject_1 = require('../util/errorObject');\r\nvar OuterSubscriber_1 = require('../OuterSubscriber');\r\nvar subscribeToResult_1 = require('../util/subscribeToResult');\r\n/**\r\n * Ignores source values for a duration determined by another Observable, then\r\n * emits the most recent value from the source Observable, then repeats this\r\n * process.\r\n *\r\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\r\n * duration is determined by a second Observable.</span>\r\n *\r\n * <img src=\"./img/audit.png\" width=\"100%\">\r\n *\r\n * `audit` is similar to `throttle`, but emits the last value from the silenced\r\n * time window, instead of the first value. `audit` emits the most recent value\r\n * from the source Observable on the output Observable as soon as its internal\r\n * timer becomes disabled, and ignores source values while the timer is enabled.\r\n * Initially, the timer is disabled. As soon as the first source value arrives,\r\n * the timer is enabled by calling the `durationSelector` function with the\r\n * source value, which returns the \"duration\" Observable. When the duration\r\n * Observable emits a value or completes, the timer is disabled, then the most\r\n * recent source value is emitted on the output Observable, and this process\r\n * repeats for the next source value.\r\n *\r\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var result = clicks.audit(ev => Rx.Observable.interval(1000));\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * @see {@link auditTime}\r\n * @see {@link debounce}\r\n * @see {@link delayWhen}\r\n * @see {@link sample}\r\n * @see {@link throttle}\r\n *\r\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\r\n * that receives a value from the source Observable, for computing the silencing\r\n * duration, returned as an Observable or a Promise.\r\n * @return {Observable<T>} An Observable that performs rate-limiting of\r\n * emissions from the source Observable.\r\n * @method audit\r\n * @owner Observable\r\n */\r\nfunction audit(durationSelector) {\r\n    return function auditOperatorFunction(source) {\r\n        return source.lift(new AuditOperator(durationSelector));\r\n    };\r\n}\r\nexports.audit = audit;\r\nvar AuditOperator = (function () {\r\n    function AuditOperator(durationSelector) {\r\n        this.durationSelector = durationSelector;\r\n    }\r\n    AuditOperator.prototype.call = function (subscriber, source) {\r\n        return source.subscribe(new AuditSubscriber(subscriber, this.durationSelector));\r\n    };\r\n    return AuditOperator;\r\n}());\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nvar AuditSubscriber = (function (_super) {\r\n    __extends(AuditSubscriber, _super);\r\n    function AuditSubscriber(destination, durationSelector) {\r\n        _super.call(this, destination);\r\n        this.durationSelector = durationSelector;\r\n        this.hasValue = false;\r\n    }\r\n    AuditSubscriber.prototype._next = function (value) {\r\n        this.value = value;\r\n        this.hasValue = true;\r\n        if (!this.throttled) {\r\n            var duration = tryCatch_1.tryCatch(this.durationSelector)(value);\r\n            if (duration === errorObject_1.errorObject) {\r\n                this.destination.error(errorObject_1.errorObject.e);\r\n            }\r\n            else {\r\n                var innerSubscription = subscribeToResult_1.subscribeToResult(this, duration);\r\n                if (innerSubscription.closed) {\r\n                    this.clearThrottle();\r\n                }\r\n                else {\r\n                    this.add(this.throttled = innerSubscription);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    AuditSubscriber.prototype.clearThrottle = function () {\r\n        var _a = this, value = _a.value, hasValue = _a.hasValue, throttled = _a.throttled;\r\n        if (throttled) {\r\n            this.remove(throttled);\r\n            this.throttled = null;\r\n            throttled.unsubscribe();\r\n        }\r\n        if (hasValue) {\r\n            this.value = null;\r\n            this.hasValue = false;\r\n            this.destination.next(value);\r\n        }\r\n    };\r\n    AuditSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex) {\r\n        this.clearThrottle();\r\n    };\r\n    AuditSubscriber.prototype.notifyComplete = function () {\r\n        this.clearThrottle();\r\n    };\r\n    return AuditSubscriber;\r\n}(OuterSubscriber_1.OuterSubscriber));\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}