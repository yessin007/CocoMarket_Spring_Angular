{"ast":null,"code":"\"use strict\";\n\nvar bufferWhen_1 = require('../operators/bufferWhen');\n/**\r\n * Buffers the source Observable values, using a factory function of closing\r\n * Observables to determine when to close, emit, and reset the buffer.\r\n *\r\n * <span class=\"informal\">Collects values from the past as an array. When it\r\n * starts collecting values, it calls a function that returns an Observable that\r\n * tells when to close the buffer and restart collecting.</span>\r\n *\r\n * <img src=\"./img/bufferWhen.png\" width=\"100%\">\r\n *\r\n * Opens a buffer immediately, then closes the buffer when the observable\r\n * returned by calling `closingSelector` function emits a value. When it closes\r\n * the buffer, it immediately opens a new buffer and repeats the process.\r\n *\r\n * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var buffered = clicks.bufferWhen(() =>\r\n *   Rx.Observable.interval(1000 + Math.random() * 4000)\r\n * );\r\n * buffered.subscribe(x => console.log(x));\r\n *\r\n * @see {@link buffer}\r\n * @see {@link bufferCount}\r\n * @see {@link bufferTime}\r\n * @see {@link bufferToggle}\r\n * @see {@link windowWhen}\r\n *\r\n * @param {function(): Observable} closingSelector A function that takes no\r\n * arguments and returns an Observable that signals buffer closure.\r\n * @return {Observable<T[]>} An observable of arrays of buffered values.\r\n * @method bufferWhen\r\n * @owner Observable\r\n */\nfunction bufferWhen(closingSelector) {\n  return bufferWhen_1.bufferWhen(closingSelector)(this);\n}\nexports.bufferWhen = bufferWhen;","map":{"version":3,"names":["bufferWhen_1","require","bufferWhen","closingSelector","exports"],"sources":["C:/Users/HP/Desktop/4SE3/PidevSym/PiDev_Spring_Angular/Front-End/frontOffice/node_modules/ng5-slider/node_modules/rxjs/operator/bufferWhen.js"],"sourcesContent":["\"use strict\";\r\nvar bufferWhen_1 = require('../operators/bufferWhen');\r\n/**\r\n * Buffers the source Observable values, using a factory function of closing\r\n * Observables to determine when to close, emit, and reset the buffer.\r\n *\r\n * <span class=\"informal\">Collects values from the past as an array. When it\r\n * starts collecting values, it calls a function that returns an Observable that\r\n * tells when to close the buffer and restart collecting.</span>\r\n *\r\n * <img src=\"./img/bufferWhen.png\" width=\"100%\">\r\n *\r\n * Opens a buffer immediately, then closes the buffer when the observable\r\n * returned by calling `closingSelector` function emits a value. When it closes\r\n * the buffer, it immediately opens a new buffer and repeats the process.\r\n *\r\n * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var buffered = clicks.bufferWhen(() =>\r\n *   Rx.Observable.interval(1000 + Math.random() * 4000)\r\n * );\r\n * buffered.subscribe(x => console.log(x));\r\n *\r\n * @see {@link buffer}\r\n * @see {@link bufferCount}\r\n * @see {@link bufferTime}\r\n * @see {@link bufferToggle}\r\n * @see {@link windowWhen}\r\n *\r\n * @param {function(): Observable} closingSelector A function that takes no\r\n * arguments and returns an Observable that signals buffer closure.\r\n * @return {Observable<T[]>} An observable of arrays of buffered values.\r\n * @method bufferWhen\r\n * @owner Observable\r\n */\r\nfunction bufferWhen(closingSelector) {\r\n    return bufferWhen_1.bufferWhen(closingSelector)(this);\r\n}\r\nexports.bufferWhen = bufferWhen;\r\n"],"mappings":"AAAA,YAAY;;AACZ,IAAIA,YAAY,GAAGC,OAAO,CAAC,yBAAyB,CAAC;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,UAAU,CAACC,eAAe,EAAE;EACjC,OAAOH,YAAY,CAACE,UAAU,CAACC,eAAe,CAAC,CAAC,IAAI,CAAC;AACzD;AACAC,OAAO,CAACF,UAAU,GAAGA,UAAU"},"metadata":{},"sourceType":"script","externalDependencies":[]}