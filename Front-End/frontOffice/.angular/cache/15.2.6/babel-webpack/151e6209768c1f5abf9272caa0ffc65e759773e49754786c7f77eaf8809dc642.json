{"ast":null,"code":"\"use strict\";\n\nvar ArrayObservable_1 = require('../observable/ArrayObservable');\nvar ScalarObservable_1 = require('../observable/ScalarObservable');\nvar EmptyObservable_1 = require('../observable/EmptyObservable');\nvar concat_1 = require('../observable/concat');\nvar isScheduler_1 = require('../util/isScheduler');\n/* tslint:enable:max-line-length */\n/**\r\n * Returns an Observable that emits the items you specify as arguments before it begins to emit\r\n * items emitted by the source Observable.\r\n *\r\n * <img src=\"./img/startWith.png\" width=\"100%\">\r\n *\r\n * @param {...T} values - Items you want the modified Observable to emit first.\r\n * @param {Scheduler} [scheduler] - A {@link IScheduler} to use for scheduling\r\n * the emissions of the `next` notifications.\r\n * @return {Observable} An Observable that emits the items in the specified Iterable and then emits the items\r\n * emitted by the source Observable.\r\n * @method startWith\r\n * @owner Observable\r\n */\nfunction startWith() {\n  var array = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    array[_i - 0] = arguments[_i];\n  }\n  return function (source) {\n    var scheduler = array[array.length - 1];\n    if (isScheduler_1.isScheduler(scheduler)) {\n      array.pop();\n    } else {\n      scheduler = null;\n    }\n    var len = array.length;\n    if (len === 1) {\n      return concat_1.concat(new ScalarObservable_1.ScalarObservable(array[0], scheduler), source);\n    } else if (len > 1) {\n      return concat_1.concat(new ArrayObservable_1.ArrayObservable(array, scheduler), source);\n    } else {\n      return concat_1.concat(new EmptyObservable_1.EmptyObservable(scheduler), source);\n    }\n  };\n}\nexports.startWith = startWith;","map":{"version":3,"names":["ArrayObservable_1","require","ScalarObservable_1","EmptyObservable_1","concat_1","isScheduler_1","startWith","array","_i","arguments","length","source","scheduler","isScheduler","pop","len","concat","ScalarObservable","ArrayObservable","EmptyObservable","exports"],"sources":["C:/Users/HP/Desktop/4SE3/PidevSym/PiDev_Spring_Angular/Front-End/frontOffice/node_modules/ng5-slider/node_modules/rxjs/operators/startWith.js"],"sourcesContent":["\"use strict\";\r\nvar ArrayObservable_1 = require('../observable/ArrayObservable');\r\nvar ScalarObservable_1 = require('../observable/ScalarObservable');\r\nvar EmptyObservable_1 = require('../observable/EmptyObservable');\r\nvar concat_1 = require('../observable/concat');\r\nvar isScheduler_1 = require('../util/isScheduler');\r\n/* tslint:enable:max-line-length */\r\n/**\r\n * Returns an Observable that emits the items you specify as arguments before it begins to emit\r\n * items emitted by the source Observable.\r\n *\r\n * <img src=\"./img/startWith.png\" width=\"100%\">\r\n *\r\n * @param {...T} values - Items you want the modified Observable to emit first.\r\n * @param {Scheduler} [scheduler] - A {@link IScheduler} to use for scheduling\r\n * the emissions of the `next` notifications.\r\n * @return {Observable} An Observable that emits the items in the specified Iterable and then emits the items\r\n * emitted by the source Observable.\r\n * @method startWith\r\n * @owner Observable\r\n */\r\nfunction startWith() {\r\n    var array = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        array[_i - 0] = arguments[_i];\r\n    }\r\n    return function (source) {\r\n        var scheduler = array[array.length - 1];\r\n        if (isScheduler_1.isScheduler(scheduler)) {\r\n            array.pop();\r\n        }\r\n        else {\r\n            scheduler = null;\r\n        }\r\n        var len = array.length;\r\n        if (len === 1) {\r\n            return concat_1.concat(new ScalarObservable_1.ScalarObservable(array[0], scheduler), source);\r\n        }\r\n        else if (len > 1) {\r\n            return concat_1.concat(new ArrayObservable_1.ArrayObservable(array, scheduler), source);\r\n        }\r\n        else {\r\n            return concat_1.concat(new EmptyObservable_1.EmptyObservable(scheduler), source);\r\n        }\r\n    };\r\n}\r\nexports.startWith = startWith;\r\n"],"mappings":"AAAA,YAAY;;AACZ,IAAIA,iBAAiB,GAAGC,OAAO,CAAC,+BAA+B,CAAC;AAChE,IAAIC,kBAAkB,GAAGD,OAAO,CAAC,gCAAgC,CAAC;AAClE,IAAIE,iBAAiB,GAAGF,OAAO,CAAC,+BAA+B,CAAC;AAChE,IAAIG,QAAQ,GAAGH,OAAO,CAAC,sBAAsB,CAAC;AAC9C,IAAII,aAAa,GAAGJ,OAAO,CAAC,qBAAqB,CAAC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASK,SAAS,GAAG;EACjB,IAAIC,KAAK,GAAG,EAAE;EACd,KAAK,IAAIC,EAAE,GAAG,CAAC,EAAEA,EAAE,GAAGC,SAAS,CAACC,MAAM,EAAEF,EAAE,EAAE,EAAE;IAC1CD,KAAK,CAACC,EAAE,GAAG,CAAC,CAAC,GAAGC,SAAS,CAACD,EAAE,CAAC;EACjC;EACA,OAAO,UAAUG,MAAM,EAAE;IACrB,IAAIC,SAAS,GAAGL,KAAK,CAACA,KAAK,CAACG,MAAM,GAAG,CAAC,CAAC;IACvC,IAAIL,aAAa,CAACQ,WAAW,CAACD,SAAS,CAAC,EAAE;MACtCL,KAAK,CAACO,GAAG,EAAE;IACf,CAAC,MACI;MACDF,SAAS,GAAG,IAAI;IACpB;IACA,IAAIG,GAAG,GAAGR,KAAK,CAACG,MAAM;IACtB,IAAIK,GAAG,KAAK,CAAC,EAAE;MACX,OAAOX,QAAQ,CAACY,MAAM,CAAC,IAAId,kBAAkB,CAACe,gBAAgB,CAACV,KAAK,CAAC,CAAC,CAAC,EAAEK,SAAS,CAAC,EAAED,MAAM,CAAC;IAChG,CAAC,MACI,IAAII,GAAG,GAAG,CAAC,EAAE;MACd,OAAOX,QAAQ,CAACY,MAAM,CAAC,IAAIhB,iBAAiB,CAACkB,eAAe,CAACX,KAAK,EAAEK,SAAS,CAAC,EAAED,MAAM,CAAC;IAC3F,CAAC,MACI;MACD,OAAOP,QAAQ,CAACY,MAAM,CAAC,IAAIb,iBAAiB,CAACgB,eAAe,CAACP,SAAS,CAAC,EAAED,MAAM,CAAC;IACpF;EACJ,CAAC;AACL;AACAS,OAAO,CAACd,SAAS,GAAGA,SAAS"},"metadata":{},"sourceType":"script","externalDependencies":[]}