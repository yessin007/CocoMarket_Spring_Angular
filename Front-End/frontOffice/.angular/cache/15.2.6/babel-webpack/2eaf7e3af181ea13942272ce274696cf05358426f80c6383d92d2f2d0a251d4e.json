{"ast":null,"code":"\"use strict\";\n\nvar multicast_1 = require('./multicast');\nvar refCount_1 = require('./refCount');\nvar Subject_1 = require('../Subject');\nfunction shareSubjectFactory() {\n  return new Subject_1.Subject();\n}\n/**\r\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\r\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\r\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\r\n * This is an alias for .multicast(() => new Subject()).refCount().\r\n *\r\n * <img src=\"./img/share.png\" width=\"100%\">\r\n *\r\n * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.\r\n * @method share\r\n * @owner Observable\r\n */\nfunction share() {\n  return function (source) {\n    return refCount_1.refCount()(multicast_1.multicast(shareSubjectFactory)(source));\n  };\n}\nexports.share = share;\n;","map":{"version":3,"names":["multicast_1","require","refCount_1","Subject_1","shareSubjectFactory","Subject","share","source","refCount","multicast","exports"],"sources":["C:/Users/HP/Desktop/4SE3/PidevSym/PiDev_Spring_Angular/Front-End/frontOffice/node_modules/ng5-slider/node_modules/rxjs/operators/share.js"],"sourcesContent":["\"use strict\";\r\nvar multicast_1 = require('./multicast');\r\nvar refCount_1 = require('./refCount');\r\nvar Subject_1 = require('../Subject');\r\nfunction shareSubjectFactory() {\r\n    return new Subject_1.Subject();\r\n}\r\n/**\r\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\r\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\r\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\r\n * This is an alias for .multicast(() => new Subject()).refCount().\r\n *\r\n * <img src=\"./img/share.png\" width=\"100%\">\r\n *\r\n * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.\r\n * @method share\r\n * @owner Observable\r\n */\r\nfunction share() {\r\n    return function (source) { return refCount_1.refCount()(multicast_1.multicast(shareSubjectFactory)(source)); };\r\n}\r\nexports.share = share;\r\n;\r\n"],"mappings":"AAAA,YAAY;;AACZ,IAAIA,WAAW,GAAGC,OAAO,CAAC,aAAa,CAAC;AACxC,IAAIC,UAAU,GAAGD,OAAO,CAAC,YAAY,CAAC;AACtC,IAAIE,SAAS,GAAGF,OAAO,CAAC,YAAY,CAAC;AACrC,SAASG,mBAAmB,GAAG;EAC3B,OAAO,IAAID,SAAS,CAACE,OAAO,EAAE;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,KAAK,GAAG;EACb,OAAO,UAAUC,MAAM,EAAE;IAAE,OAAOL,UAAU,CAACM,QAAQ,EAAE,CAACR,WAAW,CAACS,SAAS,CAACL,mBAAmB,CAAC,CAACG,MAAM,CAAC,CAAC;EAAE,CAAC;AAClH;AACAG,OAAO,CAACJ,KAAK,GAAGA,KAAK;AACrB"},"metadata":{},"sourceType":"script","externalDependencies":[]}