{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\r\n * Counts the number of emissions on the source and emits that number when the\r\n * source completes.\r\n *\r\n * <span class=\"informal\">Tells how many values were emitted, when the source\r\n * completes.</span>\r\n *\r\n * <img src=\"./img/count.png\" width=\"100%\">\r\n *\r\n * `count` transforms an Observable that emits values into an Observable that\r\n * emits a single value that represents the number of values emitted by the\r\n * source Observable. If the source Observable terminates with an error, `count`\r\n * will pass this error notification along without emitting a value first. If\r\n * the source Observable does not terminate at all, `count` will neither emit\r\n * a value nor terminate. This operator takes an optional `predicate` function\r\n * as argument, in which case the output emission will represent the number of\r\n * source values that matched `true` with the `predicate`.\r\n *\r\n * @example <caption>Counts how many seconds have passed before the first click happened</caption>\r\n * var seconds = Rx.Observable.interval(1000);\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var secondsBeforeClick = seconds.takeUntil(clicks);\r\n * var result = secondsBeforeClick.count();\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>\r\n * var numbers = Rx.Observable.range(1, 7);\r\n * var result = numbers.count(i => i % 2 === 1);\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * // Results in:\r\n * // 4\r\n *\r\n * @see {@link max}\r\n * @see {@link min}\r\n * @see {@link reduce}\r\n *\r\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\r\n * boolean function to select what values are to be counted. It is provided with\r\n * arguments of:\r\n * - `value`: the value from the source Observable.\r\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\r\n * - `source`: the source Observable instance itself.\r\n * @return {Observable} An Observable of one number that represents the count as\r\n * described above.\r\n * @method count\r\n * @owner Observable\r\n */\nfunction count(predicate) {\n  return function (source) {\n    return source.lift(new CountOperator(predicate, source));\n  };\n}\nexports.count = count;\nvar CountOperator = function () {\n  function CountOperator(predicate, source) {\n    this.predicate = predicate;\n    this.source = source;\n  }\n  CountOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));\n  };\n  return CountOperator;\n}();\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\nvar CountSubscriber = function (_super) {\n  __extends(CountSubscriber, _super);\n  function CountSubscriber(destination, predicate, source) {\n    _super.call(this, destination);\n    this.predicate = predicate;\n    this.source = source;\n    this.count = 0;\n    this.index = 0;\n  }\n  CountSubscriber.prototype._next = function (value) {\n    if (this.predicate) {\n      this._tryPredicate(value);\n    } else {\n      this.count++;\n    }\n  };\n  CountSubscriber.prototype._tryPredicate = function (value) {\n    var result;\n    try {\n      result = this.predicate(value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this.count++;\n    }\n  };\n  CountSubscriber.prototype._complete = function () {\n    this.destination.next(this.count);\n    this.destination.complete();\n  };\n  return CountSubscriber;\n}(Subscriber_1.Subscriber);","map":{"version":3,"names":["__extends","d","b","p","hasOwnProperty","__","constructor","prototype","Object","create","Subscriber_1","require","count","predicate","source","lift","CountOperator","exports","call","subscriber","subscribe","CountSubscriber","_super","destination","index","_next","value","_tryPredicate","result","err","error","_complete","next","complete","Subscriber"],"sources":["C:/Users/HP/Desktop/4SE3/PidevSym/PiDev_Spring_Angular/Front-End/frontOffice/node_modules/ng5-slider/node_modules/rxjs/operators/count.js"],"sourcesContent":["\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar Subscriber_1 = require('../Subscriber');\r\n/**\r\n * Counts the number of emissions on the source and emits that number when the\r\n * source completes.\r\n *\r\n * <span class=\"informal\">Tells how many values were emitted, when the source\r\n * completes.</span>\r\n *\r\n * <img src=\"./img/count.png\" width=\"100%\">\r\n *\r\n * `count` transforms an Observable that emits values into an Observable that\r\n * emits a single value that represents the number of values emitted by the\r\n * source Observable. If the source Observable terminates with an error, `count`\r\n * will pass this error notification along without emitting a value first. If\r\n * the source Observable does not terminate at all, `count` will neither emit\r\n * a value nor terminate. This operator takes an optional `predicate` function\r\n * as argument, in which case the output emission will represent the number of\r\n * source values that matched `true` with the `predicate`.\r\n *\r\n * @example <caption>Counts how many seconds have passed before the first click happened</caption>\r\n * var seconds = Rx.Observable.interval(1000);\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var secondsBeforeClick = seconds.takeUntil(clicks);\r\n * var result = secondsBeforeClick.count();\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>\r\n * var numbers = Rx.Observable.range(1, 7);\r\n * var result = numbers.count(i => i % 2 === 1);\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * // Results in:\r\n * // 4\r\n *\r\n * @see {@link max}\r\n * @see {@link min}\r\n * @see {@link reduce}\r\n *\r\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\r\n * boolean function to select what values are to be counted. It is provided with\r\n * arguments of:\r\n * - `value`: the value from the source Observable.\r\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\r\n * - `source`: the source Observable instance itself.\r\n * @return {Observable} An Observable of one number that represents the count as\r\n * described above.\r\n * @method count\r\n * @owner Observable\r\n */\r\nfunction count(predicate) {\r\n    return function (source) { return source.lift(new CountOperator(predicate, source)); };\r\n}\r\nexports.count = count;\r\nvar CountOperator = (function () {\r\n    function CountOperator(predicate, source) {\r\n        this.predicate = predicate;\r\n        this.source = source;\r\n    }\r\n    CountOperator.prototype.call = function (subscriber, source) {\r\n        return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));\r\n    };\r\n    return CountOperator;\r\n}());\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nvar CountSubscriber = (function (_super) {\r\n    __extends(CountSubscriber, _super);\r\n    function CountSubscriber(destination, predicate, source) {\r\n        _super.call(this, destination);\r\n        this.predicate = predicate;\r\n        this.source = source;\r\n        this.count = 0;\r\n        this.index = 0;\r\n    }\r\n    CountSubscriber.prototype._next = function (value) {\r\n        if (this.predicate) {\r\n            this._tryPredicate(value);\r\n        }\r\n        else {\r\n            this.count++;\r\n        }\r\n    };\r\n    CountSubscriber.prototype._tryPredicate = function (value) {\r\n        var result;\r\n        try {\r\n            result = this.predicate(value, this.index++, this.source);\r\n        }\r\n        catch (err) {\r\n            this.destination.error(err);\r\n            return;\r\n        }\r\n        if (result) {\r\n            this.count++;\r\n        }\r\n    };\r\n    CountSubscriber.prototype._complete = function () {\r\n        this.destination.next(this.count);\r\n        this.destination.complete();\r\n    };\r\n    return CountSubscriber;\r\n}(Subscriber_1.Subscriber));\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}