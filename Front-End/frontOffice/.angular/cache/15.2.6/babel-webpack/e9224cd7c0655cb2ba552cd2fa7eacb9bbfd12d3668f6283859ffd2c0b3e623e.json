{"ast":null,"code":"\"use strict\";\n\nvar elementAt_1 = require('../operators/elementAt');\n/**\r\n * Emits the single value at the specified `index` in a sequence of emissions\r\n * from the source Observable.\r\n *\r\n * <span class=\"informal\">Emits only the i-th value, then completes.</span>\r\n *\r\n * <img src=\"./img/elementAt.png\" width=\"100%\">\r\n *\r\n * `elementAt` returns an Observable that emits the item at the specified\r\n * `index` in the source Observable, or a default value if that `index` is out\r\n * of range and the `default` argument is provided. If the `default` argument is\r\n * not given and the `index` is out of range, the output Observable will emit an\r\n * `ArgumentOutOfRangeError` error.\r\n *\r\n * @example <caption>Emit only the third click event</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var result = clicks.elementAt(2);\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * // Results in:\r\n * // click 1 = nothing\r\n * // click 2 = nothing\r\n * // click 3 = MouseEvent object logged to console\r\n *\r\n * @see {@link first}\r\n * @see {@link last}\r\n * @see {@link skip}\r\n * @see {@link single}\r\n * @see {@link take}\r\n *\r\n * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\r\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the\r\n * Observable has completed before emitting the i-th `next` notification.\r\n *\r\n * @param {number} index Is the number `i` for the i-th source emission that has\r\n * happened since the subscription, starting from the number `0`.\r\n * @param {T} [defaultValue] The default value returned for missing indices.\r\n * @return {Observable} An Observable that emits a single item, if it is found.\r\n * Otherwise, will emit the default value if given. If not, then emits an error.\r\n * @method elementAt\r\n * @owner Observable\r\n */\nfunction elementAt(index, defaultValue) {\n  return elementAt_1.elementAt(index, defaultValue)(this);\n}\nexports.elementAt = elementAt;","map":{"version":3,"names":["elementAt_1","require","elementAt","index","defaultValue","exports"],"sources":["C:/Users/HP/Desktop/4SE3/PidevSym/PiDev_Spring_Angular/Front-End/frontOffice/node_modules/ng5-slider/node_modules/rxjs/operator/elementAt.js"],"sourcesContent":["\"use strict\";\r\nvar elementAt_1 = require('../operators/elementAt');\r\n/**\r\n * Emits the single value at the specified `index` in a sequence of emissions\r\n * from the source Observable.\r\n *\r\n * <span class=\"informal\">Emits only the i-th value, then completes.</span>\r\n *\r\n * <img src=\"./img/elementAt.png\" width=\"100%\">\r\n *\r\n * `elementAt` returns an Observable that emits the item at the specified\r\n * `index` in the source Observable, or a default value if that `index` is out\r\n * of range and the `default` argument is provided. If the `default` argument is\r\n * not given and the `index` is out of range, the output Observable will emit an\r\n * `ArgumentOutOfRangeError` error.\r\n *\r\n * @example <caption>Emit only the third click event</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var result = clicks.elementAt(2);\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * // Results in:\r\n * // click 1 = nothing\r\n * // click 2 = nothing\r\n * // click 3 = MouseEvent object logged to console\r\n *\r\n * @see {@link first}\r\n * @see {@link last}\r\n * @see {@link skip}\r\n * @see {@link single}\r\n * @see {@link take}\r\n *\r\n * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\r\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the\r\n * Observable has completed before emitting the i-th `next` notification.\r\n *\r\n * @param {number} index Is the number `i` for the i-th source emission that has\r\n * happened since the subscription, starting from the number `0`.\r\n * @param {T} [defaultValue] The default value returned for missing indices.\r\n * @return {Observable} An Observable that emits a single item, if it is found.\r\n * Otherwise, will emit the default value if given. If not, then emits an error.\r\n * @method elementAt\r\n * @owner Observable\r\n */\r\nfunction elementAt(index, defaultValue) {\r\n    return elementAt_1.elementAt(index, defaultValue)(this);\r\n}\r\nexports.elementAt = elementAt;\r\n"],"mappings":"AAAA,YAAY;;AACZ,IAAIA,WAAW,GAAGC,OAAO,CAAC,wBAAwB,CAAC;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,SAAS,CAACC,KAAK,EAAEC,YAAY,EAAE;EACpC,OAAOJ,WAAW,CAACE,SAAS,CAACC,KAAK,EAAEC,YAAY,CAAC,CAAC,IAAI,CAAC;AAC3D;AACAC,OAAO,CAACH,SAAS,GAAGA,SAAS"},"metadata":{},"sourceType":"script","externalDependencies":[]}